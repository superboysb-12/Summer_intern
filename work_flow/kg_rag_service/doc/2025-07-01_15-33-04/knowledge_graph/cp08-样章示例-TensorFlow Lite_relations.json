[
  [
    "MobileNet V2",
    "用途",
    "创建、训练和导出自定义 TensorFlow Lite 模型"
  ],
  [
    "TensorFlow Lite",
    "包含",
    "模型文件和标签文件"
  ],
  [
    "Android 应用",
    "用途",
    "识别花卉图片"
  ],
  [
    "TensorFlow Lite",
    "示例",
    "可从 github 下载源码"
  ],
  [
    "flower_classification",
    "组成部分",
    "android/start 目录下的项目模板和 finish 目录下的完整代码"
  ],
  [
    "Android Studio",
    "条件",
    "需要确认版本"
  ],
  [
    "MobileNet V2",
    "组成部分",
    "155层网络"
  ],
  [
    "微调",
    "步骤",
    "取消冻结模型的顶层"
  ],
  [
    "微调",
    "步骤",
    "设置前100层为不可训练"
  ],
  [
    "微调",
    "步骤",
    "使用低学习率重新编译模型"
  ],
  [
    "微调",
    "结果",
    "模型精度提高到98%"
  ],
  [
    "微调",
    "缺点",
    "可能导致模型过拟合"
  ],
  [
    "TFLite",
    "用途",
    "将TensorFlow模型转换为轻量级格式"
  ],
  [
    "SavedModel",
    "特点",
    "包含完整的TensorFlow程序"
  ],
  [
    "SavedModel",
    "特点",
    "不需要原始模型构建代码就可以运行"
  ],
  [
    "模型训练",
    "步骤",
    "设置model.trainable = False"
  ],
  [
    "模型训练",
    "步骤",
    "训练预训练模型的顶层权重"
  ],
  [
    "模型训练",
    "条件",
    "需先训练顶层分类器并设置预训练模型为不可训练"
  ],
  [
    "fine_tune_at",
    "是什么",
    "从该层开始进行微调的参数"
  ],
  [
    "fine_tune_at",
    "示例",
    "100"
  ],
  [
    "TensorFlow Lite",
    "包含",
    "TensorFlow Lite 解释器(Interpreter)"
  ],
  [
    "TensorFlow Lite",
    "包含",
    "TensorFlow Lite 转换器(Converter)"
  ],
  [
    "TensorFlow Lite",
    "包含",
    "算子库(Op kernels)"
  ],
  [
    "TensorFlow Lite",
    "包含",
    "硬件加速代理(Hardware accelerator delegate)"
  ],
  [
    "TensorFlow Lite 转换器",
    "用途",
    "将 TensorFlow 模型转换为方便解释器使用的格式"
  ],
  [
    "TensorFlow Lite 转换器",
    "用途",
    "引入优化以减小二进制文件的大小和提高性能"
  ],
  [
    "TensorFlow Lite 解释器",
    "特点",
    "可在手机、嵌入式 Linux 设备和微控制器等很多不同类型的硬件上运行"
  ],
  [
    "TensorFlow Lite 解释器",
    "特点",
    "安卓应用只需 1 兆左右的运行环境"
  ],
  [
    "TensorFlow Lite 解释器",
    "特点",
    "在 MCU 上甚至可以小于 100KB"
  ],
  [
    "TensorFlow Lite 算子库",
    "特点",
    "目前有130个左右"
  ],
  [
    "TensorFlow Lite 算子库",
    "特点",
    "与 TensorFlow 的核心算子库略有不同"
  ],
  [
    "TensorFlow Lite 算子库",
    "特点",
    "做了移动设备相关的优化"
  ],
  [
    "TensorFlow Lite",
    "用途",
    "利用 ARM 的 NEON 指令集做了大量的优化"
  ],
  [
    "TensorFlow Lite",
    "用途",
    "可以利用手机上的加速器，比如 GPU 或者 DSP"
  ],
  [
    "Android 神经网络 API",
    "用途",
    "让硬件厂商可以扩展支持这样的接口"
  ],
  [
    "mobilenetv2_1.00_224",
    "组成部分",
    "conv2d, dropout, global_average_pooling2d, dense"
  ],
  [
    "mobilenetv2_1.00_224",
    "特点",
    "Total params: 2,626,821, Trainable params: 368,837, Non-trainable params: 2,257,984"
  ],
  [
    "model.fit",
    "执行步骤",
    "train_generator, steps_per_epoch=len(train_generator), epochs=epochs, validation_data=val_generator, validation_steps=len(val_generator)"
  ],
  [
    "微调",
    "条件",
    "设置 model.trainable = False 参数后，训练期间将不更新预训练网络的权重"
  ],
  [
    "微调",
    "用途",
    "提高性能的方法是训练预训练模型的顶层的权重以及刚添加的分类器的训练"
  ],
  [
    "微调",
    "特点",
    "训练顶层分类器并将预先训练的模型设置为不可训练之后才应尝试"
  ],
  [
    "微调",
    "结果",
    "如果在预先训练的模型上添加一个随机初始化的分类器并尝试联合训练所有层，则梯度更新的幅度将太大，并且预训练模型将忘记它学到的东西"
  ],
  [
    "微调",
    "执行步骤",
    "微调少量顶层而不是整个 MobileNet 模型"
  ],
  [
    "MobileNet 模型",
    "特点",
    "前几层学习非常简单和通用的功能，这些功能可以推广到几乎所有类型的图像"
  ],
  [
    "MobileNet 模型",
    "特点",
    "随着层越来越高，这些功能越来越多地针对训练模型的数据集"
  ],
  [
    "微调",
    "用途",
    "使这些专用功能适应新数据集，而不是覆盖通用学习"
  ],
  [
    "微调",
    "执行步骤",
    "取消冻结模型的顶层"
  ],
  [
    "TensorFlow Lite 开发工作流程",
    "执行步骤",
    "选择模型、转换模型、部署到设备、优化模型"
  ],
  [
    "选择模型",
    "包含",
    "使用自己的 TensorFlow 模型、在线查找模型或从 TensorFlow 预训练模型中选择"
  ],
  [
    "转换模型",
    "用途",
    "将自定义模型转换为 TensorFlow Lite 格式"
  ],
  [
    "部署到设备",
    "用途",
    "使用 TensorFlow Lite 解释器在设备端运行模型"
  ],
  [
    "优化模型",
    "用途",
    "使用模型优化工具包缩减模型大小并提高效率"
  ],
  [
    "TensorFlow Lite 解释器",
    "特点",
    "提供多种语言的 API"
  ],
  [
    "模型优化工具包",
    "用途",
    "缩减模型大小并提高效率，同时最大限度地降低对准确率的影响"
  ],
  [
    "TFLite 模型转换过程",
    "步骤",
    "用户在自己的工作台中使用 TensorFlow API 构造 TensorFlow 模型"
  ],
  [
    "TFLite 模型转换过程",
    "步骤",
    "使用 TFLite 模型转换器转换成 TFLite 文件格式(FlatBuffers 格式)"
  ],
  [
    "TFLite 解释器",
    "用途",
    "接受 TFLite 模型"
  ],
  [
    "TFLite 解释器",
    "用途",
    "调用不同的硬件加速器比如 GPU 进行执行"
  ],
  [
    "TFLite 文件格式",
    "是",
    "FlatBuffers 格式"
  ],
  [
    "Android Studio",
    "用途",
    "打开现有 Android Studio 项目"
  ],
  [
    "Android Studio",
    "组成部分",
    "启动图标"
  ],
  [
    "Android Studio",
    "组成部分",
    "打开项目图标"
  ],
  [
    "TensorFlow Lite 模型文件",
    "用途",
    "用于 flower_classification 项目"
  ],
  [
    "build.gradle",
    "用途",
    "配置项目依赖"
  ],
  [
    "build.gradle",
    "组成部分",
    "dependencies"
  ],
  [
    "Gradle 同步",
    "条件",
    "首次打开项目时"
  ],
  [
    "Gradle 同步",
    "用途",
    "同步项目依赖"
  ],
  [
    "tensorflow-lite",
    "用途",
    "在 Android 项目中使用 TensorFlow Lite"
  ],
  [
    "tensorflow-lite",
    "属于",
    "org.tensorflow 库"
  ],
  [
    "aaptOptions",
    "用途",
    "防止Android在生成应用程序二进制文件时压缩TensorFlow Lite模型文件"
  ],
  [
    "aaptOptions",
    "组成部分",
    "noCompress \"tflite\""
  ],
  [
    "Android环境部署",
    "步骤",
    "运行Sync Gradle"
  ],
  [
    "Android Studio",
    "条件",
    "需要配置proxy或使用国内镜像"
  ],
  [
    "build.gradle",
    "修改",
    "将maven源google()和jcenter()替换为国内镜像"
  ],
  [
    "buildscript",
    "组成部分",
    "repositories和dependencies"
  ],
  [
    "TensorFlow Lite",
    "用途",
    "在移动端（mobile）、嵌入式（embeded）和物联网（IoT）设备上运行 TensorFlow 模型"
  ],
  [
    "TensorFlow 模型",
    "是什么",
    "一种数据结构，包含了在解决一个特定问题时，训练得到的机器学习网络的逻辑和知识"
  ],
  [
    "TensorFlow 模型",
    "用途",
    "在 TensorFlow Lite 中使用"
  ],
  [
    "TensorFlow Lite",
    "包含",
    "转换、运行 TensorFlow 模型所需的所有工具"
  ],
  [
    "TensorFlow Hub",
    "用途",
    "存放训练好的模型供开发人员复用"
  ],
  [
    "TensorFlow Hub",
    "特点",
    "提供已经训练好且经过充分认证的模型"
  ],
  [
    "训练好的模型",
    "用途",
    "直接部署或用于迁移学习"
  ],
  [
    "TensorFlow Hub",
    "组成部分",
    "Text，Image，Video 和 Publishers 等类别"
  ],
  [
    "MobileNet",
    "示例",
    "TensorFlow Hub 上可搜索到的模型"
  ],
  [
    "hub.KerasLayer",
    "用途",
    "用于构建 TensorFlow 模型"
  ],
  [
    "MobileNet V2",
    "组成部分",
    "155层网络"
  ],
  [
    "微调过程",
    "步骤",
    "冻结前100层"
  ],
  [
    "微调过程",
    "步骤",
    "使用低学习率编译模型"
  ],
  [
    "微调过程",
    "步骤",
    "恢复训练"
  ],
  [
    "模型编译",
    "参数",
    "loss='categorical_crossentropy'"
  ],
  [
    "模型编译",
    "参数",
    "optimizer=tf.keras.optimizers.Adam(1e-5)"
  ],
  [
    "模型编译",
    "参数",
    "metrics=['accuracy']"
  ],
  [
    "微调结果",
    "特点",
    "模型精度达到98%"
  ],
  [
    "微调结果",
    "缺点",
    "验证损失高于训练损失"
  ],
  [
    "微调结果",
    "缺点",
    "可能存在过度拟合"
  ],
  [
    "TFLite转换",
    "步骤",
    "使用tf.saved_model.save保存模型"
  ],
  [
    "TFLite转换",
    "步骤",
    "使用TFLiteConverter转换模型"
  ],
  [
    "SavedModel",
    "特点",
    "包含完整的TensorFlow程序"
  ],
  [
    "SavedModel",
    "特点",
    "不需要原始模型构建代码"
  ],
  [
    "Android部署",
    "步骤",
    "将模型文件和标签文件拷贝到assets目录"
  ],
  [
    "Android部署",
    "步骤",
    "修改build.gradle配置"
  ],
  [
    "Android部署",
    "步骤",
    "初始化TensorFlow Lite解释器"
  ],
  [
    "TensorFlow Lite解释器",
    "用途",
    "执行模型推理"
  ],
  [
    "TensorFlow Lite支持库",
    "用途",
    "简化图像预处理"
  ],
  [
    "推理过程",
    "步骤",
    "数据转换"
  ],
  [
    "推理过程",
    "步骤",
    "执行推理"
  ],
  [
    "推理过程",
    "步骤",
    "解释输出"
  ],
  [
    "PoseNet模型",
    "用途",
    "实现人体姿势估计"
  ],
  [
    "PoseNet模型",
    "特点",
    "检测关键身体部位的位置"
  ],
  [
    "TensorFlow Lite 转换器",
    "可以接受",
    "Keras Model 和 SavedModel"
  ],
  [
    "TensorFlow Lite 转换器",
    "用途",
    "将 TensorFlow 模型转换为 TFLite 格式"
  ],
  [
    "TensorFlow Lite 转换器",
    "包含",
    "Python API 和命令行工具"
  ],
  [
    "TFLiteConverter.from_saved_model()",
    "用途",
    "从 SavedModel 转换模型"
  ],
  [
    "TFLiteConverter.from_keras_model()",
    "用途",
    "从 Keras Model 转换模型"
  ],
  [
    "tflite_convert",
    "用途",
    "通过命令行转换模型"
  ],
  [
    "TensorFlow Lite 转换器",
    "特点",
    "支持算子优化和编译优化"
  ],
  [
    "算子优化",
    "包含",
    "算子融合、常数折叠和无用代码删除"
  ],
  [
    "TensorFlow Lite 转换器",
    "特点",
    "实现了一组优化的算子内核"
  ],
  [
    "TensorFlow Lite 转换器",
    "用途",
    "提升移动设备上的性能"
  ],
  [
    "TensorFlow Lite 转换器",
    "特点",
    "支持量化"
  ],
  [
    "训练后量化",
    "特点",
    "不需要改变模型"
  ],
  [
    "converter.optimizations=[tf.lite.Optimize.DEFAULT]",
    "用途",
    "启用默认优化"
  ],
  [
    "TensorFlow Lite",
    "用途",
    "端侧机器学习"
  ],
  [
    "TensorFlow Lite",
    "用途",
    "移动应用中的OCR处理"
  ],
  [
    "TensorFlow Lite",
    "用途",
    "视频中的AR效果"
  ],
  [
    "TensorFlow Lite",
    "用途",
    "文字处理"
  ],
  [
    "TensorFlow Lite",
    "用途",
    "图像和视频处理"
  ],
  [
    "TensorFlow Lite",
    "用途",
    "离线语音识别"
  ],
  [
    "TensorFlow Lite",
    "用途",
    "IoT领域"
  ],
  [
    "TensorFlow Lite",
    "用途",
    "工业物联智能设备的开发"
  ],
  [
    "TensorFlow Lite",
    "特点",
    "高性能"
  ],
  [
    "TensorFlow Lite",
    "特点",
    "支持微控制器(MCU)"
  ],
  [
    "TensorFlow Lite",
    "示例",
    "Google Photos"
  ],
  [
    "TensorFlow Lite",
    "示例",
    "Google Arts & Culture"
  ],
  [
    "TensorFlow Lite",
    "示例",
    "Google Assistant"
  ],
  [
    "TensorFlow Lite",
    "示例",
    "网易"
  ],
  [
    "TensorFlow Lite",
    "示例",
    "爱奇艺"
  ],
  [
    "TensorFlow Lite",
    "示例",
    "WPS"
  ],
  [
    "TensorFlow Lite",
    "示例",
    "出门问问智能音箱"
  ],
  [
    "TensorFlow Lite",
    "示例",
    "科沃斯扫地机器人"
  ],
  [
    "TensorFlow Lite",
    "示例",
    "创新奇智智能质检一体机"
  ],
  [
    "TensorFlow Lite",
    "示例",
    "创新奇智智能读码机"
  ],
  [
    "端侧语音识别",
    "特点",
    "效果和服务器端十分接近"
  ],
  [
    "端侧语音识别",
    "特点",
    "模型大小显著减小"
  ],
  [
    "Google Assistant",
    "用途",
    "语音识别"
  ],
  [
    "Google Assistant",
    "用途",
    "Live Caption功能"
  ],
  [
    "MCU",
    "是什么",
    "单一芯片的小型计算机"
  ],
  [
    "MCU",
    "特点",
    "没有操作系统"
  ],
  [
    "MCU",
    "特点",
    "内存只有几十KB"
  ],
  [
    "科沃斯扫地机器人",
    "用途",
    "室内避开障碍物"
  ],
  [
    "科沃斯扫地机器人",
    "优点",
    "推理速度提高了30%"
  ],
  [
    "创新奇智",
    "用途",
    "服装厂质检"
  ],
  [
    "TensorFlow Lite解释器",
    "用途",
    "执行模型推理"
  ],
  [
    "ClassifierFloatMobileNet类",
    "包含",
    "model.tflite和label.txt"
  ],
  [
    "Classifier类",
    "包含",
    "TFLite解释器和GPU代理"
  ],
  [
    "GPU代理",
    "用途",
    "加速模型推理"
  ],
  [
    "TFLite解释器",
    "组成部分",
    "tfliteModel和tfliteOptions"
  ],
  [
    "图像预处理",
    "执行步骤",
    "resize原始图像到模型输入大小"
  ],
  [
    "TensorFlow Lite推理过程",
    "执行步骤",
    "数据转换、执行推理、解释输出"
  ],
  [
    "ImageProcessor",
    "用途",
    "预处理输入图像"
  ],
  [
    "recognizeImage方法",
    "用途",
    "执行推理并获取类别概率"
  ],
  [
    "PoseNet模型",
    "用途",
    "实现人体姿势估计"
  ],
  [
    "PoseNet示例应用程序",
    "执行步骤",
    "获取图像数据、创建位图、调用estimateSinglePose函数、绘制骨架"
  ],
  [
    "TensorFlow Lite",
    "是",
    "在边缘设备上运行 TensorFlow 模型推理的官方框架"
  ],
  [
    "TensorFlow Lite",
    "特点",
    "跨平台运行，包括 Android、iOS 以及基于 Linux 的 IoT 设备和微控制器"
  ],
  [
    "TensorFlow Lite",
    "用途",
    "在边缘设备上运行 TensorFlow 模型推理"
  ],
  [
    "TensorFlow Lite",
    "组成部分",
    "优化的算子库"
  ],
  [
    "TensorFlow Lite",
    "特点",
    "能够利用各种硬件加速"
  ],
  [
    "TensorFlow Lite",
    "特点",
    "二进制文件的大小约为 1 MB（针对 32 位 ARM build）"
  ],
  [
    "TensorFlow Lite",
    "特点",
    "如果仅使用支持常见图像分类模型（InceptionV3 和 MobileNet）所需的运算符，二进制文件的大小不到 300 KB"
  ],
  [
    "TF Mobile",
    "是",
    "一个缩减版的 TensorFlow，简化了算子集，也缩小了运行库"
  ],
  [
    "TF Mobile",
    "用途",
    "在移动设备上运行 TensorFlow"
  ],
  [
    "TFMini",
    "用途",
    "Google 内部用于计算机视觉场景的解决方案"
  ],
  [
    "TFMini",
    "特点",
    "提供了一些转换工具压缩模型，进行算子融合并生成代码"
  ],
  [
    "TFMini",
    "特点",
    "将模型嵌入到二进制文件中，这样就可以在设备上运行和部署模型"
  ],
  [
    "TFMini",
    "缺点",
    "在把模型嵌入到实际的二进制文件中时兼容性存在较大挑战"
  ],
  [
    "TensorFlow Lite",
    "发展来源",
    "基于 TF Mobile 的经验"
  ],
  [
    "TensorFlow Lite",
    "发展来源",
    "继承了 TFMini 和内部其他类似项目的很多优秀工作"
  ],
  [
    "TensorFlow Lite 转换器",
    "用途",
    "将输入的 TensorFlow 模型生成 TensorFlow Lite 模型"
  ],
  [
    "TensorFlow Lite 模型",
    "特点",
    "优化的 FlatBuffer 格式"
  ],
  [
    "TensorFlow Lite 模型",
    "文件扩展名",
    ".tflite"
  ],
  [
    "TensorFlow Lite 转换器",
    "使用方式",
    "命令行与 Python API"
  ],
  [
    "Google",
    "推荐",
    "使用 Python API 进行转换"
  ],
  [
    "命令行工具",
    "特点",
    "只提供了基本的转化功能"
  ],
  [
    "FlatBuffers",
    "用途",
    "主要应用于游戏场景"
  ],
  [
    "FlatBuffers",
    "特点",
    "高性能场景创建的序列化库"
  ],
  [
    "FlatBuffers",
    "优点",
    "相比 Protocol Buffer 有更高的性能和更小的大小"
  ],
  [
    "FlatBuffers",
    "用途",
    "更适合于边缘设备部署"
  ],
  [
    "tflite_convert",
    "属于",
    "命令行 TensorFlow Lite 转换器命令行工具"
  ],
  [
    "tflite_convert",
    "安装方式",
    "与 TensorFlow 一起安装"
  ],
  [
    "--output_file",
    "参数说明",
    "类型: string. Full path of the output file"
  ],
  [
    "--saved_model_dir",
    "参数说明",
    "类型: string. Full path to the SavedModel directory"
  ],
  [
    "--keras_model_file",
    "参数说明",
    "类型: string. Full path to the Keras H5 model file"
  ],
  [
    "--enable_v1_converter",
    "参数说明",
    "类型: bool. (default False) Enables the converter and flags used in TF 1.x instead of TF 2.x"
  ],
  [
    "tf.keras model",
    "用途",
    "生成 HDF5 文件的绝对路径目录"
  ],
  [
    "TensorFlow 模型导出",
    "支持",
    "SavedModel 和 Keras Sequential 两种模型导出方法和格式"
  ],
  [
    "SavedModel",
    "示例",
    "tflite_convert --saved_model_dir=/tmp/mobilenet_saved_model --output_file=/tmp/mobilenet.tflite"
  ],
  [
    "Keras H5",
    "示例",
    "tflite_convert --keras_model_file=/tmp/mobilenet_keras_model.h5 --output_file=/tmp/mobilenet.tflite"
  ],
  [
    "tf.lite.TFLiteConverter.from_saved_model",
    "用途",
    "将SavedModel转换为TFLite模型"
  ],
  [
    "tf.lite.TFLiteConverter.from_saved_model",
    "输入参数",
    "saved_model_dir"
  ],
  [
    "tf.lite.TFLiteConverter.from_saved_model",
    "输出结果",
    "TFLite模型"
  ],
  [
    "Keras模型",
    "用途",
    "转换为TensorFlow Lite模型"
  ],
  [
    "TensorFlow Lite模型",
    "示例",
    "保存为model.tflite文件"
  ],
  [
    "TensorFlow",
    "包含",
    "TensorFlow Lite"
  ],
  [
    "tf.lite.TFLiteConverter",
    "是什么",
    "将 TensorFlow 模型格式转换为 TensorFlow Lite 的 Python API"
  ],
  [
    "TFLiteConverter.from_saved_model()",
    "用途",
    "转换 SavedModel 格式模型"
  ],
  [
    "TFLiteConverter.from_keras_model()",
    "用途",
    "转换 tf.keras 模型"
  ],
  [
    "TFLiteConverter.from_concrete_functions()",
    "用途",
    "转换 concrete functions"
  ],
  [
    "TensorFlow 2.x 模型",
    "特点",
    "使用 SavedModel 格式存储"
  ],
  [
    "TensorFlow 2.x 模型",
    "组成部分",
    "高阶 tf.keras.* API（Keras 模型）或低阶 tf.* API（用于生成具体函数）"
  ],
  [
    "tf.keras.models.Sequential",
    "示例",
    "创建包含多个 Dense 层的模型"
  ],
  [
    "tf.keras.layers.Dense",
    "用途",
    "构建神经网络的全连接层"
  ],
  [
    "model.compile",
    "用途",
    "编译模型，设置优化器和损失函数"
  ],
  [
    "model.fit",
    "用途",
    "训练模型"
  ],
  [
    "tf.saved_model.save",
    "用途",
    "将 Keras 模型保存为 SavedModel 格式"
  ],
  [
    "TensorFlow Lite 转换器",
    "用途",
    "将输入的 TensorFlow 模型生成 TensorFlow Lite 模型"
  ],
  [
    "TensorFlow Lite 模型",
    "特点",
    "优化的 FlatBuffer 格式，以 .tflite 为文件扩展名"
  ],
  [
    "TensorFlow Lite 转换器",
    "组成部分",
    "命令行工具和 Python API"
  ],
  [
    "FlatBuffers",
    "用途",
    "主要应用于游戏场景，是为了高性能场景创建的序列化库"
  ],
  [
    "FlatBuffers",
    "优点",
    "相比 Protocol Buffer 有更高的性能和更小的大小"
  ],
  [
    "FlatBuffers",
    "用途",
    "更适合于边缘设备部署"
  ],
  [
    "tflite_convert",
    "是",
    "TensorFlow Lite 转换器命令行工具"
  ],
  [
    "tflite_convert",
    "组成部分",
    "--output_file, --saved_model_dir, --keras_model_file, --enable_v1_converter"
  ],
  [
    "--output_file",
    "特点",
    "类型: string. Full path of the output file"
  ],
  [
    "--saved_model_dir",
    "特点",
    "类型: string. Full path to the SavedModel directory"
  ],
  [
    "--keras_model_file",
    "特点",
    "类型: string. Full path to the Keras H5 model file"
  ],
  [
    "--enable_v1_converter",
    "特点",
    "类型: bool. (default False) Enables the converter and flags used in TF 1.x instead of TF 2.x"
  ],
  [
    "TensorFlow 模型导出",
    "包含",
    "SavedModel 和 Keras Sequential"
  ],
  [
    "tf.lite.TFLiteConverter",
    "是",
    "将 TensorFlow 模型格式转换为 TensorFlow Lite 的 Python API"
  ],
  [
    "tf.lite.TFLiteConverter",
    "包含",
    "from_saved_model(), from_keras_model(), from_concrete_functions()"
  ],
  [
    "TFLiteConverter.from_saved_model()",
    "用途",
    "用来转换 SavedModel 格式模型"
  ],
  [
    "TFLiteConverter.from_keras_model()",
    "用途",
    "用来转换 tf.keras 模型"
  ],
  [
    "TFLiteConverter.from_concrete_functions()",
    "用途",
    "用来转换 concrete functions"
  ],
  [
    "TensorFlow 2.x 模型",
    "特点",
    "使用 SavedModel 格式存储"
  ],
  [
    "TensorFlow Lite 解释器",
    "用途",
    "执行模型文件在输入数据上定义的运算符，输出推理结果"
  ],
  [
    "TensorFlow Lite 解释器",
    "特点",
    "适用于多个平台"
  ],
  [
    "TensorFlow Lite 解释器",
    "特点",
    "提供了一个简单的 API，用于从 Java、Swift、Objective-C、C++ 和 Python 运行 TensorFlow Lite 模型"
  ],
  [
    "Java",
    "示例",
    "调用解释器的方式：try (Interpreter interpreter = new Interpreter(tensorflow_lite_model_file)) { interpreter.run(input, output); }"
  ],
  [
    "GPU",
    "优点",
    "比 CPU 执行更快的浮点矩阵运算"
  ],
  [
    "GPU",
    "示例",
    "在有 GPU 加速的手机上运行 MobileNet 图像分类，模型运行速度可以提高"
  ],
  [
    "TensorFlow Lite 解释器",
    "用途",
    "在不同设备上使用硬件加速"
  ],
  [
    "TensorFlow Lite 解释器",
    "包含",
    "GPU 委托"
  ],
  [
    "GPU 委托",
    "用途",
    "允许解释器在设备的 GPU 上运行适当的运算符"
  ],
  [
    "TensorFlow Lite 解释器",
    "用途",
    "在 Android 与 iOS 平台上使用"
  ],
  [
    "Android 开发人员",
    "用途",
    "TensorFlow Lite AAR"
  ],
  [
    "iOS 开发人员",
    "用途",
    "CocoaPods for Swift or Objective-C"
  ],
  [
    "TensorFlow Lite 解释器",
    "用途",
    "部署在 Raspberry Pi 和基于 Arm64 的主板的嵌入式 Linux 系统上"
  ],
  [
    "tf.keras.models.Sequential",
    "组成部分",
    "tf.keras.layers.Dense"
  ],
  [
    "tf.keras.layers.Dense",
    "特点",
    "units=1, input_shape=[1]"
  ],
  [
    "tf.keras.layers.Dense",
    "特点",
    "units=16, activation='relu'"
  ],
  [
    "tf.keras.layers.Dense",
    "特点",
    "units=1"
  ],
  [
    "model.compile",
    "用途",
    "optimizer='sgd', loss='mean_squared_error'"
  ],
  [
    "TensorFlow",
    "是什么",
    "一个端到端的机器学习开源框架"
  ],
  [
    "TensorFlow",
    "用途",
    "支持大规模的模型训练和各种环境的部署"
  ],
  [
    "TensorFlow",
    "特点",
    "支持服务器和移动端的部署"
  ],
  [
    "TensorFlow",
    "特点",
    "支持多种编程语言包括Python、C++、Java、Swift和Javascript"
  ],
  [
    "TensorFlow Lite",
    "是什么",
    "一个轻量、快速、兼容度高的专门针对移动式应用场景的深度学习工具"
  ],
  [
    "TensorFlow Lite",
    "用途",
    "针对移动端及IoT设备端的深度学习技术"
  ],
  [
    "TensorFlow Lite",
    "特点",
    "轻量化"
  ],
  [
    "TensorFlow Lite",
    "特点",
    "快速"
  ],
  [
    "TensorFlow Lite",
    "特点",
    "兼容度高"
  ],
  [
    "TensorFlow Lite",
    "结果",
    "大大降低了移动端及IoT设备端的深度学习技术门槛"
  ],
  [
    "TensorFlow Lite",
    "属于",
    "TensorFlow团队开发的产品"
  ],
  [
    "TensorFlow Lite",
    "用途",
    "优化模型大小和性能"
  ],
  [
    "模型优化",
    "目标",
    "在给定设备上实现性能、模型大小和准确性的理想平衡"
  ],
  [
    "模型复杂度",
    "特点",
    "影响准确性"
  ],
  [
    "模型大小",
    "特点",
    "影响磁盘和内存占用以及运行效率"
  ],
  [
    "量化",
    "用途",
    "降低权重的精确表示"
  ],
  [
    "量化",
    "优点",
    "对现有 CPU 平台的支持"
  ],
  [
    "量化",
    "优点",
    "降低存储器访问成本"
  ],
  [
    "量化",
    "优点",
    "利用 SIMD 指令功能"
  ],
  [
    "TensorFlow Lite",
    "包含",
    "post-training quantization"
  ],
  [
    "TensorFlow Lite",
    "包含",
    "Quantization-aware training"
  ],
  [
    "post-training quantization",
    "用途",
    "使权重和激活值的 Post training 更简单"
  ],
  [
    "Quantization-aware training",
    "用途",
    "以最小精度下降来训练网络"
  ],
  [
    "Quantization-aware training",
    "条件",
    "仅适用于卷积神经网络的一个子集"
  ],
  [
    "Python 代码片段",
    "示例",
    "使用预训练量化进行模型转换"
  ],
  [
    "TensorFlow Lite",
    "是什么",
    "一个轻量、快速、兼容度高的专门针对移动式应用场景的深度学习工具"
  ],
  [
    "TensorFlow Lite",
    "用途",
    "在移动设备、嵌入式设备和 IoT 设备上运行 TensorFlow 模型"
  ],
  [
    "TensorFlow Lite",
    "特点",
    "二进制文件小、延迟低、支持设备端机器学习推断"
  ],
  [
    "TensorFlow Lite",
    "组成部分",
    "TensorFlow Lite 解释器、TensorFlow Lite 转换器、算子库、硬件加速代理"
  ],
  [
    "TensorFlow Lite",
    "应用",
    "图像识别、文本处理、语音识别、AR 效果等"
  ],
  [
    "TensorFlow Lite",
    "应用",
    "Google Photos、Google Assistant、Uber、Airbnb、网易、爱奇艺、WPS 等"
  ],
  [
    "TensorFlow Lite",
    "应用",
    "智能质检一体机、智能读码机等工业物联智能设备"
  ],
  [
    "TensorFlow Lite",
    "特点",
    "支持微控制器(MCU)，模型大小可小至20 KB"
  ],
  [
    "TensorFlow Lite",
    "工作原理",
    "将 TensorFlow 模型转换为 TFLite 专用格式，通过解释器在设备端运行"
  ],
  [
    "TensorFlow Lite 转换器",
    "用途",
    "将 TensorFlow 模型转换为 TFLite 专用格式"
  ],
  [
    "TensorFlow Lite 转换器",
    "特点",
    "支持算子优化、量化等模型优化"
  ],
  [
    "FlatBuffers",
    "用途",
    "TFLite 模型文件格式，支持内存高效读取"
  ],
  [
    "TensorFlow Lite 解释器",
    "特点",
    "轻量级、快速启动、内存高效"
  ],
  [
    "TensorFlow Lite 解释器",
    "执行步骤",
    "加载模型、转换数据、运行模型推理、解释输出"
  ],
  [
    "TensorFlow Lite 工作流程",
    "执行步骤",
    "选择模型、转换模型、部署到设备、优化模型"
  ],
  [
    "MobileNet",
    "用途",
    "图像识别模型，可用于迁移学习"
  ],
  [
    "TensorFlow Hub",
    "用途",
    "提供预训练模型，供开发者复用"
  ],
  [
    "TensorFlow Lite",
    "是什么",
    "一组帮助开发者在移动设备、嵌入式设备和IoT设备上运行TensorFlow模型的工具"
  ],
  [
    "TensorFlow Lite",
    "用途",
    "支持设备端机器学习推断"
  ],
  [
    "TensorFlow Lite",
    "特点",
    "延迟较低"
  ],
  [
    "TensorFlow Lite",
    "特点",
    "二进制文件很小"
  ],
  [
    "TensorFlow Lite",
    "用途",
    "实现花卉识别 app"
  ],
  [
    "花卉识别 app",
    "运行平台",
    "Android 设备"
  ],
  [
    "花卉识别 app",
    "使用模型",
    "MobileNets_v2"
  ],
  [
    "花卉识别 app",
    "功能",
    "实时识别照相机所拍摄的花卉"
  ],
  [
    "花卉识别模型",
    "实现方法",
    "迁移学习"
  ],
  [
    "花卉识别模型",
    "转换工具",
    "TFLite 转换器"
  ],
  [
    "Android 应用",
    "使用组件",
    "TFLite 解释器"
  ],
  [
    "TensorFlow Lite 支持库",
    "用途",
    "预处理模型输入和后处理模型输出"
  ],
  [
    "tf.saved_model.save",
    "用途",
    "生成SavedModel"
  ],
  [
    "tf.saved_model.save",
    "参数",
    "model和保存目录路径"
  ],
  [
    "SavedModel",
    "生成方式",
    "使用tf.saved_model.save函数"
  ],
  [
    "tf.lite.TFLiteConverter",
    "用途",
    "将Keras模型转换为TFLite模型"
  ],
  [
    "tf.lite.TFLiteConverter.from_keras_model",
    "步骤",
    "创建TFLite转换器实例"
  ],
  [
    "converter.convert",
    "步骤",
    "执行模型转换过程"
  ],
  [
    "train_generator",
    "用途",
    "从指定目录生成训练数据批次"
  ],
  [
    "train_generator",
    "特点",
    "支持设置目标图像大小和批次大小"
  ],
  [
    "val_generator",
    "用途",
    "从指定目录生成验证数据批次"
  ],
  [
    "val_generator",
    "特点",
    "支持设置目标图像大小和批次大小"
  ],
  [
    "MobileNetV2",
    "是什么",
    "预加载了ImageNet训练权重的深度学习模型"
  ],
  [
    "MobileNetV2",
    "特点",
    "支持自定义输入形状"
  ],
  [
    "MobileNetV2",
    "用途",
    "作为迁移学习的基础模型"
  ],
  [
    "labels.txt",
    "用途",
    "保存训练数据的类别标签"
  ],
  [
    "迁移学习",
    "步骤",
    "实例化预训练模型作为基础模型"
  ],
  [
    "MobileNet V2",
    "是",
    "基于流线型架构的轻量级深层神经网络"
  ],
  [
    "MobileNet V2",
    "用途",
    "图像分类任务"
  ],
  [
    "MobileNet V2",
    "特点",
    "使用深度可分离的卷积"
  ],
  [
    "MobileNet V2",
    "组成部分",
    "预训练模型和全连接的分类器"
  ],
  [
    "迁移学习",
    "用途",
    "在小型数据集上训练模型"
  ],
  [
    "迁移学习",
    "步骤",
    "冻结预训练模型并更新分类器的权重"
  ],
  [
    "迁移学习",
    "步骤",
    "微调预训练模型的顶层权重"
  ],
  [
    "ImageDataGenerator",
    "用途",
    "生成批次的图片数据用于模型训练"
  ],
  [
    "ImageDataGenerator",
    "特点",
    "支持像素缩放和数据增强"
  ],
  [
    "flow_from_directory",
    "用途",
    "逐步加载单个数据集的图像"
  ],
  [
    "flow_from_directory",
    "特点",
    "可以配置图像加载的细节"
  ],
  [
    "flow_from_directory",
    "参数",
    "target_size用于设置图像大小"
  ],
  [
    "flow_from_directory",
    "参数",
    "batch_size用于设置每批图像数量"
  ],
  [
    "flow_from_directory",
    "参数",
    "shuffle用于控制批处理顺序"
  ],
  [
    "MobileNet V2模型",
    "用途",
    "将图片分类到1000类"
  ],
  [
    "MobileNet V2模型",
    "组成部分",
    "最后的神经网络层"
  ],
  [
    "include_top=False",
    "用途",
    "不需要原有模型中最后的神经网络层"
  ],
  [
    "迁移学习",
    "特点",
    "不改变基础模型的各项参数变量"
  ],
  [
    "迁移学习",
    "优点",
    "保留原来大规模训练的优势"
  ],
  [
    "model.trainable = False",
    "用途",
    "设置在训练中基础模型的各项参数变量不会被新的训练修改数据"
  ],
  [
    "MobileNet V2",
    "组成部分",
    "瓶颈层"
  ],
  [
    "瓶颈层",
    "特点",
    "保持了很多通用性"
  ],
  [
    "池化层",
    "用途",
    "对数据降维"
  ],
  [
    "输出层",
    "特点",
    "5个节点"
  ],
  [
    "GlobalAveragePooling2D",
    "用途",
    "将特征转换为每个图像对应一个1280元素向量"
  ],
  [
    "TFLite 模型文件格式",
    "是",
    "FlatBuffers"
  ],
  [
    "TFLite 模型文件格式",
    "特点",
    "注重实时性，内存高效"
  ],
  [
    "TFLite 模型文件格式",
    "特点",
    "支持将文件映射到内存中直接读取和解释，不需要额外解析"
  ],
  [
    "TFLite 模型文件格式",
    "特点",
    "减少内存碎片化"
  ],
  [
    "TFLite 模型文件格式",
    "组成部分",
    "子图、算子库和共享的内存缓冲区"
  ],
  [
    "TFLite 模型文件格式",
    "定义文件",
    "schema.fbs"
  ],
  [
    "TFLite 模型",
    "包含",
    "子图"
  ],
  [
    "TFLite 模型",
    "包含",
    "算子库"
  ],
  [
    "TFLite 模型",
    "包含",
    "共享的内存缓冲区"
  ],
  [
    "张量",
    "用途",
    "存储模型权重"
  ],
  [
    "张量",
    "用途",
    "计算节点的输入和输出"
  ],
  [
    "张量",
    "特点",
    "引用 Model 的内存缓冲区的一片区域，提高内存效率"
  ],
  [
    "算子实现",
    "包含",
    "OperatorCode"
  ],
  [
    "OperatorCode",
    "可以是",
    "内置的算子"
  ],
  [
    "OperatorCode",
    "可以是",
    "自定制算子"
  ],
  [
    "OperatorCode",
    "特点",
    "有一个名字"
  ],
  [
    "计算节点",
    "包含",
    "算子索引"
  ],
  [
    "计算节点",
    "包含",
    "输入输出用到的 Tensor 索引"
  ],
  [
    "子图",
    "包含",
    "一系列的计算节点"
  ],
  [
    "子图",
    "包含",
    "多个张量"
  ],
  [
    "子图",
    "包含",
    "子图本身的输入和输出"
  ],
  [
    "TFLite 解释执行器",
    "特点",
    "轻量级"
  ],
  [
    "TFLite 解释执行器",
    "特点",
    "快速启动"
  ],
  [
    "TFLite 解释执行器",
    "特点",
    "内存高效"
  ],
  [
    "TFLite 解释执行器",
    "组成部分",
    "核心运行时"
  ],
  [
    "TFLite 解释执行器",
    "组成部分",
    "标准算子"
  ],
  [
    "TFLite 解释执行器",
    "执行步骤",
    "加载模型"
  ],
  [
    "TFLite 解释执行器",
    "执行步骤",
    "转换数据"
  ],
  [
    "TFLite 解释执行器",
    "执行步骤",
    "运行模型推理"
  ],
  [
    "TFLite 解释执行器",
    "执行步骤",
    "解释输出"
  ],
  [
    "TFLite",
    "用途",
    "移动设备"
  ],
  [
    "TFLite API",
    "支持语言",
    "Java"
  ],
  [
    "TFLite API",
    "支持语言",
    "C++"
  ],
  [
    "TFLite API",
    "支持语言",
    "Python"
  ],
  [
    "TFLite API",
    "支持语言",
    "C"
  ],
  [
    "TFLite API",
    "支持语言",
    "Object C"
  ],
  [
    "TFLite API",
    "支持语言",
    "C#"
  ],
  [
    "TFLite API",
    "支持语言",
    "Swift"
  ],
  [
    "TFLite",
    "部署方式",
    "从头自己编译"
  ],
  [
    "TFLite",
    "部署方式",
    "使用已编译好的库"
  ],
  [
    "Android 开发者",
    "使用方式",
    "JCenter Bintray 的 TFLite AAR"
  ],
  [
    "iOS 开发者",
    "使用方式",
    "CocoaPods"
  ],
  [
    "MobileNet V2",
    "用途",
    "将图片分类到1000类"
  ],
  [
    "MobileNet V2",
    "组成部分",
    "瓶颈层"
  ],
  [
    "MobileNet V2",
    "组成部分",
    "最后的神经网络层"
  ],
  [
    "MobileNet V2",
    "特点",
    "默认分类到1000类"
  ],
  [
    "include_top=False",
    "用途",
    "不需要原有模型中最后的神经网络层"
  ],
  [
    "迁移学习",
    "特点",
    "不改变基础模型的各项参数变量"
  ],
  [
    "迁移学习",
    "用途",
    "保留原来大规模训练的优势"
  ],
  [
    "model.trainable = False",
    "用途",
    "基础模型的各项参数变量不会被新的训练修改数据"
  ],
  [
    "瓶颈层",
    "特点",
    "保持了很多通用性"
  ],
  [
    "GlobalAveragePooling2D",
    "用途",
    "将特征转换为每个图像对应一个1280元素向量"
  ],
  [
    "tf.keras.Sequential",
    "组成部分",
    "base_model"
  ],
  [
    "tf.keras.Sequential",
    "组成部分",
    "Conv2D"
  ],
  [
    "tf.keras.Sequential",
    "组成部分",
    "Dropout"
  ],
  [
    "tf.keras.Sequential",
    "组成部分",
    "GlobalAveragePooling2D"
  ],
  [
    "tf.keras.Sequential",
    "组成部分",
    "Dense"
  ],
  [
    "Dense",
    "特点",
    "5个节点的输出层"
  ],
  [
    "Dense",
    "用途",
    "分类到5类"
  ],
  [
    "model.compile",
    "用途",
    "编译模型"
  ],
  [
    "categorical_crossentropy",
    "用途",
    "损失函数"
  ],
  [
    "TensorFlow Lite 解释器",
    "用途",
    "执行模型文件在输入数据上定义的运算符，输出推理结果"
  ],
  [
    "TensorFlow Lite 解释器",
    "特点",
    "适用于多个平台，提供了一个简单的 API"
  ],
  [
    "TensorFlow Lite 解释器",
    "组成部分",
    "GPU 委托"
  ],
  [
    "GPU",
    "优点",
    "比 CPU 执行更快的浮点矩阵运算"
  ],
  [
    "GPU 委托",
    "用途",
    "允许解释器在设备的 GPU 上运行适当的运算符"
  ],
  [
    "TensorFlow Lite",
    "用途",
    "优化模型大小和性能"
  ],
  [
    "量化",
    "用途",
    "降低权重的精确表示，并且可选的降低存储和计算的激活值"
  ],
  [
    "量化",
    "优点",
    "对现有 CPU 平台的支持"
  ],
  [
    "量化",
    "优点",
    "降低存储器访问成本"
  ],
  [
    "量化",
    "优点",
    "对 SIMD 指令功能特别有益"
  ],
  [
    "MobileNet V2",
    "用途",
    "实现识别花卉模型"
  ],
  [
    "MobileNet V2",
    "特点",
    "基于一个流线型的架构，使用深度可分离的卷积"
  ],
  [
    "迁移学习",
    "用途",
    "利用在同一域中的较大数据集上训练的模型所学习的特征"
  ],
  [
    "ImageDataGenerator",
    "用途",
    "生成一个批次一个批次的图片，以生成器的形式给模型训练"
  ],
  [
    "flow_from_directory",
    "用途",
    "逐步加载单个数据集的图像"
  ]
]