[
  [
    "pip3",
    "是",
    "官方集成到Python的工具"
  ],
  [
    "pip",
    "区别",
    "pip3"
  ],
  [
    "pip",
    "用途",
    "Python包管理"
  ],
  [
    "pip3",
    "用途",
    "Python包管理"
  ],
  [
    "TFLite model",
    "组成部分",
    "interpreter"
  ],
  [
    "interpreter",
    "用途",
    "加载和运行TFLite模型"
  ],
  [
    "interpreter",
    "执行步骤",
    "allocate_tensors()"
  ],
  [
    "interpreter",
    "执行步骤",
    "get_input_details()"
  ],
  [
    "interpreter",
    "执行步骤",
    "get_output_details()"
  ],
  [
    "interpreter",
    "执行步骤",
    "set_tensor()"
  ],
  [
    "interpreter",
    "执行步骤",
    "invoke()"
  ],
  [
    "模型推理",
    "结果",
    "分类结果的概率"
  ],
  [
    "get_tensor()",
    "用途",
    "返回张量数据的副本"
  ],
  [
    "get_tensor()",
    "特点",
    "返回的是数据的副本而非引用"
  ],
  [
    "HDMI 接口",
    "是",
    "6"
  ],
  [
    "Display Port 接口",
    "用途",
    "用来连接 DP 屏幕"
  ],
  [
    "直流桶式插座",
    "用途",
    "用于 5V 电源输入"
  ],
  [
    "MIPI CSI-2",
    "是",
    "摄像头接口"
  ],
  [
    "Jetson Nano",
    "用途",
    "运行各种深度学习模型"
  ],
  [
    "Jetson Nano",
    "用途",
    "构建小型移动机器人、人脸签到打卡、口罩识别、智能门锁、智能音箱等复杂 AI 系统"
  ],
  [
    "Jetson Nano",
    "组成部分",
    "microSD 卡"
  ],
  [
    "microSD 卡",
    "用途",
    "用作启动设备和主存储器"
  ],
  [
    "microSD 卡",
    "特点",
    "建议最小采用 64 GB UHS-1 卡"
  ],
  [
    "开发者套件",
    "组成部分",
    "Micro-USB 接口"
  ],
  [
    "开发者套件",
    "条件",
    "需要使用能够在开发者套件的 Micro-USB 接口处提供 5V⎓2A 的高品质电源"
  ],
  [
    "Jetson",
    "缺点",
    "机身只有 Ethernet 有线网络，不包括无线网卡"
  ],
  [
    "AC8265",
    "用途",
    "官方推荐使用的无线网卡"
  ],
  [
    "TensorFlow Lite API",
    "用途",
    "执行模型推理"
  ],
  [
    "TensorFlow Lite API",
    "包含",
    "创建解释器、分配张量"
  ],
  [
    "TensorFlow Lite API",
    "支持",
    "编程语言"
  ],
  [
    "TensorFlow Lite API",
    "支持",
    "常见的移动/嵌入式平台"
  ],
  [
    "TensorFlow Lite API",
    "适用于",
    "Android、iOS 和 Linux"
  ],
  [
    "TensorFlow Lite 推理",
    "特点",
    "在资源限制严重的移动和嵌入式设备上执行"
  ],
  [
    "Android",
    "支持",
    "Java 或 C++ API 执行 TensorFlow Lite 推理"
  ],
  [
    "iOS",
    "支持",
    "Swift 和 Objective-C 编写的原生 iOS 库"
  ],
  [
    "iOS",
    "支持",
    "直接在 Objective-C 代码中使用 C API"
  ],
  [
    "Linux",
    "支持",
    "C++ 和 Python 提供的 TensorFlow Lite API"
  ],
  [
    "运行 TensorFlow Lite 模型",
    "执行步骤",
    "将模型加载到内存中"
  ],
  [
    "运行 TensorFlow Lite 模型",
    "执行步骤",
    "基于现有模型构建 Interpreter"
  ],
  [
    "运行 TensorFlow Lite 模型",
    "执行步骤",
    "设置输入张量值"
  ],
  [
    "运行 TensorFlow Lite 模型",
    "执行步骤",
    "执行推理"
  ],
  [
    "运行 TensorFlow Lite 模型",
    "执行步骤",
    "读取输出张量值"
  ],
  [
    "tensor()",
    "用途",
    "获取张量的指针"
  ],
  [
    "interpreter.get_tensor()",
    "用途",
    "获取张量的数据"
  ],
  [
    "output_details",
    "组成部分",
    "index"
  ],
  [
    "class_names",
    "包含",
    "daisy, dandelion, roses, sunflowers, tulips"
  ],
  [
    "tf.nn.softmax()",
    "用途",
    "计算预测结果的softmax概率"
  ],
  [
    "np.argmax()",
    "用途",
    "获取数组中最大值的索引"
  ],
  [
    "TensorFlow",
    "特点",
    "版本变化后API函数会改变"
  ],
  [
    "make命令",
    "用途",
    "编译Python模块"
  ],
  [
    "Python模块编译失败",
    "原因",
    "未安装相应的依赖包"
  ],
  [
    "make install命令",
    "结果",
    "将Python相关程序模块拷贝到/opt/python目录"
  ],
  [
    "/opt/python",
    "用途",
    "存放Python相关程序模块"
  ],
  [
    "NVIDIA Jetson Nano 开发板",
    "用途",
    "边缘计算设备"
  ],
  [
    "NVIDIA Jetson Nano 开发板",
    "用途",
    "图像分类、物体检测、分割和语音处理等应用程序中并行运行多个神经网络"
  ],
  [
    "NVIDIA Jetson Nano 开发板",
    "特点",
    "运行功率仅为 5 瓦"
  ],
  [
    "NVIDIA Jetson Nano 开发板",
    "特点",
    "边做边学的理想工具"
  ],
  [
    "NVIDIA Jetson Nano 开发板",
    "组成部分",
    "Linux 开发环境"
  ],
  [
    "NVIDIA Jetson Nano 开发板",
    "组成部分",
    "大量易于学习的教程"
  ],
  [
    "NVIDIA Jetson Nano 开发板",
    "组成部分",
    "开源项目"
  ],
  [
    "NVIDIA Jetson Nano 开发板",
    "相似",
    "Raspberry Pi 4"
  ],
  [
    "NVIDIA Jetson Nano 开发板",
    "相似",
    "Intel Neural Compute Stick 2"
  ],
  [
    "NVIDIA Jetson Nano 开发板",
    "相似",
    "Google Edge TPU Coral Dev Board"
  ],
  [
    "NVIDIA Jetson Nano 开发板",
    "组成部分",
    "64位四核的 ARM Cortex-A57 CPU"
  ],
  [
    "NVIDIA Jetson Nano 开发板",
    "组成部分",
    "4GB 的内存"
  ],
  [
    "NVIDIA Jetson Nano 开发板",
    "特点",
    "核心板可拆的设计"
  ],
  [
    "NVIDIA Jetson Nano 开发板",
    "特点",
    "核心板的大小只有70 x 45 mm"
  ],
  [
    "NVIDIA Jetson Nano 开发板",
    "组成部分",
    "128核 NVIDIA Maxwell 架构的 GPU"
  ],
  [
    "NVIDIA Jetson Nano 开发板",
    "特点",
    "功耗非常低"
  ],
  [
    "NVIDIA Jetson Nano 开发板",
    "特点",
    "有两种模式：5W（低功耗模式；可以使用 USB 口供电）和 10W（必须使用 Power Jack 外接5V 电源供电）"
  ],
  [
    "NVIDIA Jetson Nano 开发板",
    "组成部分",
    "microSD 卡插槽"
  ],
  [
    "NVIDIA Jetson Nano 开发板",
    "组成部分",
    "40 针 GPIO 扩展接口"
  ],
  [
    "NVIDIA Jetson Nano 开发板",
    "组成部分",
    "Micro USB 接口"
  ],
  [
    "NVIDIA Jetson Nano 开发板",
    "组成部分",
    "千兆以太网端口"
  ],
  [
    "NVIDIA Jetson Nano 开发板",
    "组成部分",
    "USB"
  ],
  [
    "/usr/bin/python",
    "是",
    "软链接"
  ],
  [
    "/usr/bin/python",
    "指向",
    "python"
  ],
  [
    "Jetson",
    "包含",
    "CSI 相机接口"
  ],
  [
    "CSI 相机接口",
    "特点",
    "B02版本有两路"
  ],
  [
    "CSI 相机接口",
    "用途",
    "可以使用树莓派摄像头，IMX219模组800万像素"
  ],
  [
    "microSD 卡",
    "用途",
    "写入镜像"
  ],
  [
    "SD Memory Card Formatter",
    "用途",
    "格式化 microSD 卡"
  ],
  [
    "Etcher",
    "用途",
    "将镜像写入 microSD 卡"
  ],
  [
    "Jetson Nano",
    "组成部分",
    "microSD 卡插槽"
  ],
  [
    "Jetson Nano",
    "用途",
    "开发板"
  ],
  [
    "Jetson Nano",
    "交互方式",
    "连接显示器、键盘和鼠标或通过 SSH 或 VNC 服务远程访问"
  ],
  [
    "NVIDIA Jetson 开发者专区",
    "用途",
    "获取更多的 Jetson 平台信息"
  ],
  [
    "NVIDIA Jetson 论坛",
    "用途",
    "提问或分享项目"
  ],
  [
    "Jetson 项目社区",
    "用途",
    "获取一些非常有意思的项目"
  ],
  [
    "Hello AI World",
    "用途",
    "快速的启动并运行一组深度学习推理演示"
  ],
  [
    "Hello AI World",
    "特点",
    "使用计算机视觉相关的模型，包括实时摄像机的使用"
  ],
  [
    "JetPack SDK",
    "用途",
    "与 NVIDIA TensorRT 一起使用预训练模型进行实时图像分类和对象检测"
  ],
  [
    "JetBot",
    "用途",
    "面向有兴趣学习 AI 和构建有趣应用程序的创客、学生和爱好者"
  ],
  [
    "JetBot",
    "特点",
    "易于设置和使用，并且与许多流行的配件兼容"
  ],
  [
    "VNC",
    "用途",
    "实现 headless 远程桌面访问 Jetson Nano"
  ],
  [
    "VNC",
    "特点",
    "可以从同一网络上的另一台计算机控制 Jetson Nano 开发板"
  ],
  [
    "vino",
    "用途",
    "VNC 服务"
  ],
  [
    "VNC Viewer",
    "用途",
    "进行 VNC 连接"
  ],
  [
    "Jetson Nano 开发板",
    "特点",
    "不支持 CUDA"
  ],
  [
    "OpenCV",
    "安装步骤",
    "安装依赖项"
  ],
  [
    "OpenCV",
    "安装步骤",
    "下载 OpenCV"
  ],
  [
    "OpenCV",
    "安装步骤",
    "编译 OpenCV"
  ],
  [
    "OpenCV",
    "安装步骤",
    "安装 OpenCV"
  ],
  [
    "OpenCV 编译",
    "条件",
    "设置 OpenCV 的内容、位置和方式"
  ],
  [
    "OpenCV 编译",
    "示例",
    "-D WITH_QT=OFF 禁用了 Qt5 支持"
  ],
  [
    "OpenCV 编译",
    "结果",
    "需要大约两个半小时"
  ],
  [
    "VNC Viewer",
    "用途",
    "登录 Jetson Nano"
  ],
  [
    "TensorFlow",
    "是什么",
    "一个使用数据流图进行数值计算的开源软件库"
  ],
  [
    "TensorFlow",
    "特点",
    "灵活的架构可以将模型部署到桌面、服务器或移动设备中的 CPU 或 GPU 上"
  ],
  [
    "TensorFlow GPU 版本",
    "条件",
    "需要成功配置好 CUDA"
  ],
  [
    "TensorFlow GPU 版本",
    "条件",
    "需要安装依赖项"
  ],
  [
    "TensorFlow 安装",
    "步骤",
    "安装所需的系统包"
  ],
  [
    "TensorFlow 安装",
    "步骤",
    "安装和升级 pip3"
  ],
  [
    "TensorFlow 安装",
    "步骤",
    "安装 Python 包依赖项"
  ],
  [
    "TensorFlow 安装",
    "步骤",
    "确认 CUDA 已经被正常安装"
  ],
  [
    "TensorFlow 安装",
    "步骤",
    "安装 TensorFlow"
  ],
  [
    "TensorFlow 版本",
    "条件",
    "必须与正在使用的 JetPack 版本一致"
  ],
  [
    "Jetson Nano",
    "包含",
    "OpenCV"
  ],
  [
    "Jetson Nano 开发板",
    "特点",
    "默认安装 JetPack 安装了对应的 OpenCV"
  ],
  [
    "OpenCV",
    "特点",
    "不支持 CUDA 且版本是固定搭配的"
  ],
  [
    "jtop 命令",
    "用途",
    "查看开发板系统信息"
  ],
  [
    "Python 2.7",
    "特点",
    "官方已经停止维护"
  ],
  [
    "树莓派",
    "用途",
    "安装Python"
  ],
  [
    "树莓派系统",
    "组成部分",
    "软件源的配置文件/etc/apt/sources.list"
  ],
  [
    "树莓派系统升级",
    "执行步骤",
    "更新系统需要 root 权限"
  ],
  [
    "树莓派系统升级",
    "执行步骤",
    "使用 nano 或者 vi 编辑工具修改软件源的配置文件/etc/apt/sources.list"
  ],
  [
    "树莓派系统升级",
    "执行步骤",
    "安装依赖"
  ],
  [
    "树莓派系统升级",
    "执行步骤",
    "安装 python"
  ],
  [
    "树莓派系统升级",
    "用途",
    "升级 Python 版本"
  ],
  [
    "树莓派系统升级",
    "特点",
    "可以更换国内源如阿里、清华等"
  ],
  [
    "清华源",
    "示例",
    "清华 Raspbian 软件仓库镜像"
  ],
  [
    "Jetson Nano",
    "包含",
    "移动行业处理器接口（MIPI）的相机串行接口（CSI）端口"
  ],
  [
    "MIPI",
    "是",
    "MIPI 联盟发起的为移动应用处理器制定的开放标准"
  ],
  [
    "CSI端口",
    "支持",
    "Raspberry Pi、Arducam 等常见的相机模块"
  ],
  [
    "Raspberry Camera V2",
    "特点",
    "800万像素、感光芯片为索尼 IMX219，静态图片分辨率为3280 × 2464、支持1080p30, 720p60以及640 × 480p90视频录像"
  ],
  [
    "Jetson Nano",
    "用途",
    "机器学习和计算机视觉应用，如物体检测、人脸识别、图像分割等视觉任务"
  ],
  [
    "JetPack SDK",
    "特点",
    "支持预装驱动程序的 RPi 相机，并且可以很容易地用作即插即用外围设备，不需要安装驱动程序"
  ],
  [
    "CSI 摄像头",
    "条件",
    "必须在开机前先装上去，系统才能识别"
  ],
  [
    "/dev",
    "是",
    "Linux 中所有设备文件或特殊文件的存储位置"
  ],
  [
    "GStreamer",
    "是",
    "一个多媒体框架，用于后端处理任务，如格式修改、显示驱动程序协调和数据处理"
  ],
  [
    "Haar 特征的 cascade 分类器",
    "是",
    "一种有效的物品检测方法"
  ],
  [
    "Haar 特征分类器",
    "组成部分",
    "XML 文件，该文件中会描述人体各个部位的 Haar 特征值"
  ],
  [
    "OpenCV",
    "包含",
    "已经训练好的分类器，其中包括面部，眼睛，微笑等"
  ],
  [
    "face_cascade.detectMultiScale",
    "用途",
    "在图像中检测面部"
  ],
  [
    "Python",
    "特点",
    "功能强大的编程语言，易于使用，易于阅读和编写"
  ],
  [
    "Python",
    "用途",
    "与树莓派结合可以将项目与现实世界轻松的联系起来"
  ],
  [
    "树莓派",
    "包含",
    "Python开发环境"
  ],
  [
    "树莓派",
    "用途",
    "测试Python开发环境并查看当前的Python版本"
  ],
  [
    "Python 源码包",
    "下载来源",
    "Python 官网"
  ],
  [
    "Python 源码包",
    "处理步骤",
    "下载解压"
  ],
  [
    "minNeighbors",
    "定义",
    "构成检测目标的相邻矩形的最小个数"
  ],
  [
    "Haar特征的cascade分类器",
    "用途",
    "检测人脸"
  ],
  [
    "OpenCV",
    "用途",
    "调用CSI摄像头和USB摄像头"
  ],
  [
    "CSI摄像头",
    "特点",
    "需要使用GStreamer读取视频流"
  ],
  [
    "USB摄像头",
    "特点",
    "可以直接使用cv2.videocapture打开"
  ],
  [
    "GStreamer",
    "执行步骤",
    "创建管道，绑定视频流，逐帧提取和显示"
  ],
  [
    "GStreamer管道参数",
    "组成部分",
    "预捕获图像宽度、高度，窗口显示宽度、高度，捕获帧率，旋转图像设置"
  ],
  [
    "人脸检测",
    "执行步骤",
    "将彩色图像转换为灰度图像，检测人脸，绘制边界矩形"
  ],
  [
    "Face Recognition",
    "定义",
    "一个强大、简单、易上手的人脸识别开源项目"
  ],
  [
    "Face Recognition",
    "组成部分",
    "人脸检测、检测面部特征点、给脸部编码、从编码中找出人的名字"
  ],
  [
    "face_landmarks",
    "用途",
    "检测面部特征点"
  ],
  [
    "face_encodings",
    "用途",
    "给脸部编码"
  ],
  [
    "load_image_file",
    "用途",
    "加载面孔照片"
  ],
  [
    "face_locations",
    "用途",
    "定位图像中的人脸位置"
  ],
  [
    "number_of_times_to_upsample",
    "定义",
    "对图像进行多少次上采样以查找人脸"
  ],
  [
    "model",
    "区别",
    "hog模型在CPU上运行更快但不太准确，cnn模型更准确但需要GPU加速"
  ],
  [
    "face_encodings",
    "特点",
    "返回图像中每张人脸的128维人脸编码"
  ],
  [
    "compare_faces",
    "用途",
    "将人脸编码列表与候选编码进行比较"
  ],
  [
    "face_distance",
    "用途",
    "计算已知人脸和未知人脸特征向量的距离"
  ],
  [
    "TFLite",
    "是",
    "TensorFlow Lite的简称"
  ],
  [
    "TFLite模型转换器",
    "用途",
    "将TensorFlow模型转换为TFLite文件格式(FlatBuffers格式)"
  ],
  [
    "TFLite解释器",
    "用途",
    "在设备端运行TFLite模型"
  ],
  [
    "TFLite解释器",
    "特点",
    "可以调用不同的硬件加速器比如GPU进行执行"
  ],
  [
    "TensorFlow Lite的工作流程",
    "包含",
    "选择模型、转换模型、部署到设备、优化模型"
  ],
  [
    "花卉识别模型",
    "组成部分",
    "卷积层与全连接层"
  ],
  [
    "卷积层",
    "组成部分",
    "3个Conv2D和2个MaxPooling2D层"
  ],
  [
    "卷积层",
    "用途",
    "识别图像里的空间模式，例如线条和物体局部"
  ],
  [
    "最大池化层",
    "用途",
    "降低卷积层对位置的敏感"
  ],
  [
    "卷积层",
    "特点",
    "使用3×3的卷积核，并在输出上使用Relu激活函数"
  ],
  [
    "第一个卷积层",
    "特点",
    "输出通道数为32"
  ],
  [
    "第二、三卷积层",
    "特点",
    "输出通道数为64"
  ],
  [
    "卷积层输入",
    "特点",
    "张量形状是(image_height, image_width, color_channels)"
  ],
  [
    "花卉数据集中的图片",
    "特点",
    "形状是(224,224,3)"
  ],
  [
    "ImageDataGenerator",
    "用途",
    "生成一个批次的图片，以生成器的形式给模型训练"
  ],
  [
    "flow_from_directory",
    "用途",
    "逐步加载单个数据集的图像"
  ],
  [
    "target_size参数",
    "用途",
    "将所有图像加载到一个模型需要的特定的大小"
  ],
  [
    "batch_size",
    "用途",
    "训练时从数据集中的不同类中随机选出的图像数量"
  ],
  [
    "Conv2D",
    "特点",
    "输出的通道数量取决于声明层时的filters参数"
  ],
  [
    "MaxPooling2D",
    "特点",
    "输出宽度和高度会收缩"
  ],
  [
    "Dense",
    "是什么",
    "全连接(Full Connected)层"
  ],
  [
    "layers.Flatten()",
    "用途",
    "将三维张量展开到1维以便传入Dense层"
  ],
  [
    "tf.keras.losses.SparseCategoricalCrossentropy",
    "用途",
    "作为损失函数用于模型训练"
  ],
  [
    "tf.keras.optimizers.Adam",
    "用途",
    "作为优化器用于模型训练"
  ],
  [
    "TensorBoard",
    "用途",
    "记录训练过程中的指标和计算直方图"
  ],
  [
    "tf.saved_model.save",
    "用途",
    "保存完整的TensorFlow程序包括权重和计算"
  ],
  [
    "tf.lite.TFLiteConverter",
    "用途",
    "将SavedModel转换为TensorFlow Lite兼容格式"
  ],
  [
    "TensorFlow Lite解释器",
    "执行步骤",
    "加载模型、分配张量、设置输入张量、执行推理、读取输出张量"
  ],
  [
    "Jetson Nano开发板",
    "缺点",
    "资源有限可能导致内存溢出"
  ],
  [
    "batch_size",
    "条件",
    "设置受限于GPU内存大小"
  ],
  [
    "2.3.0",
    "特点",
    "版本变化后 API 函数会改变"
  ],
  [
    "API 函数",
    "条件",
    "请注意版本"
  ],
  [
    "树莓派通用输入/输出接口（GPIO）",
    "是什么",
    "一组数字引脚，可用于将树莓派连接到其他电子设备"
  ],
  [
    "树莓派通用输入/输出接口（GPIO）",
    "用途",
    "读取传感器数据，控制 LED 等外部设备"
  ],
  [
    "树莓派通用输入/输出接口（GPIO）",
    "特点",
    "可以配置为输入或输出"
  ],
  [
    "树莓派通用输入/输出接口（GPIO）",
    "组成部分",
    "40个 GPIO 引脚"
  ],
  [
    "树莓派通用输入/输出接口（GPIO）",
    "组成部分",
    "26个引脚可以用作数字输入或输出"
  ],
  [
    "树莓派通用输入/输出接口（GPIO）",
    "组成部分",
    "14个引脚用于其他功能"
  ],
  [
    "树莓派通用输入/输出接口（GPIO）",
    "特点",
    "可以通过软件编程进行控制"
  ],
  [
    "树莓派通用输入/输出接口（GPIO）",
    "特点",
    "提供了各种库和工具，使编程更加方便"
  ],
  [
    "树莓派通用输入/输出接口（GPIO）",
    "特点",
    "错误的连接和编程可能会导致设备损坏或故障"
  ],
  [
    "树莓派通用输入/输出接口（GPIO）",
    "特点",
    "位于其引脚排针上，可以通过跳线线连接到其他电路板或设备"
  ],
  [
    "树莓派",
    "用途",
    "控制外部硬件设备"
  ],
  [
    "树莓派",
    "组成部分",
    "GPIO引脚"
  ],
  [
    "LED灯",
    "用途",
    "通过GPIO控制点亮"
  ],
  [
    "点亮LED灯",
    "组成部分",
    "面包板、杜邦线公对母、LED灯、330欧姆电阻"
  ],
  [
    "LED灯",
    "连接方式",
    "通过限流电阻串联到GPIO21"
  ],
  [
    "LED灯",
    "连接方式",
    "负极连接到GND"
  ],
  [
    "GPIO引脚",
    "特点",
    "输出电压约为3.3V"
  ],
  [
    "Jupyter Notebook",
    "特点",
    "功能强大，交互式、富文本，还有丰富的插件、主题修改、多语言支持"
  ],
  [
    "JupyterLab",
    "是什么",
    "Jupyter Notebook 的全面升级"
  ],
  [
    "JupyterLab",
    "组成部分",
    "Jupyter Notebook、文本编辑器、终端以及各种个性化组件"
  ],
  [
    "JupyterLab",
    "用途",
    "全能 IDE"
  ],
  [
    "Jupyter lab",
    "安装方式",
    "通过 pip 安装"
  ],
  [
    "Jupyter lab",
    "安装条件",
    "网络环境较差时可以考虑更换源"
  ],
  [
    "val_ds",
    "用途",
    "存储图像和标签数据"
  ],
  [
    "normalization_layer",
    "用途",
    "对图像数据进行归一化处理"
  ],
  [
    "lambda x, y: (normalization_layer(x), y)",
    "组成部分",
    "x—images, y—labels"
  ],
  [
    "val_ds.map",
    "执行步骤",
    "对val_ds中的每个元素应用lambda函数进行归一化处理"
  ],
  [
    "LED",
    "缺点",
    "直接串联3.3V电源会产生过大电流可能损坏LED"
  ],
  [
    "电阻",
    "用途",
    "串联在LED和电源之间限制电流保护LED和GPIO引脚"
  ],
  [
    "GPIO引脚",
    "用途",
    "为LED提供电源"
  ],
  [
    "Linux",
    "特点",
    "一切皆文件，对文件的读写操作相当于外设输入输出"
  ],
  [
    "GPIO端口文件",
    "属于",
    "/sys/class/gpio目录"
  ],
  [
    "GPIO21",
    "执行步骤",
    "激活→设置为输出状态→写入1使PIN处于高电压点亮LED"
  ],
  [
    "Python GPIO引脚",
    "特点",
    "有两种模式：BCM编号模式和物理引脚Broad编号模式"
  ],
  [
    "GPIO.setmod()",
    "用途",
    "指定引脚编号系统"
  ],
  [
    "GPIO.setup()",
    "用途",
    "设置系统引脚作为输入或输出"
  ],
  [
    "树莓派",
    "用途",
    "教育"
  ],
  [
    "树莓派",
    "特点",
    "廉价且周边设备多"
  ],
  [
    "树莓派",
    "组成部分",
    "GPIO引脚"
  ],
  [
    "树莓派",
    "是",
    "嵌入式开发平台"
  ],
  [
    "树莓派",
    "编程语言",
    "Python"
  ],
  [
    "树莓派",
    "操作系统",
    "Linux"
  ],
  [
    "GPIO",
    "用途",
    "连接其他电子设备"
  ],
  [
    "GPIO",
    "组成部分",
    "数字引脚"
  ],
  [
    "GPIO",
    "特点",
    "可配置为输入或输出"
  ],
  [
    "Python",
    "用途",
    "树莓派编程"
  ],
  [
    "Python",
    "特点",
    "功能强大且易于使用"
  ],
  [
    "Jupyter Lab",
    "是",
    "全能IDE"
  ],
  [
    "Jupyter Lab",
    "组成部分",
    "Jupyter Notebook、文本编辑器、终端"
  ],
  [
    "Jupyter Lab",
    "特点",
    "交互式、富文本、多语言支持"
  ],
  [
    "NVIDIA Jetson Nano",
    "用途",
    "边缘计算"
  ],
  [
    "NVIDIA Jetson Nano",
    "组成部分",
    "ARM Cortex-A57 CPU、NVIDIA Maxwell GPU"
  ],
  [
    "NVIDIA Jetson Nano",
    "特点",
    "低功耗、支持多种深度学习框架"
  ],
  [
    "TensorFlow Lite",
    "用途",
    "在移动设备和嵌入式设备上运行TensorFlow模型"
  ],
  [
    "TensorFlow Lite",
    "组成部分",
    "解释器、转换器、算子库、硬件加速代理"
  ],
  [
    "TensorFlow Lite",
    "特点",
    "延迟低、二进制文件小"
  ],
  [
    "OpenCV",
    "用途",
    "计算机视觉应用"
  ],
  [
    "OpenCV",
    "特点",
    "支持多种视觉任务"
  ],
  [
    "人脸识别",
    "用途",
    "身份验证"
  ],
  [
    "人脸识别",
    "步骤",
    "人脸检测、检测面部特征点、给脸部编码、从编码中找出人的名字"
  ],
  [
    "花卉识别",
    "用途",
    "图像识别"
  ],
  [
    "花卉识别",
    "步骤",
    "选择模型、转换模型、部署到设备、优化模型"
  ],
  [
    "GPIO库",
    "用途",
    "控制GPIO引脚"
  ],
  [
    "BCM编号方式",
    "是",
    "GPIO引脚编号模式的一种"
  ],
  [
    "GPIO21",
    "用途",
    "LED的控制引脚"
  ],
  [
    "GPIO.setup()方法",
    "用途",
    "设置GPIO引脚的工作模式"
  ],
  [
    "GPIO21",
    "组成部分",
    "输出模式"
  ],
  [
    "HIGH电平",
    "用途",
    "点亮LED灯"
  ],
  [
    "time.sleep()方法",
    "用途",
    "延迟一秒钟"
  ],
  [
    "LOW电平",
    "用途",
    "关闭LED灯"
  ],
  [
    "GPIO.cleanup()方法",
    "用途",
    "清理GPIO引脚的设置"
  ],
  [
    "四引脚按键",
    "用途",
    "控制LED灯的亮暗"
  ],
  [
    "四脚按键开关",
    "组成部分",
    "常开触点和常闭触点"
  ],
  [
    "常开触点",
    "用途",
    "当压力施压时电路接通"
  ],
  [
    "常闭触点",
    "用途",
    "当压力撤销时电路恢复原始状态"
  ],
  [
    "上拉电阻",
    "用途",
    "在18号引脚处设置上拉电阻"
  ],
  [
    "GPIO.setup(18, GPIO.IN, pull_up_down=GPIO.PUD_UP)",
    "用途",
    "设置18号引脚为输入模式并启用上拉电阻"
  ],
  [
    "开关去抖",
    "用途",
    "忽略由于开关抖动引起的小于"
  ],
  [
    "pip install",
    "用途",
    "安装Package"
  ],
  [
    "pip install",
    "特点",
    "可以添加--no-cache-dir参数"
  ],
  [
    "jupyter",
    "用途",
    "生成配置文件"
  ],
  [
    "jupyter_notebook_config.py",
    "组成部分",
    "运行服务监听的IP地址、端口、notebooks内核的目录、是否打开浏览器"
  ],
  [
    "Jupyter lab",
    "用途",
    "设置访问密码"
  ],
  [
    "Jupyter lab",
    "特点",
    "访问密码可以为空"
  ],
  [
    "树莓派",
    "用途",
    "启动Jupyter lab"
  ],
  [
    "Conv2D",
    "特点",
    "输出是一个三维的张量，其形状描述了 (height, width, channels)"
  ],
  [
    "Conv2D",
    "特点",
    "输出的通道数量取决于声明层时的 filters 参数"
  ],
  [
    "MaxPooling2D",
    "特点",
    "输出是一个三维的张量，其形状描述了 (height, width, channels)"
  ],
  [
    "Dense",
    "是什么",
    "全连接 (Full Connected) 层"
  ],
  [
    "Dense",
    "用途",
    "完成分类"
  ],
  [
    "layers.Flatten()",
    "用途",
    "将三维张量展开到1维"
  ],
  [
    "Dense",
    "组成部分",
    "128个神经元和relu激活函数"
  ],
  [
    "Dense",
    "组成部分",
    "num_classes个输出"
  ],
  [
    "模型",
    "组成部分",
    "Conv2D, MaxPooling2D, Flatten, Dense"
  ],
  [
    "模型",
    "执行步骤",
    "编译模型，损失函数使用类别交叉熵"
  ],
  [
    "RandomFlip",
    "用途",
    "对训练图像随机变换的方法来人为引入样本多样性"
  ],
  [
    "RandomRotation",
    "用途",
    "对训练图像随机变换的方法来人为引入样本多样性"
  ],
  [
    "Adam",
    "用途",
    "作为优化器"
  ],
  [
    "SparseCategoricalCrossentropy",
    "用途",
    "作为损失函数"
  ],
  [
    "TensorBoard",
    "用途",
    "记录训练日志"
  ],
  [
    "model.fit",
    "执行步骤",
    "训练模型并记录训练和验证准确性/损失"
  ],
  [
    "tf.saved_model.save",
    "用途",
    "保存完整的TensorFlow程序，包括权重值和计算"
  ],
  [
    "SavedModel",
    "特点",
    "不需要原始模型构建代码就可以运行"
  ],
  [
    "tf.lite.TFLiteConverter.from_saved_model",
    "用途",
    "将SavedModel转换为TFLite兼容格式"
  ],
  [
    "Jetson Nano",
    "用途",
    "部署TensorFlow Lite模型"
  ],
  [
    "model.tflite",
    "组成部分",
    "训练好的模型文件和标签文件"
  ],
  [
    "class_names",
    "示例",
    "郁金香(tulips)、玫瑰(roses)、浦公英(dandelion)、向日葵(sunflowers)、雏菊(daisy)"
  ],
  [
    "Jetson Nano",
    "缺点",
    "资源有限，可能导致内存溢出"
  ],
  [
    "batch_size",
    "条件",
    "受限于GPU内存的大小"
  ],
  [
    "TensorFlow Lite",
    "用途",
    "简化图像预处理和模型输出处理"
  ],
  [
    "TensorFlow Lite解释器",
    "用途",
    "识别输入图像"
  ],
  [
    "数据转换",
    "步骤",
    "将输入数据转换成模型接收的形式或排布"
  ],
  [
    "边缘操作",
    "特点",
    "0.2s的响应时间"
  ],
  [
    "print(\"button pressed!\")",
    "用途",
    "观测开关去抖效果"
  ],
  [
    "开关抖动",
    "特点",
    "会导致多次输出"
  ],
  [
    "RPI.GPIO库",
    "包含",
    "wait_for_edge()函数和add_event_detect()函数"
  ],
  [
    "边缘",
    "定义",
    "电信号从低电平到高电平或从高电平到低电平状态的改变"
  ],
  [
    "wait_for_edge()函数",
    "特点",
    "是阻塞函数，会阻塞程序执行直到检测到一个边沿"
  ],
  [
    "add_event_detect()函数",
    "用途",
    "增加一个事件的检测函数"
  ]
]