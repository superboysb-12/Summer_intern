[
  [
    "Python 源码包",
    "下载来源",
    "Python 官网"
  ],
  [
    "Python 源码包",
    "处理步骤",
    "下载解压"
  ],
  [
    "Jupyter Notebook",
    "特点",
    "功能强大，交互式、富文本，还有丰富的插件、主题修改、多语言支持"
  ],
  [
    "JupyterLab",
    "是什么",
    "Jupyter Notebook 的全面升级"
  ],
  [
    "JupyterLab",
    "组成部分",
    "Jupyter Notebook、文本编辑器、终端以及各种个性化组件"
  ],
  [
    "JupyterLab",
    "用途",
    "全能 IDE"
  ],
  [
    "Jupyter lab",
    "安装方式",
    "通过 pip 安装"
  ],
  [
    "Jupyter lab",
    "安装条件",
    "网络环境较差时可以考虑更换源"
  ],
  [
    "边缘操作",
    "特点",
    "0.2s的响应时间"
  ],
  [
    "print(\"button pressed!\")",
    "用途",
    "观测开关去抖效果"
  ],
  [
    "开关抖动",
    "特点",
    "忽略时理论上每按下一次开关会输出一次"
  ],
  [
    "RPI.GPIO库",
    "包含",
    "wait_for_edge()函数和add_event_detect()函数"
  ],
  [
    "边缘",
    "定义",
    "电信号从低电平到高电平，或从高电平到低电平状态的改变"
  ],
  [
    "wait_for_edge()函数",
    "特点",
    "阻塞函数，会阻塞程序执行直到检测到一个边沿"
  ],
  [
    "add_event_detect()函数",
    "用途",
    "增加一个事件的检测函数"
  ],
  [
    "TensorFlow Lite API",
    "用途",
    "执行模型推理"
  ],
  [
    "TensorFlow Lite API",
    "支持",
    "多种编程语言"
  ],
  [
    "TensorFlow Lite API",
    "支持",
    "常见的移动/嵌入式平台"
  ],
  [
    "TensorFlow Lite API",
    "特点",
    "在资源有限的硬件上运行"
  ],
  [
    "TensorFlow Lite 推理",
    "执行步骤",
    "将模型加载到内存中"
  ],
  [
    "TensorFlow Lite 推理",
    "执行步骤",
    "基于现有模型构建 Interpreter"
  ],
  [
    "TensorFlow Lite 推理",
    "执行步骤",
    "设置输入张量值"
  ],
  [
    "TensorFlow Lite 推理",
    "执行步骤",
    "执行推理"
  ],
  [
    "TensorFlow Lite 推理",
    "执行步骤",
    "读取输出张量值"
  ],
  [
    "Android",
    "支持",
    "Java 或 C++ API 执行 TensorFlow Lite 推理"
  ],
  [
    "iOS",
    "支持",
    "Swift 和 Objective-C 编写的原生 iOS 库"
  ],
  [
    "iOS",
    "支持",
    "直接在 Objective-C 代码中使用 C API"
  ],
  [
    "Linux",
    "支持",
    "C++ 和 Python 提供的 TensorFlow Lite API"
  ],
  [
    "Raspberry Pi",
    "属于",
    "Linux 平台"
  ],
  [
    "model.fit",
    "用途",
    "训练模型并记录训练和验证准确性/损失"
  ],
  [
    "tf.saved_model.save",
    "用途",
    "保存完整的TensorFlow程序，包括权重值和计算"
  ],
  [
    "SavedModel",
    "特点",
    "不需要原始模型构建代码就可以运行"
  ],
  [
    "tf.lite.TFLiteConverter.from_saved_model",
    "用途",
    "将SavedModel转换为TFLite兼容格式"
  ],
  [
    "Jetson Nano",
    "用途",
    "部署TensorFlow Lite模型"
  ],
  [
    "model.tflite",
    "用途",
    "在Jetson Nano开发板上进行花卉图片识别"
  ],
  [
    "class_names",
    "包含",
    "郁金香(tulips)、玫瑰(roses)、浦公英(dandelion)、向日葵(sunflowers)、雏菊(daisy)"
  ],
  [
    "batch_size",
    "缺点",
    "设置过大会导致Jetson Nano开发板内存溢出"
  ],
  [
    "TensorFlow Lite",
    "用途",
    "简化图像预处理和模型输出处理"
  ],
  [
    "tf.image.resize",
    "用途",
    "将原始图像调整到模型输入大小"
  ],
  [
    "tf.cast",
    "用途",
    "转换图像数据类型为tf.float32"
  ],
  [
    "tf.expand_dims",
    "用途",
    "为图像张量添加批次维度"
  ],
  [
    "TFLite model",
    "组成部分",
    "interpreter"
  ],
  [
    "interpreter",
    "用途",
    "加载和运行TFLite模型"
  ],
  [
    "interpreter",
    "执行步骤",
    "allocate_tensors()"
  ],
  [
    "interpreter",
    "执行步骤",
    "get_input_details()"
  ],
  [
    "interpreter",
    "执行步骤",
    "get_output_details()"
  ],
  [
    "interpreter",
    "执行步骤",
    "set_tensor()"
  ],
  [
    "interpreter",
    "执行步骤",
    "invoke()"
  ],
  [
    "model inference",
    "用途",
    "获取分类结果的概率"
  ],
  [
    "get_tensor()",
    "用途",
    "返回张量数据的副本"
  ],
  [
    "get_tensor()",
    "特点",
    "返回的是数据的副本而非引用"
  ],
  [
    "LED",
    "特点",
    "直接串联3.3V电源会产生大电流"
  ],
  [
    "LED",
    "缺点",
    "大电流可能损坏LED和供电设备"
  ],
  [
    "电阻",
    "用途",
    "串联在LED和电源之间限制电流"
  ],
  [
    "电阻",
    "用途",
    "保护LED和GPIO引脚"
  ],
  [
    "树莓派GPIO",
    "组成部分",
    "/sys/class/gpio目录下的端口文件"
  ],
  [
    "Linux",
    "特点",
    "将外设操作视为文件读写"
  ],
  [
    "GPIO21",
    "执行步骤",
    "激活、设置为输出状态、写入1使其输出高电压"
  ],
  [
    "Python GPIO编程",
    "组成部分",
    "BCM编号模式和物理引脚Broad编号模式"
  ],
  [
    "GPIO.setmod()",
    "用途",
    "指定引脚编号系统"
  ],
  [
    "GPIO.setup()",
    "用途",
    "设置引脚为输入或输出模式"
  ],
  [
    "NVIDIA Jetson Nano 开发板",
    "用途",
    "在图像分类、物体检测、分割和语音处理等应用程序中并行运行多个神经网络"
  ],
  [
    "NVIDIA Jetson Nano 开发板",
    "特点",
    "运行功率仅为 5 瓦"
  ],
  [
    "NVIDIA Jetson Nano 开发板",
    "特点",
    "边做边学的理想工具"
  ],
  [
    "NVIDIA Jetson Nano 开发板",
    "组成部分",
    "Linux 开发环境"
  ],
  [
    "NVIDIA Jetson Nano 开发板",
    "组成部分",
    "64位四核的 ARM Cortex-A57 CPU"
  ],
  [
    "NVIDIA Jetson Nano 开发板",
    "组成部分",
    "128核 NVIDIA Maxwell 架构的 GPU"
  ],
  [
    "NVIDIA Jetson Nano 开发板",
    "组成部分",
    "4GB 的内存"
  ],
  [
    "NVIDIA Jetson Nano 开发板",
    "特点",
    "核心板可拆的设计，核心板的大小只有70 x 45 mm"
  ],
  [
    "NVIDIA Jetson Nano 开发板",
    "特点",
    "功耗非常低，有两种模式：5W（低功耗模式；可以使用 USB 口供电）和10W（必须使用 Power Jack 外接5V 电源供电）"
  ],
  [
    "NVIDIA Jetson Nano 开发板",
    "组成部分",
    "microSD 卡插槽"
  ],
  [
    "NVIDIA Jetson Nano 开发板",
    "组成部分",
    "40 针 GPIO 扩展接口"
  ],
  [
    "NVIDIA Jetson Nano 开发板",
    "组成部分",
    "Micro USB 接口"
  ],
  [
    "NVIDIA Jetson Nano 开发板",
    "组成部分",
    "千兆以太网端口"
  ],
  [
    "NVIDIA Jetson Nano 开发板",
    "组成部分",
    "USB"
  ],
  [
    "NVIDIA Jetson Nano 开发板",
    "缺点",
    "计算能力不高，勉强可以使用一些小规模、并且优化过的网络进行推理，训练的话还是不够用"
  ],
  [
    "NVIDIA Jetson Nano 开发板",
    "相似",
    "Raspberry Pi 4"
  ],
  [
    "NVIDIA Jetson Nano 开发板",
    "相似",
    "Intel Neural Compute Stick 2"
  ],
  [
    "NVIDIA Jetson Nano 开发板",
    "相似",
    "Google Edge TPU Coral Dev Board"
  ],
  [
    "Raspberry Pi 4",
    "组成部分",
    "ARM Cortex-A72 CPU"
  ],
  [
    "tensor()",
    "用途",
    "获取指向张量的指针"
  ],
  [
    "interpreter.get_tensor()",
    "用途",
    "获取张量数据"
  ],
  [
    "output_details",
    "组成部分",
    "index"
  ],
  [
    "class_names",
    "包含",
    "daisy, dandelion, roses, sunflowers, tulips"
  ],
  [
    "tf.nn.softmax()",
    "用途",
    "计算预测结果的softmax概率"
  ],
  [
    "np.argmax()",
    "用途",
    "获取score中的最大值索引"
  ],
  [
    "TensorFlow",
    "特点",
    "版本变化后API函数会改变"
  ],
  [
    "HDMI 接口",
    "是",
    "6"
  ],
  [
    "Display Port 接口",
    "用途",
    "用来连接 DP 屏幕"
  ],
  [
    "直流桶式插座",
    "用途",
    "用于 5V 电源输入"
  ],
  [
    "MIPI CSI-2 摄像头接口",
    "是",
    "9"
  ],
  [
    "Jetson Nano",
    "用途",
    "运行各种深度学习模型"
  ],
  [
    "Jetson Nano",
    "用途",
    "构建小型移动机器人、人脸签到打卡、口罩识别、智能门锁、智能音箱等复杂 AI 系统"
  ],
  [
    "Jetson Nano",
    "组成部分",
    "microSD 卡"
  ],
  [
    "microSD 卡",
    "用途",
    "用作启动设备和主存储器"
  ],
  [
    "microSD 卡",
    "特点",
    "建议最小采用 64 GB UHS-1 卡"
  ],
  [
    "Jetson Nano",
    "组成部分",
    "Micro-USB 接口"
  ],
  [
    "Micro-USB 接口",
    "用途",
    "提供 5V⎓2A 的高品质电源为开发者套件供电"
  ],
  [
    "Jetson Nano",
    "缺点",
    "不包括无线网卡"
  ],
  [
    "Jetson Nano",
    "组成部分",
    "Ethernet 有线网络"
  ],
  [
    "官方推荐",
    "示例",
    "AC8265"
  ],
  [
    "Jetson",
    "包含",
    "CSI 相机接口"
  ],
  [
    "CSI 相机接口",
    "特点",
    "B02版本有两路"
  ],
  [
    "CSI 相机接口",
    "用途",
    "可以使用树莓派摄像头"
  ],
  [
    "IMX219模组",
    "特点",
    "800万像素"
  ],
  [
    "microSD卡",
    "用途",
    "写入镜像"
  ],
  [
    "镜像",
    "来源",
    "英伟达官方或开源社区"
  ],
  [
    "SD Memory Card Formatter",
    "用途",
    "格式化microSD卡"
  ],
  [
    "Etcher",
    "用途",
    "将镜像写入microSD卡"
  ],
  [
    "Jetson Nano",
    "交互方式",
    "连接显示器、键盘和鼠标或通过SSH/VNC远程访问"
  ],
  [
    "Jetson Developer Kits",
    "用途",
    "获取Jetson平台信息"
  ],
  [
    "NVIDIA Jetson论坛",
    "用途",
    "提问或分享项目"
  ],
  [
    "Jetson Community Projects",
    "用途",
    "获取有趣项目"
  ],
  [
    "Hello AI World",
    "用途",
    "快速启动深度学习推理演示"
  ],
  [
    "Hello AI World",
    "特点",
    "使用计算机视觉相关模型和预训练模型进行实时图像分类和对象检测"
  ],
  [
    "JetBot",
    "用途",
    "学习AI和构建应用程序"
  ],
  [
    "JetBot",
    "特点",
    "易于设置和使用，兼容许多配件"
  ],
  [
    "VNC",
    "用途",
    "远程桌面访问Jetson Nano"
  ],
  [
    "VNC",
    "条件",
    "需要设置VNC密码和启用自动登录"
  ],
  [
    "VNC Viewer",
    "用途",
    "进行VNC连接"
  ],
  [
    "VNC Viewer",
    "用途",
    "登录 Jetson Nano"
  ],
  [
    "TensorFlow",
    "是什么",
    "一个使用数据流图进行数值计算的开源软件库"
  ],
  [
    "TensorFlow",
    "特点",
    "灵活的架构可以将模型部署到桌面、服务器或移动设备中的 CPU 或 GPU 上"
  ],
  [
    "TensorFlow GPU 版本",
    "条件",
    "需要成功配置好 CUDA"
  ],
  [
    "TensorFlow GPU 版本安装",
    "步骤",
    "安装依赖项"
  ],
  [
    "TensorFlow GPU 版本安装",
    "步骤",
    "安装 TensorFlow 所需的系统包"
  ],
  [
    "TensorFlow GPU 版本安装",
    "步骤",
    "安装和升级 pip3"
  ],
  [
    "TensorFlow GPU 版本安装",
    "步骤",
    "安装 Python 包依赖项"
  ],
  [
    "TensorFlow GPU 版本安装",
    "步骤",
    "确认 CUDA 已经被正常安装"
  ],
  [
    "TensorFlow GPU 版本安装",
    "步骤",
    "安装 TensorFlow"
  ],
  [
    "TensorFlow",
    "条件",
    "安装的 TensorFlow 版本必须与正在使用的 JetPack 版本一致"
  ],
  [
    "Jetson Nano",
    "包含",
    "OpenCV"
  ],
  [
    "Jetson Nano 开发板",
    "特点",
    "默认安装 JetPack 安装了对应的 OpenCV"
  ],
  [
    "OpenCV",
    "特点",
    "不支持 CUDA 且版本是固定搭配的"
  ],
  [
    "jtop 命令",
    "用途",
    "查看开发板系统信息"
  ],
  [
    "make命令",
    "用途",
    "编译Python模块"
  ],
  [
    "Python模块",
    "条件",
    "安装相应的依赖包"
  ],
  [
    "make install",
    "结果",
    "Python相关程序模块会拷贝到/opt/python"
  ],
  [
    "/opt/python",
    "用途",
    "存放Python相关程序模块"
  ],
  [
    "Jetson Nano 开发板",
    "特点",
    "不支持 CUDA"
  ],
  [
    "OpenCV",
    "安装步骤",
    "安装依赖项"
  ],
  [
    "OpenCV",
    "安装步骤",
    "下载 OpenCV"
  ],
  [
    "OpenCV",
    "安装步骤",
    "编译 OpenCV"
  ],
  [
    "OpenCV",
    "安装步骤",
    "安装 OpenCV 项目"
  ],
  [
    "OpenCV 编译",
    "条件",
    "设置 OpenCV 的内容、位置和方式"
  ],
  [
    "OpenCV 编译",
    "示例",
    "-D WITH_QT=OFF 禁用了 Qt5 支持"
  ],
  [
    "OpenCV 编译",
    "结果",
    "需要大约两个半小时"
  ],
  [
    "OpenCV 安装",
    "特点",
    "整个安装需要两个小时才能完成"
  ],
  [
    "OpenCV 安装",
    "组成部分",
    "创建了一个安装脚本"
  ],
  [
    "OpenCV 安装脚本",
    "执行步骤",
    "以依赖项的安装开始"
  ],
  [
    "OpenCV 安装脚本",
    "执行步骤",
    "以 ldconfig 结束"
  ],
  [
    "Python",
    "特点",
    "功能强大的编程语言，易于使用，易于阅读和编写"
  ],
  [
    "Python",
    "用途",
    "与树莓派结合可以将项目与现实世界轻松的联系起来"
  ],
  [
    "树莓派",
    "包含",
    "Python开发环境"
  ],
  [
    "树莓派",
    "用途",
    "测试Python开发环境并查看当前的Python版本"
  ],
  [
    "GPIO库",
    "用途",
    "控制GPIO引脚"
  ],
  [
    "BCM编号方式",
    "用途",
    "设置GPIO引脚编号模式"
  ],
  [
    "GPIO21",
    "用途",
    "作为LED的控制引脚"
  ],
  [
    "GPIO.setup()方法",
    "用途",
    "将GPIO21设置为输出模式"
  ],
  [
    "HIGH电平",
    "用途",
    "点亮LED灯"
  ],
  [
    "time.sleep()方法",
    "用途",
    "延迟一秒钟"
  ],
  [
    "LOW电平",
    "用途",
    "关闭LED灯"
  ],
  [
    "GPIO.cleanup()方法",
    "用途",
    "清理GPIO引脚的设置"
  ],
  [
    "四引脚按键",
    "用途",
    "控制LED灯的亮暗"
  ],
  [
    "树莓派4B的18号引脚",
    "用途",
    "连接按键的一个引脚"
  ],
  [
    "树莓派的21号引脚",
    "用途",
    "连接LED灯的正极"
  ],
  [
    "四脚按键开关",
    "组成部分",
    "常开触点和常闭触点"
  ],
  [
    "常开触点",
    "用途",
    "当压力施压时电路接通"
  ],
  [
    "常闭触点",
    "用途",
    "当压力撤销时电路恢复"
  ],
  [
    "上拉电阻",
    "用途",
    "在18号引脚处设置"
  ],
  [
    "GPIO.setup(18, GPIO.IN, pull_up_down=GPIO.PUD_UP)",
    "用途",
    "设置上拉电阻"
  ],
  [
    "Python 2.7",
    "特点",
    "官方已经停止维护"
  ],
  [
    "树莓派",
    "用途",
    "安装Python"
  ],
  [
    "Jetson Nano",
    "包含",
    "MIPI的相机串行接口（CSI）端口"
  ],
  [
    "MIPI",
    "是什么",
    "MIPI联盟发起的为移动应用处理器制定的开放标准"
  ],
  [
    "CSI端口",
    "支持",
    "Raspberry Pi、Arducam等常见的相机模块"
  ],
  [
    "Raspberry Camera V2",
    "特点",
    "800万像素、感光芯片为索尼IMX219"
  ],
  [
    "Raspberry Camera V2",
    "特点",
    "静态图片分辨率为3280 × 2464"
  ],
  [
    "Raspberry Camera V2",
    "特点",
    "支持1080p30, 720p60以及640 × 480p90视频录像"
  ],
  [
    "Jetson Nano",
    "用途",
    "机器学习和计算机视觉应用"
  ],
  [
    "机器学习和计算机视觉应用",
    "示例",
    "物体检测、人脸识别、图像分割等视觉任务"
  ],
  [
    "JetPack SDK",
    "特点",
    "支持预装驱动程序的RPi相机"
  ],
  [
    "CSI摄像头",
    "条件",
    "必须在开机前先装上去，系统才能识别"
  ],
  [
    "Linux",
    "组成部分",
    "/dev目录存储所有设备文件或特殊文件"
  ],
  [
    "GStreamer",
    "是什么",
    "多媒体框架，用于后端处理任务"
  ],
  [
    "GStreamer",
    "用途",
    "格式修改、显示驱动程序协调和数据处理"
  ],
  [
    "Haar特征的cascade分类器",
    "是什么",
    "一种有效的物品检测方法"
  ],
  [
    "Haar特征的cascade分类器",
    "工作原理",
    "通过许多正负样例中训练得到cascade方程，然后将其应用于其他图片"
  ],
  [
    "OpenCV",
    "包含",
    "已经训练好的分类器（面部，眼睛，微笑等）"
  ],
  [
    "face_cascade.detectMultiScale",
    "用途",
    "在图像中检测面部"
  ],
  [
    "Haar特征的cascade分类器",
    "用途",
    "检测人脸"
  ],
  [
    "minNeighbors参数",
    "定义",
    "构成检测目标的相邻矩形的最小个数"
  ],
  [
    "OpenCV",
    "用途",
    "调用CSI摄像头和USB摄像头"
  ],
  [
    "CSI摄像头",
    "特点",
    "需要使用GStreamer读取视频流"
  ],
  [
    "USB摄像头",
    "特点",
    "可以直接使用cv2.videocapture(2)打开"
  ],
  [
    "GStreamer管道",
    "组成部分",
    "摄像头预捕获的图像宽度、高度、窗口显示的图像宽度、高度、捕获帧率、是否旋转图像"
  ],
  [
    "人脸检测",
    "步骤",
    "将彩色图像转换为灰度图像，检测人脸并在边界周围绘制矩形"
  ],
  [
    "Face Recognition库",
    "定义",
    "一个强大、简单、易上手的人脸识别开源项目"
  ],
  [
    "Face Recognition库",
    "包含",
    "dlib这一C++图形库"
  ],
  [
    "人脸识别",
    "步骤",
    "人脸检测、检测面部特征点、给脸部编码、从编码中找出人的名字"
  ],
  [
    "face_landmarks",
    "用途",
    "检测面部特征点"
  ],
  [
    "face_encodings",
    "用途",
    "给脸部编码"
  ],
  [
    "load_image_file",
    "用途",
    "加载面孔照片"
  ],
  [
    "face_locations",
    "用途",
    "定位图像中的人脸位置"
  ],
  [
    "number_of_times_to_upsample参数",
    "定义",
    "设置对图像进行多少次上采样以查找人脸"
  ],
  [
    "model参数",
    "定义",
    "设置人脸检测模型，'hog'在CPU上运行更快，'cnn'更准确但需要GPU加速"
  ],
  [
    "face_encodings函数",
    "特点",
    "返回图像中每张人脸的128维人脸编码"
  ],
  [
    "compare_faces函数",
    "用途",
    "将人脸编码列表与候选编码进行比较，查看是否匹配"
  ],
  [
    "face_distance函数",
    "用途",
    "计算已知人脸和未知人脸特征向量的距离"
  ],
  [
    "pip install",
    "用途",
    "安装Python包"
  ],
  [
    "pip install",
    "缺点",
    "可能出现哈希不匹配的错误"
  ],
  [
    "--no-cache-dir",
    "用途",
    "解决pip安装时的哈希不匹配问题"
  ],
  [
    "jupyter",
    "组成部分",
    "配置文件"
  ],
  [
    "jupyter_notebook_config.py",
    "是",
    "Jupyter的配置文件"
  ],
  [
    "jupyter_notebook_config.py",
    "特点",
    "由jupyter软件自动生成"
  ],
  [
    "jupyter_notebook_config.py",
    "包含",
    "运行服务监听的IP地址、端口、notebooks内核目录、浏览器开关设置"
  ],
  [
    "Jupyter lab",
    "特点",
    "可以设置访问密码"
  ],
  [
    "Jupyter lab",
    "启动条件",
    "需要重启树莓派"
  ],
  [
    "图像识别",
    "是什么",
    "利用计算机对图像进行处理、分析和理解，以识别各种不同模式的目标和对象的技术"
  ],
  [
    "图像识别",
    "是",
    "应用深度学习算法的一种实践应用"
  ],
  [
    "图像识别技术",
    "包含",
    "人脸识别与商品识别"
  ],
  [
    "人脸识别",
    "用途",
    "安全检查、身份核验与移动支付"
  ],
  [
    "商品识别",
    "用途",
    "商品流通过程中，特别是无人货架、智能零售柜等无人零售领域"
  ],
  [
    "边缘计算",
    "是什么",
    "在靠近物或数据源头的一侧，采用网络、计算、存储、应用核心能力为一体的开放平台，就近提供最近端服务"
  ],
  [
    "边缘计算",
    "特点",
    "应用程序在边缘侧发起，产生更快的网络服务响应，满足行业在实时业务、应用智能、安全与隐私保护等方面的基本需求"
  ],
  [
    "TensorFlow Lite",
    "是什么",
    "一组工具，可帮助开发者在移动设备、嵌入式设备和 IoT 设备上运行 TensorFlow 模型"
  ],
  [
    "TensorFlow Lite",
    "特点",
    "支持设备端机器学习推断，延迟较低，并且二进制文件很小"
  ],
  [
    "TensorFlow Lite",
    "组成部分",
    "TensorFlow Lite 解释器(Interpreter)"
  ],
  [
    "TensorFlow Lite",
    "组成部分",
    "TensorFlow Lite 转换器(Converter)"
  ],
  [
    "TensorFlow Lite",
    "组成部分",
    "算子库(Op kernels)"
  ],
  [
    "TensorFlow Lite",
    "组成部分",
    "硬件加速代理(Hardware accelerator delegate)"
  ],
  [
    "TensorFlow Lite",
    "特点",
    "采用更小的模型格式，并提供了方便的模型转换器"
  ],
  [
    "TensorFlow Lite",
    "用途",
    "将 TensorFlow 模型转换为方便解释器使用的格式，并可引入优化以减小二进制文件的大小和提高性能"
  ],
  [
    "TensorFlow Lite",
    "特点",
    "可在手机、嵌入式 Linux 设备和微控制器等很多不同类型的硬件上运行经过专门优化的模型"
  ],
  [
    "TensorFlow Lite",
    "特点",
    "安卓应用只需 1 兆左右的运行环境，在 MCU 上甚至可以小于 100KB"
  ],
  [
    "TFLite 算子库",
    "特点",
    "目前有130个左右，它与 TensorFlow 的核心算子库略有不同，并做了移动设备相关的优化"
  ],
  [
    "TensorFlow Lite",
    "特点",
    "在硬件加速层面，对于 CPU 利用了 ARM 的 NEON 指令集做了大量的优化"
  ],
  [
    "TensorFlow Lite",
    "特点",
    "可以利用手机上的加速器，比如 GPU 或者 DSP 等"
  ],
  [
    "TensorFlow Lite",
    "特点",
    "最新的安卓系统提供了 Android 神经网络 API（Android NN API)，让硬件厂商可以扩展支持这样的接口"
  ],
  [
    "TFLite 模型转换器",
    "用途",
    "将 TensorFlow 模型转换为 TFLite 文件格式"
  ],
  [
    "TFLite 解释器",
    "用途",
    "在设备端运行 TFLite 模型"
  ],
  [
    "TFLite 解释器",
    "特点",
    "调用不同的硬件加速器比如 GPU 进行执行"
  ],
  [
    "TensorFlow Lite 的工作流程",
    "执行步骤",
    "选择模型、转换模型、部署到设备、优化模型"
  ],
  [
    "花卉识别模型",
    "组成部分",
    "卷积层与全连接层"
  ],
  [
    "卷积层",
    "组成部分",
    "3个 Conv2D 和 2个 MaxPooling2D 层"
  ],
  [
    "卷积层",
    "用途",
    "识别图像里的空间模式，例如线条和物体局部"
  ],
  [
    "最大池化层",
    "用途",
    "降低卷积层对位置的敏感"
  ],
  [
    "卷积层",
    "特点",
    "使用3×3的卷积核，并在输出上使用 Relu 激活函数"
  ],
  [
    "第一个卷积层",
    "特点",
    "输出通道数为32"
  ],
  [
    "第二、三卷积层",
    "特点",
    "输出通道数为64"
  ],
  [
    "卷积层输入",
    "特点",
    "张量形状是 (image_height, image_width, color_channels)"
  ],
  [
    "花卉数据集中的图片",
    "特点",
    "形状是 (224,224, 3)"
  ],
  [
    "ImageDataGenerator",
    "用途",
    "生成一个批次的图片，以生成器的形式给模型训练"
  ],
  [
    "flow_from_directory",
    "用途",
    "逐步加载单个数据集的图像"
  ],
  [
    "target_size 参数",
    "用途",
    "将所有图像加载到一个模型需要的特定的大小"
  ],
  [
    "batch_size",
    "用途",
    "训练时从数据集中的不同类中随机选出一定数量的图像"
  ],
  [
    "树莓派系统",
    "升级方法",
    "直接更新树莓派系统"
  ],
  [
    "树莓派系统",
    "升级方法",
    "下载特定版本的Python"
  ],
  [
    "树莓派系统升级",
    "条件",
    "需要root权限"
  ],
  [
    "树莓派系统升级",
    "特点",
    "更新数据慢可以考虑更换源"
  ],
  [
    "国内源",
    "示例",
    "阿里、清华等"
  ],
  [
    "清华源",
    "特点",
    "Raspbian软件仓库镜像"
  ],
  [
    "软件源配置文件",
    "位置",
    "/etc/apt/sources.list"
  ],
  [
    "软件源配置文件",
    "编辑工具",
    "nano或者vi"
  ],
  [
    "Python安装",
    "步骤",
    "安装依赖"
  ],
  [
    "Conv2D",
    "特点",
    "输出的通道数量取决于声明层时的filters参数"
  ],
  [
    "MaxPooling2D",
    "特点",
    "输出是一个三维的张量，形状描述了(height, width, channels)"
  ],
  [
    "Dense",
    "是什么",
    "全连接(Full Connected)层"
  ],
  [
    "Dense",
    "用途",
    "完成分类任务"
  ],
  [
    "layers.Flatten()",
    "用途",
    "将三维张量展开到1维以便传入Dense层"
  ],
  [
    "softmax",
    "用途",
    "作为最终的Dense层的激活函数用于多分类"
  ],
  [
    "Adam",
    "用途",
    "作为模型的优化器"
  ],
  [
    "SparseCategoricalCrossentropy",
    "用途",
    "作为模型的损失函数"
  ],
  [
    "TensorBoard",
    "用途",
    "记录训练过程中的指标和计算图"
  ],
  [
    "SavedModel",
    "特点",
    "包含完整的TensorFlow程序，包括权重值和计算"
  ],
  [
    "TFLiteConverter",
    "用途",
    "将SavedModel转换为TensorFlow Lite兼容格式"
  ],
  [
    "TensorFlow Lite",
    "特点",
    "适用于移动和嵌入式设备的轻量级推理框架"
  ],
  [
    "TensorFlow Lite解释器",
    "用途",
    "执行TensorFlow Lite模型的推理"
  ],
  [
    "tf.image.resize",
    "用途",
    "调整输入图像大小以匹配模型输入要求"
  ],
  [
    "tf.nn.softmax",
    "用途",
    "将模型输出转换为概率分布"
  ],
  [
    "pip3",
    "是",
    "Python 官方集成的包管理工具"
  ],
  [
    "pip",
    "区别",
    "pip3"
  ],
  [
    "pip",
    "用途",
    "Python 包管理"
  ],
  [
    "pip3",
    "用途",
    "Python 包管理"
  ],
  [
    "2.3.0",
    "特点",
    "版本变化后 API 函数会改变"
  ],
  [
    "2.3.0",
    "用途",
    "需要注意版本变化"
  ],
  [
    "开关去抖",
    "用途",
    "忽略由于开关抖动引起的小于"
  ],
  [
    "val_ds",
    "用途",
    "存储图像和标签的数据集"
  ],
  [
    "normalization_layer",
    "用途",
    "对图像数据进行归一化处理"
  ],
  [
    "lambda x, y: (normalization_layer(x), y)",
    "执行步骤",
    "对val_ds中的每个图像x应用normalization_layer，同时保留对应的标签y"
  ],
  [
    "树莓派通用输入/输出接口（GPIO）",
    "是什么",
    "一组数字引脚，可用于将树莓派连接到其他电子设备"
  ],
  [
    "树莓派通用输入/输出接口（GPIO）",
    "用途",
    "读取传感器数据，控制 LED 等外部设备"
  ],
  [
    "树莓派通用输入/输出接口（GPIO）",
    "特点",
    "可以配置为输入或输出"
  ],
  [
    "树莓派通用输入/输出接口（GPIO）",
    "组成部分",
    "40个 GPIO 引脚"
  ],
  [
    "树莓派通用输入/输出接口（GPIO）",
    "组成部分",
    "26个引脚可以用作数字输入或输出"
  ],
  [
    "树莓派通用输入/输出接口（GPIO）",
    "组成部分",
    "14个引脚用于其他功能"
  ],
  [
    "树莓派通用输入/输出接口（GPIO）",
    "特点",
    "可以通过软件编程进行控制"
  ],
  [
    "树莓派通用输入/输出接口（GPIO）",
    "特点",
    "提供了各种库和工具，使编程更加方便"
  ],
  [
    "树莓派通用输入/输出接口（GPIO）",
    "缺点",
    "错误的连接和编程可能会导致设备损坏或故障"
  ],
  [
    "树莓派通用输入/输出接口（GPIO）",
    "条件",
    "需要小心谨慎使用"
  ],
  [
    "树莓派通用输入/输出接口（GPIO）",
    "条件",
    "建议在使用之前仔细阅读相关文档，并确保采取适当的安全措施"
  ],
  [
    "树莓派通用输入/输出接口（GPIO）",
    "组成部分",
    "位于其引脚排针上"
  ],
  [
    "树莓派通用输入/输出接口（GPIO）",
    "特点",
    "可以通过跳线线连接到其他电路板或设备"
  ],
  [
    "树莓派",
    "用途",
    "控制外部硬件设备"
  ],
  [
    "树莓派",
    "组成部分",
    "GPIO引脚"
  ],
  [
    "LED灯",
    "用途",
    "通过GPIO控制展示基础硬件控制能力"
  ],
  [
    "LED灯",
    "组成部分",
    "限流电阻"
  ],
  [
    "GPIO21",
    "用途",
    "连接LED灯的正极"
  ],
  [
    "GND",
    "用途",
    "连接LED灯的负极形成回路"
  ],
  [
    "面包板",
    "用途",
    "搭建电路原型"
  ],
  [
    "杜邦线公对母",
    "用途",
    "连接树莓派和面包板上的元件"
  ],
  [
    "330欧姆电阻",
    "用途",
    "作为LED灯的限流电阻"
  ],
  [
    "电路",
    "组成部分",
    "LED灯、限流电阻、GPIO21、GND"
  ],
  [
    "控制LED灯",
    "是",
    "利用GPIO控制外部硬件设备的基础"
  ],
  [
    "控制LED灯",
    "用途",
    "基础硬件控制能力展示"
  ],
  [
    "/usr/bin/python",
    "是",
    "软链接"
  ],
  [
    "/usr/bin/python",
    "指向",
    "python"
  ],
  [
    "树莓派",
    "用途",
    "教育"
  ],
  [
    "树莓派",
    "特点",
    "廉价且周边设备多"
  ],
  [
    "树莓派",
    "组成部分",
    "GPIO引脚"
  ],
  [
    "树莓派",
    "编程语言",
    "Python"
  ],
  [
    "树莓派",
    "开发环境",
    "Linux"
  ],
  [
    "敏捷开发",
    "特点",
    "应对快速变化需求的软件开发模式"
  ],
  [
    "敏捷开发",
    "优点",
    "缩短开发周期"
  ],
  [
    "树莓派",
    "包含",
    "40个GPIO引脚"
  ],
  [
    "GPIO引脚",
    "用途",
    "连接其他电子设备"
  ],
  [
    "GPIO引脚",
    "特点",
    "可配置为输入或输出"
  ],
  [
    "Wiring Pi",
    "用途",
    "控制树莓派的GPIO"
  ],
  [
    "Wiring Pi",
    "组成部分",
    "GPIO库、I2C库、SPI库、UART库和软件PWM库"
  ],
  [
    "NVIDIA Jetson Nano",
    "用途",
    "边缘计算设备"
  ],
  [
    "NVIDIA Jetson Nano",
    "特点",
    "低功耗"
  ],
  [
    "NVIDIA Jetson Nano",
    "组成部分",
    "ARM Cortex-A57 CPU、NVIDIA Maxwell GPU"
  ],
  [
    "TensorFlow Lite",
    "用途",
    "在移动设备、嵌入式设备和IoT设备上运行TensorFlow模型"
  ],
  [
    "TensorFlow Lite",
    "组成部分",
    "解释器、转换器、算子库、硬件加速代理"
  ],
  [
    "OpenCV",
    "用途",
    "计算机视觉应用"
  ],
  [
    "face_recognition",
    "用途",
    "人脸识别"
  ],
  [
    "face_recognition",
    "组成部分",
    "dlib库"
  ],
  [
    "Haar特征的cascade分类器",
    "用途",
    "检测人脸"
  ],
  [
    "GStreamer",
    "用途",
    "处理媒体应用程序"
  ],
  [
    "CSI摄像头",
    "用途",
    "机器学习和计算机视觉应用"
  ],
  [
    "CSI摄像头",
    "特点",
    "不支持即插即用"
  ],
  [
    "GPIO口",
    "包含",
    "I2C接口(SCL、SDA)，SPI接口（MISO、MOSI、CLK、CS片选信号SPICE0_N），UART串口接口（TXD、RXD），PWM接口以及普通GPIO口"
  ],
  [
    "树莓派接口",
    "包含",
    "Wiring Pi编号、BCM编号、物理引脚Broad编号"
  ],
  [
    "Wiring Pi编号",
    "是",
    "功能接线的引脚号（如TXD、PWM0等）"
  ],
  [
    "BCM编号",
    "是",
    "Broadcom针脚号，也即是通常称的GPIO"
  ],
  [
    "物理引脚Broad编号",
    "是",
    "PCB板上针脚的物理位置对应的编号（1~40）"
  ],
  [
    "Wiring Pi",
    "是",
    "应用于树莓派的GPIO控制库函数，由Gordon Henderson所编写维护"
  ],
  [
    "Wiring Pi",
    "包含",
    "GPIO库、I2C库、SPI库、UART库和软件PWM库等"
  ],
  [
    "Wiring Pi",
    "用途",
    "使用C、C++开发并且可以被其他语言包使用，例如python、ruby或者PHP等"
  ],
  [
    "Wiring Pi库",
    "包含",
    "命令行工具gpio"
  ],
  [
    "命令行工具gpio",
    "用途",
    "用来设置GPIO管脚，可以用来读写GPIO管脚，甚至可以在Shell脚本中使用来达到控制GPIO管脚的目的"
  ],
  [
    "Wiring Pi",
    "安装方式",
    "通过下载源代码来安装，使用GIT工具下载代码，然后编译安装"
  ],
  [
    "Wiring Pi",
    "安装方式",
    "在官网下载安装包后安装"
  ],
  [
    "Pi 4B与Pi v3+",
    "区别",
    "安装包是不同的"
  ],
  [
    "gpio readall命令",
    "用途",
    "查看树莓派的GPIO引脚信息"
  ],
  [
    "Wiring Pi编号模式",
    "用途",
    "只使用在C语言中"
  ],
  [
    "Python程序",
    "用途",
    "使用BCM编号、物理引脚Broad编号"
  ],
  [
    "Conv2D",
    "组成部分",
    "三维张量输出，形状为(height, width, channels)"
  ],
  [
    "MaxPooling2D",
    "组成部分",
    "三维张量输出，形状为(height, width, channels)"
  ],
  [
    "Conv2D",
    "特点",
    "输出通道数量由filters参数决定"
  ],
  [
    "Dense",
    "是什么",
    "全连接(Full Connected)层"
  ],
  [
    "Dense",
    "用途",
    "完成分类任务"
  ],
  [
    "layers.Flatten()",
    "用途",
    "将三维张量展开到1维以便传入Dense层"
  ],
  [
    "Dense",
    "组成部分",
    "输出数量等于类别数并使用softmax激活函数"
  ],
  [
    "tf.keras.Sequential",
    "包含",
    "Conv2D, MaxPooling2D, Flatten, Dense等层"
  ],
  [
    "RandomFlip",
    "用途",
    "对训练图像进行水平翻转以增加数据多样性"
  ],
  [
    "RandomRotation",
    "用途",
    "对训练图像进行旋转以增加数据多样性"
  ],
  [
    "model.compile",
    "组成部分",
    "优化器使用Adam"
  ],
  [
    "model.compile",
    "组成部分",
    "损失函数使用SparseCategoricalCrossentropy"
  ],
  [
    "model.compile",
    "组成部分",
    "评估指标为准确率(acc)"
  ],
  [
    "TensorBoard",
    "用途",
    "记录训练日志和可视化训练过程"
  ]
]