[
  [
    "TensorFlow.js",
    "包含",
    "tf.sequential()和tf.model()两种创建模型的方式"
  ],
  [
    "tf.sequential()",
    "特点",
    "是一个线性堆叠layers的模型"
  ],
  [
    "tf.model()",
    "特点",
    "定义的神经元网络层与层之间的关系较为随意"
  ],
  [
    "TensorFlow.js",
    "相似",
    "Keras的模型定义方式"
  ],
  [
    "createModel()",
    "组成部分",
    "实例化tf.sequential对象、添加输入层、添加输出层"
  ],
  [
    "输入层",
    "特点",
    "自动连接到具有一个隐藏单元的dense层"
  ],
  [
    "输入层",
    "组成部分",
    "inputShape为[1], units为1, useBias为true"
  ],
  [
    "输出层",
    "组成部分",
    "units为1, useBias为true"
  ],
  [
    "全连接网络",
    "用途",
    "处理简单的数据"
  ],
  [
    "modelSummary",
    "用途",
    "将模型显示在浏览器中"
  ],
  [
    "数据预处理",
    "包含",
    "数据规范化和转换为张量类型"
  ],
  [
    "JavaScript",
    "缺点",
    "在大规模数据处理上不如Python高效"
  ],
  [
    "JavaScript",
    "缺点",
    "内存回收问题突出"
  ],
  [
    "TensorFlow.js",
    "用途",
    "解决JavaScript内存回收问题"
  ],
  [
    "tf.tidy()",
    "用途",
    "进行内存清理工作，防止内存泄露"
  ],
  [
    "tf.tidy()",
    "特点",
    "将大规模内存操作放置在其回调中执行"
  ],
  [
    "convertToTensor函数",
    "执行步骤",
    "打乱数据顺序，创建特征向量和标签向量，转换为张量格式，进行归一化操作"
  ],
  [
    "convertToTensor函数",
    "用途",
    "将原始数据转变为TensorFlow可读的张量格式"
  ],
  [
    "归一化操作",
    "用途",
    "让输入输出映射到0-1之间，保证后期更有效地训练"
  ],
  [
    "tf.util.shuffle",
    "用途",
    "打乱数据集中数据顺序"
  ],
  [
    "CNN",
    "用途",
    "构建Tensorflow.js模型来识别手写数字"
  ],
  [
    "手写数字识别",
    "步骤",
    "训练分类器查看数千个图像及其标签"
  ],
  [
    "手写数字识别",
    "步骤",
    "使用模型从未见过的测试数据评估分类器准确性"
  ],
  [
    "Tensorflow.js",
    "用途",
    "构建CNN模型"
  ],
  [
    "model.fit()",
    "用途",
    "训练模型"
  ],
  [
    "model.predict()",
    "用途",
    "预测结果"
  ],
  [
    "TensorFLow-vis",
    "用途",
    "可视化模型训练的过程和结果"
  ],
  [
    "回调函数",
    "用途",
    "动态显示训练的过程"
  ],
  [
    "tf.train.adam()",
    "用途",
    "模型优化算法"
  ],
  [
    "tf.losses.meanSquaredError",
    "用途",
    "判断训练结果的参数"
  ],
  [
    "batchSize",
    "特点",
    "一次采样32条训练数据"
  ],
  [
    "epochs",
    "特点",
    "遍历所有样本50次"
  ],
  [
    "shuffle",
    "特点",
    "打乱数据集"
  ],
  [
    "callback",
    "用途",
    "在每一个训练周期显示训练情况"
  ],
  [
    "tf.linspace()",
    "用途",
    "创建0~1之间平均分配的100个值"
  ],
  [
    "predict()",
    "用途",
    "预测结果"
  ],
  [
    "tfvis.render.scatterplot",
    "用途",
    "可视化模型预测结果和原始数据"
  ],
  [
    "TensorFlow.js",
    "包含",
    "tf.tidy"
  ],
  [
    "tf.tidy",
    "用途",
    "清除所有创建的中间张量并释放它们的GPU内存"
  ],
  [
    "tf.tidy",
    "特点",
    "不清除内部函数的返回值"
  ],
  [
    "tf.tidy",
    "执行步骤",
    "执行一个函数并清除所有创建的中间张量"
  ],
  [
    "dispose",
    "用途",
    "释放张量的GPU内存"
  ],
  [
    "tf.tidy",
    "区别",
    "与JavaScript中的常规范围类似，但针对GPU支持的张量"
  ],
  [
    "Tensorflow.js",
    "包含",
    "Layers API和Core API"
  ],
  [
    "Layers API",
    "包含",
    "sequential模型和functional模型"
  ],
  [
    "sequential模型",
    "特点",
    "将网络的每一层简单的叠在一起"
  ],
  [
    "sequential模型",
    "创建方式",
    "将需要的层按顺序写在一个列表里，然后将列表作为sequential()函数的输入"
  ],
  [
    "functional模型",
    "创建方式",
    "使用tf.model() API创建非闭环的计算图"
  ],
  [
    "tf.model()",
    "用途",
    "创建任意非闭环的计算图"
  ],
  [
    "SymbolicTensor",
    "用途",
    "作为functional模型第一层的输入"
  ],
  [
    "Layers API",
    "特点",
    "提供了大量方便的工具，例如权重初始化，模型序列化，训练监测，可迁移性和安全检查"
  ],
  [
    "Core API",
    "用途",
    "需要更多灵活性和控制时使用"
  ],
  [
    "Core API",
    "特点",
    "不需要序列化或可以创造自己的序列化方法"
  ],
  [
    "Core API",
    "组成部分",
    "一系列的函数，这些函数以一个或多个张量作为输入，并输出另一个张量"
  ],
  [
    "TensorFlow.js",
    "特点",
    "使用GPU来加速数学运算"
  ],
  [
    "TensorFlow.js",
    "包含",
    "dispose和tf.tidy两种内存管理方法"
  ],
  [
    "dispose",
    "用途",
    "清除张量或变量并释放其GPU内存"
  ],
  [
    "tf.tidy",
    "用途",
    "防止应用程序中的内存泄漏"
  ],
  [
    "tf.tidy",
    "用途",
    "更谨慎地控制内存何时回收"
  ],
  [
    "index.html",
    "组成部分",
    "<!DOCTYPE html> <html> <head> <meta charset=\"utf-8\"> <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">"
  ],
  [
    "index.html",
    "用途",
    "用于构建网页的用户界面"
  ],
  [
    "index.js",
    "用途",
    "用于实现网页的交互功能"
  ],
  [
    "data.js",
    "用途",
    "用于处理或存储数据"
  ],
  [
    "tfjs-examples/mnist",
    "包含",
    "data.js文件"
  ],
  [
    "Tensorflow.js",
    "用途",
    "构建和运行机器学习模型"
  ],
  [
    "mnist项目",
    "包含",
    "HTML文件、JS文件和配置文件"
  ],
  [
    "index.html",
    "组成部分",
    "页面的基本结构，包含div标签、UI元素和JavaScript代码插入"
  ],
  [
    "index.js",
    "用途",
    "加载数据，定义模型，训练循环并指定UI元素"
  ],
  [
    "data.js",
    "用途",
    "下载和访问mnist数据集"
  ],
  [
    "ui.js",
    "用途",
    "更新可视化元素"
  ],
  [
    "package.json",
    "用途",
    "描述构建和运行示例所需的依赖项"
  ],
  [
    "yarn",
    "用途",
    "构建和运行mnist代码"
  ],
  [
    "Webpack",
    "用途",
    "构建工具用于编写更大的程序"
  ],
  [
    "Parcel",
    "用途",
    "构建工具用于编写更大的程序"
  ],
  [
    "TensorFlow.js",
    "包含",
    "通过脚本标签（script tags）或从 yarn（或者 NPM）安装并使用 Parcel，WebPack 或 Rollup 等工具构建工程"
  ],
  [
    "TensorFlow.js",
    "用途",
    "在浏览器中加载"
  ],
  [
    "脚本标签",
    "用途",
    "在 HTML 中直接引用 TensorFlow.js 发布的 NPM 包中已经打包安装好的 JavaScript 代码"
  ],
  [
    "构建工具",
    "示例",
    "Parcel, WebPack 或 Rollup"
  ],
  [
    "Web 开发新手",
    "条件",
    "建议使用脚本代码"
  ],
  [
    "有经验的开发者",
    "条件",
    "可能值得使用构建工具进行探索"
  ],
  [
    "TensorFlow.js",
    "是什么",
    "TensorFlow 的 JavaScript 版本"
  ],
  [
    "TensorFlow.js",
    "特点",
    "支持 GPU 硬件加速"
  ],
  [
    "TensorFlow.js",
    "用途",
    "运行在 Node.js 或浏览器环境中"
  ],
  [
    "TensorFlow.js",
    "用途",
    "完全基于 JavaScript 从头开发、训练和部署模型"
  ],
  [
    "TensorFlow.js",
    "用途",
    "运行已有的 Python 版 TensorFlow 模型"
  ],
  [
    "TensorFlow.js",
    "用途",
    "基于现有的模型进行继续训练"
  ],
  [
    "MnistData",
    "用途",
    "从 MNIST 数据集中随机批量提取 MNIST 图像"
  ],
  [
    "MnistData",
    "包含",
    "训练数据和测试数据"
  ],
  [
    "MnistData",
    "组成部分",
    "nextTrainBatch和nextTestBatch方法"
  ],
  [
    "nextTrainBatch",
    "用途",
    "从训练集中返回一批随机图像及其标签"
  ],
  [
    "nextTestBatch",
    "用途",
    "从测试集中返回一批图像及其标签"
  ],
  [
    "训练模型",
    "条件",
    "使用训练集进行训练"
  ],
  [
    "评估模型",
    "条件",
    "使用测试集中的数据"
  ],
  [
    "训练 MNIST 分类器",
    "步骤",
    "随机打乱数据集"
  ],
  [
    "index.js",
    "用途",
    "加载数据集并显示20张图片"
  ],
  [
    "Web Server for Chrome",
    "用途",
    "解决跨域问题"
  ],
  [
    "2.0.0",
    "有",
    "未满足的对等依赖 seedrandom@~"
  ],
  [
    "TensorFlow.js",
    "是",
    "JavaScript 语言版本的扩展"
  ],
  [
    "TensorFlow.js",
    "用途",
    "在浏览器环境中实现深度学习的功能"
  ],
  [
    "TensorFlow.js",
    "优点",
    "开箱即用的开发库，开发者无需花精力去编写基础复杂的数学问题"
  ],
  [
    "TensorFlow.js",
    "优点",
    "减少服务器的运算，提高服务器资源利用，增强客户端响应运算结果的速度"
  ],
  [
    "TensorFlow.js",
    "优点",
    "前端工程师不需要学习其他后端语言，降低入门门槛"
  ],
  [
    "TensorFlow.js",
    "优点",
    "使用 GPU 加速模型的运算，提高运算效率"
  ],
  [
    "TensorFlow.js",
    "优点",
    "模型可以跟 Python 等其他语言模型进行互转"
  ],
  [
    "TensorFlow.js",
    "优点",
    "浏览器可以很好可视化机器训练过程，同时浏览器可调用设备的摄像头、麦克风等增加机器学习的应用场景"
  ],
  [
    "TensorFlow.js",
    "组成部分",
    "底层 Core API 和最高级的 Layers API"
  ],
  [
    "TensorFlow.js",
    "用途",
    "在浏览器上开发模型"
  ],
  [
    "TensorFlow.js",
    "用途",
    "基于浏览器运行已训练的模型"
  ],
  [
    "TensorFlow.js",
    "特点",
    "支持 GPU 硬件加速"
  ],
  [
    "TensorFlow.js",
    "条件",
    "在 Node.js 环境中，需要有 CUDA 环境支持"
  ],
  [
    "TensorFlow.js",
    "条件",
    "在浏览器环境中，需要有 WebGL 环境支持"
  ],
  [
    "DeepLearning.js",
    "是",
    "基于 WebGL 加速的开放源代码 JavaScript 机器学习库"
  ],
  [
    "DeepLearning.js",
    "特点",
    "可以直接在浏览器中运行，无需进行安装，也无需借助后端运行"
  ],
  [
    "DeepLearning.js",
    "特点",
    "通过利用 WebGL 在 GPU 上执行计算大幅提高了速度"
  ],
  [
    "DeepLearning.js",
    "特点",
    "能够执行完整全面的反向传播"
  ],
  [
    "TensorFlow.js",
    "相似",
    "DeepLearning.js"
  ],
  [
    "TensorFlow.js",
    "结果",
    "与 TensorFlow 团队合并，重命名为 TensorFlow.js"
  ],
  [
    "index.html",
    "包含",
    "<html> <body> <h4>TFJS example<hr/></h4> <div id=\"micro-out-div\">TensorFlow.js Test</div> <script src=\"./index.js\"> </script> </body> </html>"
  ],
  [
    "index.html",
    "用途",
    "通过script标签引入index.js"
  ],
  [
    "index.js",
    "用途",
    "写一段简单的测试代码"
  ],
  [
    "index.js",
    "包含",
    "import * as tf from '@tensorflow/tfjs' console.log(tf.version.tfjs) const shape = [2, 3]; // 2 rows, 3 columns const a = tf.tensor"
  ],
  [
    "index.html",
    "组成部分",
    "<script>标签"
  ],
  [
    "index.js",
    "组成部分",
    "import语句和TensorFlow.js测试代码"
  ],
  [
    "训练模型",
    "步骤",
    "定义需要监视的指标"
  ],
  [
    "训练模型",
    "步骤",
    "准备训练集和验证集"
  ],
  [
    "训练模型",
    "步骤",
    "调整数据集形状"
  ],
  [
    "训练模型",
    "步骤",
    "调用model.fit方法进行训练"
  ],
  [
    "训练模型",
    "步骤",
    "使用测试数据集评估模型"
  ],
  [
    "训练集",
    "用途",
    "用于训练模型"
  ],
  [
    "验证集",
    "用途",
    "了解模型效率、调试超参数"
  ],
  [
    "验证集",
    "特点",
    "在训练过程中不能用于训练"
  ],
  [
    "model.fit",
    "参数",
    "batchSize设置为512"
  ],
  [
    "model.fit",
    "参数",
    "validationData设置为[testXs, testYs]"
  ],
  [
    "model.fit",
    "参数",
    "epochs设置为10"
  ],
  [
    "model.fit",
    "参数",
    "shuffle设置为true"
  ],
  [
    "model.fit",
    "参数",
    "callbacks设置为fitCallbacks"
  ],
  [
    "BATCH_SIZE",
    "值",
    "512"
  ],
  [
    "TRAIN_DATA_SIZE",
    "值",
    "5500"
  ],
  [
    "TEST_DATA_SIZE",
    "值",
    "1000"
  ],
  [
    "MNIST数据集",
    "特点",
    "单个图像的维度为[28,28,1]"
  ],
  [
    "批次大小",
    "优点",
    "对模型的权重产生更一致且变化较小的渐变更新"
  ],
  [
    "批次大小",
    "优点",
    "有助于避免因错误的样本而改向错误的方向"
  ],
  [
    "批次大小",
    "缺点",
    "训练期间需要更多的内存"
  ],
  [
    "批次大小",
    "缺点",
    "导致每个时期的梯度更新数量较少"
  ],
  [
    "package.json",
    "是什么",
    "项目的清单文件"
  ],
  [
    "package.json",
    "用途",
    "用于工具的配置中心"
  ],
  [
    "package.json",
    "用途",
    "存储已安装软件包的名称和版本"
  ],
  [
    "开发依赖",
    "是什么",
    "仅用于开发的程序包"
  ],
  [
    "开发依赖",
    "示例",
    "测试的软件包、webpack或Babel"
  ],
  [
    "开发依赖",
    "特点",
    "在生产环境中不需要"
  ],
  [
    "MNIST数据集",
    "输入",
    "形状为[null, 28, 28, 1]的张量"
  ],
  [
    "MNIST数据集",
    "输出",
    "形状为[null, 10]的张量"
  ],
  [
    "Sequential模型",
    "组成部分",
    "二维卷积层"
  ],
  [
    "Sequential模型",
    "组成部分",
    "最大池化层"
  ],
  [
    "Sequential模型",
    "组成部分",
    "flatten层"
  ],
  [
    "Sequential模型",
    "组成部分",
    "dense层"
  ],
  [
    "二维卷积层",
    "特点",
    "使用滑动滤波器窗口学习空间不变的变换"
  ],
  [
    "二维卷积层",
    "参数",
    "inputShape: [28, 28, 1]"
  ],
  [
    "二维卷积层",
    "参数",
    "kernelSize: 5"
  ],
  [
    "二维卷积层",
    "参数",
    "filters: 8"
  ],
  [
    "二维卷积层",
    "参数",
    "strides: 1"
  ],
  [
    "二维卷积层",
    "参数",
    "activation: 'relu'"
  ],
  [
    "二维卷积层",
    "参数",
    "kernelInitializer: 'varianceScaling'"
  ],
  [
    "最大池化层",
    "特点",
    "通过计算每个滑动窗口的最大值来缩减卷积结果的大小"
  ],
  [
    "最大池化层",
    "参数",
    "poolSize: [2, 2]"
  ],
  [
    "最大池化层",
    "参数",
    "strides: [2, 2]"
  ],
  [
    "flatten层",
    "用途",
    "将前一层的输出平铺到一个向量中"
  ],
  [
    "dense层",
    "用途",
    "执行最终的分类"
  ],
  [
    "dense层",
    "参数",
    "units: 10"
  ],
  [
    "dense层",
    "参数",
    "kernelInitializer: 'varianceScaling'"
  ],
  [
    "dense层",
    "参数",
    "activation: 'softmax'"
  ],
  [
    "Adam优化器",
    "特点",
    "对随机目标函数执行一阶梯度优化的算法"
  ],
  [
    "Adam优化器",
    "特点",
    "基于适应性低阶矩估计"
  ],
  [
    "模型编译",
    "参数",
    "optimizer: Adam"
  ],
  [
    "模型编译",
    "参数",
    "loss: 'categoricalCrossentropy'"
  ],
  [
    "模型编译",
    "参数",
    "metrics: ['accuracy']"
  ],
  [
    "categoricalCrossentropy",
    "用途",
    "度量模型的最后一层产生的概率分布与标签给出的概率分布之间的误差"
  ],
  [
    "准确度",
    "用途",
    "衡量所有预测中正确预测的百分比"
  ],
  [
    "模型评估",
    "用途",
    "评估训练有素的模型的性能"
  ],
  [
    "模型预测",
    "用途",
    "对手写数字的图像进行分类"
  ],
  [
    "doPrediction函数",
    "组成部分",
    "IMAGE_WIDTH, IMAGE_HEIGHT, testData, testxs, labels, preds"
  ],
  [
    "showAccuracy函数",
    "用途",
    "显示每个类别的准确度"
  ],
  [
    "showConfusion函数",
    "用途",
    "显示混淆矩阵"
  ],
  [
    "混淆矩阵",
    "是什么",
    "一种特定的矩阵用来呈现算法性能的可视化效果"
  ],
  [
    "混淆矩阵",
    "用途",
    "用于监督学习，展示多个类别是否有混淆"
  ],
  [
    "混淆矩阵",
    "特点",
    "每一列代表预测值，每一行代表实际的类别"
  ],
  [
    "TensorFlow.js",
    "用途",
    "提供预训练模型用于图像分类、对象检测、姿势估计、文本恶意检测等"
  ],
  [
    "手势识别项目",
    "用途",
    "使用TensorFlow.js识别剪刀、石头、布手势"
  ],
  [
    "手势识别项目",
    "组成部分",
    "数据图像的采集、模型的训练、参数的调整、模型文件生成、网页端部署"
  ],
  [
    "手势识别项目",
    "示例",
    "使用网络摄像头检查自己做出的代表石头剪刀布的手势图像"
  ],
  [
    "VGG",
    "示例",
    "模型文件的一种"
  ],
  [
    "ResNet",
    "示例",
    "模型文件的一种"
  ],
  [
    "预测汽车油耗效率",
    "是",
    "简单的线性回归的实验"
  ],
  [
    "预测汽车油耗效率",
    "用途",
    "预测汽车的油耗效率 MPG"
  ],
  [
    "预测汽车油耗效率",
    "组成部分",
    "加载数据并准备进行训练；定义模型结构；训练模型，并监视其性能；评估模型"
  ],
  [
    "TensorFlow.js",
    "用途",
    "在浏览器中训练模型"
  ],
  [
    "模型",
    "用途",
    "预测汽车油耗（MPG）"
  ],
  [
    "模型",
    "输入",
    "汽车的功率（Horsepower）"
  ],
  [
    "模型",
    "输出",
    "汽车油耗（MPG）"
  ],
  [
    "@tensorflow/tfjs",
    "是",
    "TensorFlow.js 模块"
  ],
  [
    "@tensorflow/tfjs-vis",
    "是",
    "TensorFlow.js 进行浏览器可视化的一组实用工具库"
  ],
  [
    "index.html",
    "包含",
    "加载 @tensorflow/tfjs 和 @tensorflow/tfjs-vis 两个 TFJS 模块的代码"
  ],
  [
    "cdn.jsdelivr.net",
    "用途",
    "将 NPM 模块转换为在线可以引用的免费服务"
  ],
  [
    "HTML 文件",
    "组成部分",
    "头信息"
  ],
  [
    "头信息",
    "包含",
    "加载 @tensorflow/tfjs 和 @tensorflow/tfjs-vis 两个 TFJS 模块的脚本"
  ],
  [
    "TensorFlow.js",
    "用途",
    "提供低级的机器学习构建模块和高级的类似 Keras 的 API 来构建神经网络"
  ],
  [
    "TensorFlow.js",
    "包含",
    "Layers API 和 Core API"
  ],
  [
    "Layers API",
    "用途",
    "使用层构建模型"
  ],
  [
    "Core API",
    "用途",
    "借助低级运算（例如 tf.matMul()、tf.add() 等）创建机器学习模型"
  ],
  [
    "TensorFlow.js",
    "特点",
    "为机器学习提供低级构建模块，以及构建神经网络的高级 Keras Layers API"
  ],
  [
    "张量(Tensor)",
    "是什么",
    "TensorFlow.js 中的中心数据单元，是一维或多维数组"
  ],
  [
    "Tensor",
    "特点",
    "具有 shape 属性定义其数组形状"
  ],
  [
    "tf.tensor",
    "用途",
    "Tensor 的主要构造函数"
  ],
  [
    "TensorFlow.js",
    "是什么",
    "一个用于使用 JavaScript 进行机器学习开发的库，用于在浏览器和 Node.js 训练和部署机器学习模型"
  ],
  [
    "TensorFlow.js",
    "用途",
    "在浏览器和 Node.js 环境中进行机器学习模型的开发、训练和部署"
  ],
  [
    "TensorFlow.js",
    "特点",
    "支持 GPU 硬件加速，可以运行在 Node.js 或浏览器环境中"
  ],
  [
    "TensorFlow.js",
    "组成部分",
    "底层 Core API 和最高级的 Layers API"
  ],
  [
    "TensorFlow.js",
    "优点",
    "开箱即用的开发库，开发者无需花精力去编写基础复杂的数学问题"
  ],
  [
    "TensorFlow.js",
    "优点",
    "由于可运行于浏览器，减少服务器的运算，提高服务器资源利用，增强客户端响应运算结果的速度"
  ],
  [
    "TensorFlow.js",
    "优点",
    "使用语言就是 Javascript，前端工程师不需要学习其他后端语言，降低入门门槛"
  ],
  [
    "TensorFlow.js",
    "优点",
    "由于浏览器的 WebGL 可调用 GPU，所以 Tensorflow.js 会使用 GPU 加速模型的运算，提高运算效率"
  ],
  [
    "TensorFlow.js",
    "优点",
    "Node 和 Python 一样都是使用 C++编写的环境，所以在 Node 环境进行运算的速度目前与 Python 速度不相上下"
  ],
  [
    "TensorFlow.js",
    "优点",
    "Tensorflow.js 的模型可以跟 Python 等其他语言模型进行互转"
  ],
  [
    "TensorFlow.js",
    "优点",
    "浏览器可以很好可视化机器训练过程，同时浏览器可调用设备的摄像头、麦克风等增加机器学习的应用场景，让机器学习跟接近用户"
  ],
  [
    "TensorFlow.js",
    "包含",
    "张量(Tensor)"
  ],
  [
    "TensorFlow.js",
    "包含",
    "变量(Variable)"
  ],
  [
    "TensorFlow.js",
    "包含",
    "操作(Ops)"
  ],
  [
    "TensorFlow.js",
    "包含",
    "模型和层"
  ],
  [
    "TensorFlow.js",
    "包含",
    "内存管理"
  ],
  [
    "张量(Tensor)",
    "是什么",
    "TensorFlow.js 中的中心数据单元，是一维或多维数组"
  ],
  [
    "变量(Variable)",
    "是什么",
    "用张量的值进行初始化，但其值是可变的"
  ],
  [
    "操作(Ops)",
    "是什么",
    "用于操作张量数据的线性代数和机器学习运算"
  ],
  [
    "模型和层",
    "是什么",
    "在 Tensorflow.js 有两种创建模型的方式：可以用高层 API：Layers API 来建立模型，也用 Core API 来搭建相同的模型"
  ],
  [
    "内存管理",
    "是什么",
    "因为 TensorFlow.js 使用了 GPU 来加速数学运算，因此当 tensorflow 处理张量和变量时就有必要来管理 GPU 内存"
  ],
  [
    "TensorFlow.js",
    "用途",
    "预测汽车油耗效率"
  ],
  [
    "TensorFlow.js",
    "用途",
    "手写数字识别"
  ],
  [
    "预测汽车油耗效率",
    "执行步骤",
    "加载数据并准备进行训练；定义模型结构；训练模型，并监视其性能；评估模型"
  ],
  [
    "手写数字识别",
    "执行步骤",
    "从 GitHub 获取源码并运行；创建相关文件；定义模型结构；训练模型；使用模型进行评估与预测"
  ],
  [
    "HTML 文件",
    "间接包含",
    "加载 @tensorflow/tfjs 和 @tensorflow/tfjs-vis 两个 TFJS 模块的脚本"
  ],
  [
    "model.predict()",
    "可能与...相关",
    "predict()"
  ],
  [
    "Webpack",
    "可能与...相关",
    "Parcel"
  ],
  [
    "TensorFlow.js",
    "可能与...相关",
    "TensorFlow.js"
  ],
  [
    "二维卷积层",
    "可能与...相关",
    "dense层"
  ],
  [
    "VGG",
    "可能与...相关",
    "ResNet"
  ],
  [
    "张量(Tensor)",
    "可能与...相关",
    "张量(Tensor)"
  ]
]