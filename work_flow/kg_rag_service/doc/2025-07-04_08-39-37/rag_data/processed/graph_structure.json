{
  "TensorFlow.js": {
    "successors": [
      {
        "target": "TensorFlow 的 JavaScript 版本",
        "relation": "是什么"
      },
      {
        "target": "支持 GPU 硬件加速",
        "relation": "优点"
      },
      {
        "target": "运行在 Node.js 或浏览器环境中",
        "relation": "用途"
      },
      {
        "target": "完全基于 JavaScript 从头开发、训练和部署模型",
        "relation": "用途"
      },
      {
        "target": "运行已有的 Python 版 TensorFlow 模型",
        "relation": "用途"
      },
      {
        "target": "基于现有的模型进行继续训练",
        "relation": "用途"
      },
      {
        "target": "tf.tidy",
        "relation": "包含"
      },
      {
        "target": "使用GPU来加速数学运算",
        "relation": "用途"
      },
      {
        "target": "dispose和tf.tidy两种内存管理方法",
        "relation": "包含"
      },
      {
        "target": "提供低级的机器学习构建模块和高级的类似Keras的API",
        "relation": "特点"
      },
      {
        "target": "构建神经网络",
        "relation": "用途"
      },
      {
        "target": "Layers API和Core API",
        "relation": "包含"
      },
      {
        "target": "张量(Tensor)",
        "relation": "组成部分"
      },
      {
        "target": "提供预训练模型和演示项目",
        "relation": "用途"
      },
      {
        "target": "通过脚本标签（script tags）或从 yarn（或者 NPM）安装并使用 Parcel，WebPack 或 Rollup 等工具构建工程",
        "relation": "包含"
      },
      {
        "target": "在浏览器中加载",
        "relation": "用途"
      },
      {
        "target": "JavaScript 代码",
        "relation": "组成部分"
      },
      {
        "target": "在浏览器中训练模型",
        "relation": "用途"
      },
      {
        "target": "tf.sequential()和tf.model()两种创建模型的方式",
        "relation": "包含"
      },
      {
        "target": "Keras的模型定义方式",
        "relation": "相似"
      },
      {
        "target": "JavaScript 语言版本的扩展",
        "relation": "是"
      },
      {
        "target": "在浏览器环境中实现深度学习的功能",
        "relation": "用途"
      },
      {
        "target": "底层 Core API 和最高级的 Layers API",
        "relation": "包含"
      },
      {
        "target": "在浏览器上开发模型或运行已训练的模型",
        "relation": "用途"
      },
      {
        "target": "开箱即用的开发库，无需编写基础复杂的数学问题",
        "relation": "优点"
      },
      {
        "target": "减少服务器运算，提高服务器资源利用和客户端响应速度",
        "relation": "优点"
      },
      {
        "target": "使用 JavaScript，降低前端工程师入门门槛",
        "relation": "优点"
      },
      {
        "target": "使用 GPU 加速模型运算，提高运算效率",
        "relation": "优点"
      },
      {
        "target": "在 Node 环境运算速度与 Python 不相上下",
        "relation": "优点"
      },
      {
        "target": "模型可以与 Python 等其他语言模型互转",
        "relation": "优点"
      },
      {
        "target": "浏览器可以很好可视化机器训练过程",
        "relation": "优点"
      },
      {
        "target": "浏览器可调用设备的摄像头、麦克风等增加应用场景",
        "relation": "优点"
      },
      {
        "target": "解决JavaScript内存回收问题",
        "relation": "用途"
      }
    ],
    "predecessors": [
      {
        "source": "Tensorflow.js",
        "relation": "可能与...相关"
      }
    ]
  },
  "TensorFlow 的 JavaScript 版本": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow.js",
        "relation": "是什么"
      }
    ]
  },
  "支持 GPU 硬件加速": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow.js",
        "relation": "优点"
      }
    ]
  },
  "运行在 Node.js 或浏览器环境中": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow.js",
        "relation": "用途"
      }
    ]
  },
  "完全基于 JavaScript 从头开发、训练和部署模型": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow.js",
        "relation": "用途"
      }
    ]
  },
  "运行已有的 Python 版 TensorFlow 模型": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow.js",
        "relation": "用途"
      }
    ]
  },
  "基于现有的模型进行继续训练": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow.js",
        "relation": "用途"
      }
    ]
  },
  "tf.tidy": {
    "successors": [
      {
        "target": "清除所有创建的中间张量并释放它们的GPU内存",
        "relation": "用途"
      },
      {
        "target": "不清除内部函数的返回值",
        "relation": "特点"
      },
      {
        "target": "执行一个函数并清除所有创建的中间张量，释放它们的GPU内存",
        "relation": "工作原理"
      },
      {
        "target": "防止应用程序中的内存泄漏",
        "relation": "用途"
      },
      {
        "target": "更谨慎地控制内存何时回收",
        "relation": "用途"
      }
    ],
    "predecessors": [
      {
        "source": "TensorFlow.js",
        "relation": "包含"
      }
    ]
  },
  "清除所有创建的中间张量并释放它们的GPU内存": {
    "successors": [],
    "predecessors": [
      {
        "source": "tf.tidy",
        "relation": "用途"
      }
    ]
  },
  "不清除内部函数的返回值": {
    "successors": [],
    "predecessors": [
      {
        "source": "tf.tidy",
        "relation": "特点"
      }
    ]
  },
  "执行一个函数并清除所有创建的中间张量，释放它们的GPU内存": {
    "successors": [],
    "predecessors": [
      {
        "source": "tf.tidy",
        "relation": "工作原理"
      }
    ]
  },
  "dispose": {
    "successors": [
      {
        "target": "释放张量的GPU内存",
        "relation": "用途"
      },
      {
        "target": "进行大量的张量操作时使用可能会很麻烦",
        "relation": "缺点"
      },
      {
        "target": "清除张量或变量并释放其GPU内存",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "释放张量的GPU内存": {
    "successors": [],
    "predecessors": [
      {
        "source": "dispose",
        "relation": "用途"
      }
    ]
  },
  "进行大量的张量操作时使用可能会很麻烦": {
    "successors": [],
    "predecessors": [
      {
        "source": "dispose",
        "relation": "缺点"
      }
    ]
  },
  "Tensorflow.js": {
    "successors": [
      {
        "target": "Layers API和Core API",
        "relation": "包含"
      },
      {
        "target": "构建和运行机器学习模型",
        "relation": "用途"
      },
      {
        "target": "构建CNN模型",
        "relation": "用途"
      },
      {
        "target": "TensorFlow.js",
        "relation": "可能与...相关"
      }
    ],
    "predecessors": []
  },
  "Layers API和Core API": {
    "successors": [],
    "predecessors": [
      {
        "source": "Tensorflow.js",
        "relation": "包含"
      },
      {
        "source": "TensorFlow.js",
        "relation": "包含"
      }
    ]
  },
  "Layers API": {
    "successors": [
      {
        "target": "sequential模型和functional模型",
        "relation": "包含"
      },
      {
        "target": "使用层构建模型",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "sequential模型和functional模型": {
    "successors": [],
    "predecessors": [
      {
        "source": "Layers API",
        "relation": "包含"
      }
    ]
  },
  "sequential模型": {
    "successors": [
      {
        "target": "将网络的每一层简单的叠在一起",
        "relation": "特点"
      },
      {
        "target": "输入层、隐藏层和输出层",
        "relation": "组成部分"
      }
    ],
    "predecessors": []
  },
  "将网络的每一层简单的叠在一起": {
    "successors": [],
    "predecessors": [
      {
        "source": "sequential模型",
        "relation": "特点"
      }
    ]
  },
  "输入层、隐藏层和输出层": {
    "successors": [],
    "predecessors": [
      {
        "source": "sequential模型",
        "relation": "组成部分"
      }
    ]
  },
  "functional模型": {
    "successors": [
      {
        "target": "可以创建任何非闭环的计算图",
        "relation": "特点"
      },
      {
        "target": "SymbolicTensor和apply()方法",
        "relation": "组成部分"
      }
    ],
    "predecessors": []
  },
  "可以创建任何非闭环的计算图": {
    "successors": [],
    "predecessors": [
      {
        "source": "functional模型",
        "relation": "特点"
      }
    ]
  },
  "SymbolicTensor和apply()方法": {
    "successors": [],
    "predecessors": [
      {
        "source": "functional模型",
        "relation": "组成部分"
      }
    ]
  },
  "Core API": {
    "successors": [
      {
        "target": "提供更多灵活性和控制",
        "relation": "特点"
      },
      {
        "target": "不需要序列化或可以创造自己的序列化方法",
        "relation": "用途"
      },
      {
        "target": "借助低级运算构建模型",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "提供更多灵活性和控制": {
    "successors": [],
    "predecessors": [
      {
        "source": "Core API",
        "relation": "特点"
      }
    ]
  },
  "不需要序列化或可以创造自己的序列化方法": {
    "successors": [],
    "predecessors": [
      {
        "source": "Core API",
        "relation": "用途"
      }
    ]
  },
  "使用GPU来加速数学运算": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow.js",
        "relation": "用途"
      }
    ]
  },
  "dispose和tf.tidy两种内存管理方法": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow.js",
        "relation": "包含"
      }
    ]
  },
  "清除张量或变量并释放其GPU内存": {
    "successors": [],
    "predecessors": [
      {
        "source": "dispose",
        "relation": "用途"
      }
    ]
  },
  "防止应用程序中的内存泄漏": {
    "successors": [],
    "predecessors": [
      {
        "source": "tf.tidy",
        "relation": "用途"
      }
    ]
  },
  "更谨慎地控制内存何时回收": {
    "successors": [],
    "predecessors": [
      {
        "source": "tf.tidy",
        "relation": "用途"
      }
    ]
  },
  "提供低级的机器学习构建模块和高级的类似Keras的API": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow.js",
        "relation": "特点"
      }
    ]
  },
  "构建神经网络": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow.js",
        "relation": "用途"
      }
    ]
  },
  "使用层构建模型": {
    "successors": [],
    "predecessors": [
      {
        "source": "Layers API",
        "relation": "用途"
      }
    ]
  },
  "借助低级运算构建模型": {
    "successors": [],
    "predecessors": [
      {
        "source": "Core API",
        "relation": "用途"
      }
    ]
  },
  "张量(Tensor)": {
    "successors": [
      {
        "target": "TensorFlow.js中的中心数据单元，是一维或多维数组",
        "relation": "是什么"
      },
      {
        "target": "具有shape属性定义数组形状",
        "relation": "特点"
      }
    ],
    "predecessors": [
      {
        "source": "TensorFlow.js",
        "relation": "组成部分"
      }
    ]
  },
  "TensorFlow.js中的中心数据单元，是一维或多维数组": {
    "successors": [],
    "predecessors": [
      {
        "source": "张量(Tensor)",
        "relation": "是什么"
      }
    ]
  },
  "具有shape属性定义数组形状": {
    "successors": [],
    "predecessors": [
      {
        "source": "张量(Tensor)",
        "relation": "特点"
      }
    ]
  },
  "tf.tensor": {
    "successors": [
      {
        "target": "创建Tensor实例",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "创建Tensor实例": {
    "successors": [],
    "predecessors": [
      {
        "source": "tf.tensor",
        "relation": "用途"
      }
    ]
  },
  "package.json": {
    "successors": [
      {
        "target": "项目的清单文件",
        "relation": "是什么"
      },
      {
        "target": "用于工具的配置中心",
        "relation": "用途"
      },
      {
        "target": "存储已安装软件包的名称和版本",
        "relation": "用途"
      },
      {
        "target": "描述构建和运行示例所需的依赖项",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "项目的清单文件": {
    "successors": [],
    "predecessors": [
      {
        "source": "package.json",
        "relation": "是什么"
      }
    ]
  },
  "用于工具的配置中心": {
    "successors": [],
    "predecessors": [
      {
        "source": "package.json",
        "relation": "用途"
      }
    ]
  },
  "存储已安装软件包的名称和版本": {
    "successors": [],
    "predecessors": [
      {
        "source": "package.json",
        "relation": "用途"
      }
    ]
  },
  "开发依赖": {
    "successors": [
      {
        "target": "仅用于开发的程序包",
        "relation": "是什么"
      },
      {
        "target": "测试的软件包、webpack或Babel",
        "relation": "示例"
      },
      {
        "target": "在生产环境中不需要",
        "relation": "特点"
      }
    ],
    "predecessors": []
  },
  "仅用于开发的程序包": {
    "successors": [],
    "predecessors": [
      {
        "source": "开发依赖",
        "relation": "是什么"
      }
    ]
  },
  "测试的软件包、webpack或Babel": {
    "successors": [],
    "predecessors": [
      {
        "source": "开发依赖",
        "relation": "示例"
      }
    ]
  },
  "在生产环境中不需要": {
    "successors": [],
    "predecessors": [
      {
        "source": "开发依赖",
        "relation": "特点"
      }
    ]
  },
  "模型评估": {
    "successors": [
      {
        "target": "评估训练有素的模型的性能",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "评估训练有素的模型的性能": {
    "successors": [],
    "predecessors": [
      {
        "source": "模型评估",
        "relation": "用途"
      }
    ]
  },
  "模型预测": {
    "successors": [
      {
        "target": "对手写数字的图像进行分类",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "对手写数字的图像进行分类": {
    "successors": [],
    "predecessors": [
      {
        "source": "模型预测",
        "relation": "用途"
      }
    ]
  },
  "doPrediction函数": {
    "successors": [
      {
        "target": "IMAGE_WIDTH, IMAGE_HEIGHT, testData, testxs, labels, preds",
        "relation": "组成部分"
      }
    ],
    "predecessors": []
  },
  "IMAGE_WIDTH, IMAGE_HEIGHT, testData, testxs, labels, preds": {
    "successors": [],
    "predecessors": [
      {
        "source": "doPrediction函数",
        "relation": "组成部分"
      }
    ]
  },
  "showAccuracy函数": {
    "successors": [
      {
        "target": "显示每个类别的准确度",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "显示每个类别的准确度": {
    "successors": [],
    "predecessors": [
      {
        "source": "showAccuracy函数",
        "relation": "用途"
      }
    ]
  },
  "showConfusion函数": {
    "successors": [
      {
        "target": "显示混淆矩阵",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "显示混淆矩阵": {
    "successors": [],
    "predecessors": [
      {
        "source": "showConfusion函数",
        "relation": "用途"
      }
    ]
  },
  "混淆矩阵": {
    "successors": [
      {
        "target": "一种特定的矩阵用来呈现算法性能的可视化效果",
        "relation": "是什么"
      },
      {
        "target": "用于监督学习",
        "relation": "用途"
      },
      {
        "target": "每一列代表预测值，每一行代表实际的类别",
        "relation": "特点"
      }
    ],
    "predecessors": []
  },
  "一种特定的矩阵用来呈现算法性能的可视化效果": {
    "successors": [],
    "predecessors": [
      {
        "source": "混淆矩阵",
        "relation": "是什么"
      }
    ]
  },
  "用于监督学习": {
    "successors": [],
    "predecessors": [
      {
        "source": "混淆矩阵",
        "relation": "用途"
      }
    ]
  },
  "每一列代表预测值，每一行代表实际的类别": {
    "successors": [],
    "predecessors": [
      {
        "source": "混淆矩阵",
        "relation": "特点"
      }
    ]
  },
  "提供预训练模型和演示项目": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow.js",
        "relation": "用途"
      }
    ]
  },
  "图像分类": {
    "successors": [
      {
        "target": "剪刀石头布手势识别",
        "relation": "示例"
      }
    ],
    "predecessors": []
  },
  "剪刀石头布手势识别": {
    "successors": [
      {
        "target": "数据图像的采集、模型的训练、参数的调整、模型文件生成、网页端部署、网络摄像头检查",
        "relation": "步骤"
      }
    ],
    "predecessors": [
      {
        "source": "图像分类",
        "relation": "示例"
      }
    ]
  },
  "数据图像的采集、模型的训练、参数的调整、模型文件生成、网页端部署、网络摄像头检查": {
    "successors": [],
    "predecessors": [
      {
        "source": "剪刀石头布手势识别",
        "relation": "步骤"
      }
    ]
  },
  "通过脚本标签（script tags）或从 yarn（或者 NPM）安装并使用 Parcel，WebPack 或 Rollup 等工具构建工程": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow.js",
        "relation": "包含"
      }
    ]
  },
  "在浏览器中加载": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow.js",
        "relation": "用途"
      }
    ]
  },
  "JavaScript 代码": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow.js",
        "relation": "组成部分"
      }
    ]
  },
  "HTML": {
    "successors": [
      {
        "target": "直接引用 TensorFlow.js 发布的 NPM 包中已经打包安装好的 JavaScript 代码",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "直接引用 TensorFlow.js 发布的 NPM 包中已经打包安装好的 JavaScript 代码": {
    "successors": [],
    "predecessors": [
      {
        "source": "HTML",
        "relation": "用途"
      }
    ]
  },
  "预测汽车油耗效率": {
    "successors": [
      {
        "target": "简单的线性回归的实验",
        "relation": "是"
      },
      {
        "target": "预测汽车的油耗效率 MPG",
        "relation": "用途"
      },
      {
        "target": "加载数据并准备进行训练, 定义模型结构, 训练模型并监视其性能, 评估模型",
        "relation": "组成部分"
      }
    ],
    "predecessors": []
  },
  "简单的线性回归的实验": {
    "successors": [],
    "predecessors": [
      {
        "source": "预测汽车油耗效率",
        "relation": "是"
      }
    ]
  },
  "预测汽车的油耗效率 MPG": {
    "successors": [],
    "predecessors": [
      {
        "source": "预测汽车油耗效率",
        "relation": "用途"
      }
    ]
  },
  "加载数据并准备进行训练, 定义模型结构, 训练模型并监视其性能, 评估模型": {
    "successors": [],
    "predecessors": [
      {
        "source": "预测汽车油耗效率",
        "relation": "组成部分"
      }
    ]
  },
  "在浏览器中训练模型": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow.js",
        "relation": "用途"
      }
    ]
  },
  "模型": {
    "successors": [
      {
        "target": "预测汽车油耗（MPG）",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "预测汽车油耗（MPG）": {
    "successors": [],
    "predecessors": [
      {
        "source": "模型",
        "relation": "用途"
      }
    ]
  },
  "汽车功率（Horsepower）": {
    "successors": [
      {
        "target": "模型的输入特征",
        "relation": "是"
      }
    ],
    "predecessors": []
  },
  "模型的输入特征": {
    "successors": [],
    "predecessors": [
      {
        "source": "汽车功率（Horsepower）",
        "relation": "是"
      }
    ]
  },
  "汽车油耗（MPG）": {
    "successors": [
      {
        "target": "模型的预测目标",
        "relation": "是"
      }
    ],
    "predecessors": []
  },
  "模型的预测目标": {
    "successors": [],
    "predecessors": [
      {
        "source": "汽车油耗（MPG）",
        "relation": "是"
      }
    ]
  },
  "2.0.0": {
    "successors": [
      {
        "target": "has unmet peer dependency \"seedrandom@~",
        "relation": "缺点"
      }
    ],
    "predecessors": []
  },
  "has unmet peer dependency \"seedrandom@~": {
    "successors": [],
    "predecessors": [
      {
        "source": "2.0.0",
        "relation": "缺点"
      }
    ]
  },
  "tf.sequential()和tf.model()两种创建模型的方式": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow.js",
        "relation": "包含"
      }
    ]
  },
  "tf.sequential()": {
    "successors": [
      {
        "target": "线性堆叠layers的模型",
        "relation": "特点"
      }
    ],
    "predecessors": []
  },
  "线性堆叠layers的模型": {
    "successors": [],
    "predecessors": [
      {
        "source": "tf.sequential()",
        "relation": "特点"
      }
    ]
  },
  "tf.model()": {
    "successors": [
      {
        "target": "定义的神经元网络层与层之间的关系较为随意",
        "relation": "特点"
      }
    ],
    "predecessors": []
  },
  "定义的神经元网络层与层之间的关系较为随意": {
    "successors": [],
    "predecessors": [
      {
        "source": "tf.model()",
        "relation": "特点"
      }
    ]
  },
  "Keras的模型定义方式": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow.js",
        "relation": "相似"
      }
    ]
  },
  "createModel()": {
    "successors": [
      {
        "target": "tf.sequential()对象、输入层和输出层",
        "relation": "组成部分"
      }
    ],
    "predecessors": []
  },
  "tf.sequential()对象、输入层和输出层": {
    "successors": [],
    "predecessors": [
      {
        "source": "createModel()",
        "relation": "组成部分"
      }
    ]
  },
  "输入层": {
    "successors": [
      {
        "target": "inputShape为[1]，units为1，useBias为true",
        "relation": "特点"
      }
    ],
    "predecessors": []
  },
  "inputShape为[1]，units为1，useBias为true": {
    "successors": [],
    "predecessors": [
      {
        "source": "输入层",
        "relation": "特点"
      }
    ]
  },
  "输出层": {
    "successors": [
      {
        "target": "units为1，useBias为true",
        "relation": "特点"
      },
      {
        "target": "5个节点",
        "relation": "组成部分"
      }
    ],
    "predecessors": []
  },
  "units为1，useBias为true": {
    "successors": [],
    "predecessors": [
      {
        "source": "输出层",
        "relation": "特点"
      }
    ]
  },
  "全连接网络": {
    "successors": [
      {
        "target": "处理简单的数据",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "处理简单的数据": {
    "successors": [],
    "predecessors": [
      {
        "source": "全连接网络",
        "relation": "用途"
      }
    ]
  },
  "useBias": {
    "successors": [
      {
        "target": "神经元权重计算中的偏置量",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "神经元权重计算中的偏置量": {
    "successors": [],
    "predecessors": [
      {
        "source": "useBias",
        "relation": "用途"
      }
    ]
  },
  "tfvis.show.modelSummary": {
    "successors": [
      {
        "target": "将模型显示在浏览器中",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "将模型显示在浏览器中": {
    "successors": [],
    "predecessors": [
      {
        "source": "tfvis.show.modelSummary",
        "relation": "用途"
      }
    ]
  },
  "MNIST数据集": {
    "successors": [
      {
        "target": "形状为[null, 28, 28, 1]的张量",
        "relation": "输入"
      },
      {
        "target": "形状为[null, 10]的张量",
        "relation": "输出"
      },
      {
        "target": "单个图像的维度为[28,28,1]",
        "relation": "特点"
      }
    ],
    "predecessors": []
  },
  "形状为[null, 28, 28, 1]的张量": {
    "successors": [],
    "predecessors": [
      {
        "source": "MNIST数据集",
        "relation": "输入"
      }
    ]
  },
  "形状为[null, 10]的张量": {
    "successors": [],
    "predecessors": [
      {
        "source": "MNIST数据集",
        "relation": "输出"
      }
    ]
  },
  "卷积图像分类模型": {
    "successors": [
      {
        "target": "Sequential模型",
        "relation": "基于"
      }
    ],
    "predecessors": []
  },
  "Sequential模型": {
    "successors": [
      {
        "target": "张量连续地从一层传递到下一层",
        "relation": "特点"
      }
    ],
    "predecessors": [
      {
        "source": "卷积图像分类模型",
        "relation": "基于"
      }
    ]
  },
  "张量连续地从一层传递到下一层": {
    "successors": [],
    "predecessors": [
      {
        "source": "Sequential模型",
        "relation": "特点"
      }
    ]
  },
  "二维卷积层": {
    "successors": [
      {
        "target": "学习空间不变的变换",
        "relation": "用途"
      },
      {
        "target": "inputShape, kernelSize, filters, strides, activation, kernelInitializer",
        "relation": "组成部分"
      }
    ],
    "predecessors": []
  },
  "学习空间不变的变换": {
    "successors": [],
    "predecessors": [
      {
        "source": "二维卷积层",
        "relation": "用途"
      }
    ]
  },
  "inputShape, kernelSize, filters, strides, activation, kernelInitializer": {
    "successors": [],
    "predecessors": [
      {
        "source": "二维卷积层",
        "relation": "组成部分"
      }
    ]
  },
  "inputShape": {
    "successors": [
      {
        "target": "流入模型第一层的数据的形状",
        "relation": "定义"
      }
    ],
    "predecessors": []
  },
  "流入模型第一层的数据的形状": {
    "successors": [],
    "predecessors": [
      {
        "source": "inputShape",
        "relation": "定义"
      }
    ]
  },
  "kernelSize": {
    "successors": [
      {
        "target": "应用于输入数据的滑动卷积滤波器窗口的大小",
        "relation": "定义"
      }
    ],
    "predecessors": []
  },
  "应用于输入数据的滑动卷积滤波器窗口的大小": {
    "successors": [],
    "predecessors": [
      {
        "source": "kernelSize",
        "relation": "定义"
      }
    ]
  },
  "filters": {
    "successors": [
      {
        "target": "应用于输入数据的滤波器窗口的数量",
        "relation": "定义"
      }
    ],
    "predecessors": []
  },
  "应用于输入数据的滤波器窗口的数量": {
    "successors": [],
    "predecessors": [
      {
        "source": "filters",
        "relation": "定义"
      }
    ]
  },
  "strides": {
    "successors": [
      {
        "target": "滑动窗口的步长",
        "relation": "定义"
      },
      {
        "target": "strides",
        "relation": "可能与...相关"
      }
    ],
    "predecessors": [
      {
        "source": "strides",
        "relation": "可能与...相关"
      }
    ]
  },
  "滑动窗口的步长": {
    "successors": [],
    "predecessors": [
      {
        "source": "strides",
        "relation": "定义"
      }
    ]
  },
  "activation": {
    "successors": [
      {
        "target": "卷积完成后应用于数据的激活函数",
        "relation": "定义"
      }
    ],
    "predecessors": []
  },
  "卷积完成后应用于数据的激活函数": {
    "successors": [],
    "predecessors": [
      {
        "source": "activation",
        "relation": "定义"
      }
    ]
  },
  "kernelInitializer": {
    "successors": [
      {
        "target": "用于随机初始化模型权重的方法",
        "relation": "定义"
      }
    ],
    "predecessors": []
  },
  "用于随机初始化模型权重的方法": {
    "successors": [],
    "predecessors": [
      {
        "source": "kernelInitializer",
        "relation": "定义"
      }
    ]
  },
  "最大池化层": {
    "successors": [
      {
        "target": "缩减卷积结果的大小",
        "relation": "用途"
      },
      {
        "target": "poolSize, strides",
        "relation": "组成部分"
      },
      {
        "target": "降低卷积层对位置的敏感",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "缩减卷积结果的大小": {
    "successors": [],
    "predecessors": [
      {
        "source": "最大池化层",
        "relation": "用途"
      }
    ]
  },
  "poolSize, strides": {
    "successors": [],
    "predecessors": [
      {
        "source": "最大池化层",
        "relation": "组成部分"
      }
    ]
  },
  "poolSize": {
    "successors": [
      {
        "target": "应用于输入数据的滑动窗口大小",
        "relation": "定义"
      }
    ],
    "predecessors": []
  },
  "应用于输入数据的滑动窗口大小": {
    "successors": [],
    "predecessors": [
      {
        "source": "poolSize",
        "relation": "定义"
      }
    ]
  },
  "flatten层": {
    "successors": [
      {
        "target": "将前一层的输出平铺到一个向量中",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "将前一层的输出平铺到一个向量中": {
    "successors": [],
    "predecessors": [
      {
        "source": "flatten层",
        "relation": "用途"
      }
    ]
  },
  "dense层": {
    "successors": [
      {
        "target": "执行最终的分类",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "执行最终的分类": {
    "successors": [],
    "predecessors": [
      {
        "source": "dense层",
        "relation": "用途"
      }
    ]
  },
  "Adam优化器": {
    "successors": [
      {
        "target": "对随机目标函数执行一阶梯度优化的算法",
        "relation": "特点"
      },
      {
        "target": "适应性低阶矩估计",
        "relation": "基于"
      }
    ],
    "predecessors": [
      {
        "source": "model.compile",
        "relation": "组成部分"
      }
    ]
  },
  "对随机目标函数执行一阶梯度优化的算法": {
    "successors": [],
    "predecessors": [
      {
        "source": "Adam优化器",
        "relation": "特点"
      }
    ]
  },
  "适应性低阶矩估计": {
    "successors": [],
    "predecessors": [
      {
        "source": "Adam优化器",
        "relation": "基于"
      }
    ]
  },
  "交叉熵损失函数": {
    "successors": [
      {
        "target": "优化分类任务",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "优化分类任务": {
    "successors": [],
    "predecessors": [
      {
        "source": "交叉熵损失函数",
        "relation": "用途"
      }
    ]
  },
  "准确度": {
    "successors": [
      {
        "target": "衡量所有预测中正确预测的百分比",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "衡量所有预测中正确预测的百分比": {
    "successors": [],
    "predecessors": [
      {
        "source": "准确度",
        "relation": "用途"
      }
    ]
  },
  "index.html": {
    "successors": [
      {
        "target": "<!DOCTYPE html> <html> <head> <meta charset=\"utf-8\"> <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">",
        "relation": "组成部分"
      },
      {
        "target": "用于构建网页的HTML文件",
        "relation": "用途"
      },
      {
        "target": "页面的基本结构，包含div标签、UI元素和JavaScript代码",
        "relation": "组成部分"
      },
      {
        "target": "<html> <body> <h4>TFJS example<hr/></h4> <div id=\"micro-out-div\">TensorFlow.js Test</div> <script src=\"./index.js\"> </script> </body> </html>",
        "relation": "包含"
      },
      {
        "target": "通过 script 标签引入 index.js",
        "relation": "用途"
      },
      {
        "target": "加载 @tensorflow/tfjs 和 @tensorflow/tfjs-vis 两个 TFJS 模块的代码",
        "relation": "包含"
      }
    ],
    "predecessors": []
  },
  "<!DOCTYPE html> <html> <head> <meta charset=\"utf-8\"> <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">": {
    "successors": [],
    "predecessors": [
      {
        "source": "index.html",
        "relation": "组成部分"
      }
    ]
  },
  "用于构建网页的HTML文件": {
    "successors": [],
    "predecessors": [
      {
        "source": "index.html",
        "relation": "用途"
      }
    ]
  },
  "index.js": {
    "successors": [
      {
        "target": "用于编写JavaScript代码的文件",
        "relation": "用途"
      },
      {
        "target": "加载数据，定义模型，训练循环并指定UI元素",
        "relation": "用途"
      },
      {
        "target": "写一段简单的测试代码",
        "relation": "用途"
      },
      {
        "target": "import * as tf from '@tensorflow/tfjs' console.log(tf.version.tfjs) const shape = [2, 3]; // 2 rows, 3 columns const a = tf.tensor",
        "relation": "包含"
      },
      {
        "target": "TensorFlow.js 库的导入和版本打印",
        "relation": "组成部分"
      },
      {
        "target": "创建形状为[2,3]的张量",
        "relation": "组成部分"
      },
      {
        "target": "train函数",
        "relation": "包含"
      }
    ],
    "predecessors": []
  },
  "用于编写JavaScript代码的文件": {
    "successors": [],
    "predecessors": [
      {
        "source": "index.js",
        "relation": "用途"
      }
    ]
  },
  "data.js": {
    "successors": [
      {
        "target": "用于存储数据的JavaScript文件",
        "relation": "用途"
      },
      {
        "target": "下载和访问mnist数据集",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "用于存储数据的JavaScript文件": {
    "successors": [],
    "predecessors": [
      {
        "source": "data.js",
        "relation": "用途"
      }
    ]
  },
  "tfjs-examples/mnist": {
    "successors": [
      {
        "target": "data.js文件",
        "relation": "包含"
      }
    ],
    "predecessors": []
  },
  "data.js文件": {
    "successors": [],
    "predecessors": [
      {
        "source": "tfjs-examples/mnist",
        "relation": "包含"
      }
    ]
  },
  "MnistData": {
    "successors": [
      {
        "target": "从 MNIST 数据集中随机批量提取 MNIST 图像",
        "relation": "用途"
      },
      {
        "target": "训练数据和测试数据",
        "relation": "包含"
      },
      {
        "target": "nextTrainBatch 和 nextTestBatch 方法",
        "relation": "组成部分"
      }
    ],
    "predecessors": []
  },
  "从 MNIST 数据集中随机批量提取 MNIST 图像": {
    "successors": [],
    "predecessors": [
      {
        "source": "MnistData",
        "relation": "用途"
      }
    ]
  },
  "训练数据和测试数据": {
    "successors": [],
    "predecessors": [
      {
        "source": "MnistData",
        "relation": "包含"
      }
    ]
  },
  "nextTrainBatch 和 nextTestBatch 方法": {
    "successors": [],
    "predecessors": [
      {
        "source": "MnistData",
        "relation": "组成部分"
      }
    ]
  },
  "nextTrainBatch": {
    "successors": [
      {
        "target": "从训练集中返回一批随机图像及其标签",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "从训练集中返回一批随机图像及其标签": {
    "successors": [],
    "predecessors": [
      {
        "source": "nextTrainBatch",
        "relation": "用途"
      }
    ]
  },
  "nextTestBatch": {
    "successors": [
      {
        "target": "从测试集中返回一批图像及其标签",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "从测试集中返回一批图像及其标签": {
    "successors": [],
    "predecessors": [
      {
        "source": "nextTestBatch",
        "relation": "用途"
      }
    ]
  },
  "训练数据": {
    "successors": [
      {
        "target": "训练模型",
        "relation": "用途"
      },
      {
        "target": "train函数",
        "relation": "可能与...相关"
      }
    ],
    "predecessors": []
  },
  "训练模型": {
    "successors": [
      {
        "target": "定义模型的拓扑结构",
        "relation": "步骤"
      },
      {
        "target": "训练并评估训练的结果",
        "relation": "步骤"
      }
    ],
    "predecessors": [
      {
        "source": "训练数据",
        "relation": "用途"
      },
      {
        "source": "train函数",
        "relation": "用途"
      },
      {
        "source": "model.fit",
        "relation": "用途"
      }
    ]
  },
  "测试数据": {
    "successors": [
      {
        "target": "检查模型对新数据的泛化情况",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "检查模型对新数据的泛化情况": {
    "successors": [],
    "predecessors": [
      {
        "source": "测试数据",
        "relation": "用途"
      }
    ]
  },
  "MNIST 分类器": {
    "successors": [
      {
        "target": "预测不受图像顺序的影响",
        "relation": "特点"
      }
    ],
    "predecessors": []
  },
  "预测不受图像顺序的影响": {
    "successors": [],
    "predecessors": [
      {
        "source": "MNIST 分类器",
        "relation": "特点"
      }
    ]
  },
  "Web Server for Chrome": {
    "successors": [
      {
        "target": "解决跨域问题",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "解决跨域问题": {
    "successors": [],
    "predecessors": [
      {
        "source": "Web Server for Chrome",
        "relation": "用途"
      }
    ]
  },
  "model.fit()": {
    "successors": [
      {
        "target": "用于训练模型",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "用于训练模型": {
    "successors": [],
    "predecessors": [
      {
        "source": "model.fit()",
        "relation": "用途"
      }
    ]
  },
  "model.predict()": {
    "successors": [
      {
        "target": "用于预测",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "用于预测": {
    "successors": [],
    "predecessors": [
      {
        "source": "model.predict()",
        "relation": "用途"
      }
    ]
  },
  "TensorFLow-vis": {
    "successors": [
      {
        "target": "可视化模型训练的过程和结果",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "可视化模型训练的过程和结果": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFLow-vis",
        "relation": "用途"
      }
    ]
  },
  "回调函数": {
    "successors": [
      {
        "target": "动态显示训练的过程",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "动态显示训练的过程": {
    "successors": [],
    "predecessors": [
      {
        "source": "回调函数",
        "relation": "用途"
      }
    ]
  },
  "tf.train.adam()": {
    "successors": [
      {
        "target": "作为模型优化算法",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "作为模型优化算法": {
    "successors": [],
    "predecessors": [
      {
        "source": "tf.train.adam()",
        "relation": "用途"
      }
    ]
  },
  "tf.losses.meanSquaredError": {
    "successors": [
      {
        "target": "作为判断训练结果的参数",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "作为判断训练结果的参数": {
    "successors": [],
    "predecessors": [
      {
        "source": "tf.losses.meanSquaredError",
        "relation": "用途"
      }
    ]
  },
  "batchSize": {
    "successors": [
      {
        "target": "设置为32，表示一次采样32条训练数据",
        "relation": "特点"
      }
    ],
    "predecessors": []
  },
  "设置为32，表示一次采样32条训练数据": {
    "successors": [],
    "predecessors": [
      {
        "source": "batchSize",
        "relation": "特点"
      }
    ]
  },
  "epochs": {
    "successors": [
      {
        "target": "设置为50，表示遍历所有样本50次",
        "relation": "特点"
      }
    ],
    "predecessors": []
  },
  "设置为50，表示遍历所有样本50次": {
    "successors": [],
    "predecessors": [
      {
        "source": "epochs",
        "relation": "特点"
      }
    ]
  },
  "shuffle": {
    "successors": [
      {
        "target": "设置为true，表示打乱数据集",
        "relation": "特点"
      }
    ],
    "predecessors": []
  },
  "设置为true，表示打乱数据集": {
    "successors": [],
    "predecessors": [
      {
        "source": "shuffle",
        "relation": "特点"
      }
    ]
  },
  "callback": {
    "successors": [
      {
        "target": "在每一个训练周期显示训练情况",
        "relation": "特点"
      }
    ],
    "predecessors": []
  },
  "在每一个训练周期显示训练情况": {
    "successors": [],
    "predecessors": [
      {
        "source": "callback",
        "relation": "特点"
      }
    ]
  },
  "tf.linspace()": {
    "successors": [
      {
        "target": "创建0~1之间平均分配的100个值",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "创建0~1之间平均分配的100个值": {
    "successors": [],
    "predecessors": [
      {
        "source": "tf.linspace()",
        "relation": "用途"
      }
    ]
  },
  "predict()": {
    "successors": [
      {
        "target": "预测",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "预测": {
    "successors": [],
    "predecessors": [
      {
        "source": "predict()",
        "relation": "用途"
      }
    ]
  },
  "tfvis.render.scatterplot": {
    "successors": [
      {
        "target": "可视化模型预测结果和原始数据",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "可视化模型预测结果和原始数据": {
    "successors": [],
    "predecessors": [
      {
        "source": "tfvis.render.scatterplot",
        "relation": "用途"
      }
    ]
  },
  "构建和运行机器学习模型": {
    "successors": [],
    "predecessors": [
      {
        "source": "Tensorflow.js",
        "relation": "用途"
      }
    ]
  },
  "mnist项目": {
    "successors": [
      {
        "target": "HTML文件、JS文件和配置文件",
        "relation": "包含"
      }
    ],
    "predecessors": []
  },
  "HTML文件、JS文件和配置文件": {
    "successors": [],
    "predecessors": [
      {
        "source": "mnist项目",
        "relation": "包含"
      }
    ]
  },
  "页面的基本结构，包含div标签、UI元素和JavaScript代码": {
    "successors": [],
    "predecessors": [
      {
        "source": "index.html",
        "relation": "组成部分"
      }
    ]
  },
  "加载数据，定义模型，训练循环并指定UI元素": {
    "successors": [],
    "predecessors": [
      {
        "source": "index.js",
        "relation": "用途"
      }
    ]
  },
  "下载和访问mnist数据集": {
    "successors": [],
    "predecessors": [
      {
        "source": "data.js",
        "relation": "用途"
      }
    ]
  },
  "ui.js": {
    "successors": [
      {
        "target": "更新可视化元素",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "更新可视化元素": {
    "successors": [],
    "predecessors": [
      {
        "source": "ui.js",
        "relation": "用途"
      }
    ]
  },
  "描述构建和运行示例所需的依赖项": {
    "successors": [],
    "predecessors": [
      {
        "source": "package.json",
        "relation": "用途"
      }
    ]
  },
  "yarn": {
    "successors": [
      {
        "target": "构建和运行mnist代码",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "构建和运行mnist代码": {
    "successors": [],
    "predecessors": [
      {
        "source": "yarn",
        "relation": "用途"
      }
    ]
  },
  "Webpack": {
    "successors": [
      {
        "target": "构建工具用于编写更大的程序",
        "relation": "用途"
      },
      {
        "target": "Parcel",
        "relation": "可能与...相关"
      }
    ],
    "predecessors": []
  },
  "构建工具用于编写更大的程序": {
    "successors": [],
    "predecessors": [
      {
        "source": "Webpack",
        "relation": "用途"
      },
      {
        "source": "Parcel",
        "relation": "用途"
      }
    ]
  },
  "Parcel": {
    "successors": [
      {
        "target": "构建工具用于编写更大的程序",
        "relation": "用途"
      }
    ],
    "predecessors": [
      {
        "source": "Webpack",
        "relation": "可能与...相关"
      }
    ]
  },
  "<html> <body> <h4>TFJS example<hr/></h4> <div id=\"micro-out-div\">TensorFlow.js Test</div> <script src=\"./index.js\"> </script> </body> </html>": {
    "successors": [],
    "predecessors": [
      {
        "source": "index.html",
        "relation": "包含"
      }
    ]
  },
  "通过 script 标签引入 index.js": {
    "successors": [],
    "predecessors": [
      {
        "source": "index.html",
        "relation": "用途"
      }
    ]
  },
  "写一段简单的测试代码": {
    "successors": [],
    "predecessors": [
      {
        "source": "index.js",
        "relation": "用途"
      }
    ]
  },
  "import * as tf from '@tensorflow/tfjs' console.log(tf.version.tfjs) const shape = [2, 3]; // 2 rows, 3 columns const a = tf.tensor": {
    "successors": [],
    "predecessors": [
      {
        "source": "index.js",
        "relation": "包含"
      }
    ]
  },
  "TensorFlow.js 库的导入和版本打印": {
    "successors": [],
    "predecessors": [
      {
        "source": "index.js",
        "relation": "组成部分"
      }
    ]
  },
  "创建形状为[2,3]的张量": {
    "successors": [],
    "predecessors": [
      {
        "source": "index.js",
        "relation": "组成部分"
      }
    ]
  },
  "JavaScript 语言版本的扩展": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow.js",
        "relation": "是"
      }
    ]
  },
  "在浏览器环境中实现深度学习的功能": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow.js",
        "relation": "用途"
      }
    ]
  },
  "DeepLearning.js": {
    "successors": [
      {
        "target": "基于 WebGL 加速的开放源代码 JavaScript 机器学习库",
        "relation": "是"
      },
      {
        "target": "可以直接在浏览器中运行，无需安装或借助后端",
        "relation": "特点"
      },
      {
        "target": "通过 WebGL 在 GPU 上执行计算大幅提高速度",
        "relation": "优点"
      },
      {
        "target": "能够执行完整全面的反向传播",
        "relation": "优点"
      }
    ],
    "predecessors": []
  },
  "基于 WebGL 加速的开放源代码 JavaScript 机器学习库": {
    "successors": [],
    "predecessors": [
      {
        "source": "DeepLearning.js",
        "relation": "是"
      }
    ]
  },
  "可以直接在浏览器中运行，无需安装或借助后端": {
    "successors": [],
    "predecessors": [
      {
        "source": "DeepLearning.js",
        "relation": "特点"
      }
    ]
  },
  "通过 WebGL 在 GPU 上执行计算大幅提高速度": {
    "successors": [],
    "predecessors": [
      {
        "source": "DeepLearning.js",
        "relation": "优点"
      }
    ]
  },
  "能够执行完整全面的反向传播": {
    "successors": [],
    "predecessors": [
      {
        "source": "DeepLearning.js",
        "relation": "优点"
      }
    ]
  },
  "底层 Core API 和最高级的 Layers API": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow.js",
        "relation": "包含"
      }
    ]
  },
  "在浏览器上开发模型或运行已训练的模型": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow.js",
        "relation": "用途"
      }
    ]
  },
  "开箱即用的开发库，无需编写基础复杂的数学问题": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow.js",
        "relation": "优点"
      }
    ]
  },
  "减少服务器运算，提高服务器资源利用和客户端响应速度": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow.js",
        "relation": "优点"
      }
    ]
  },
  "使用 JavaScript，降低前端工程师入门门槛": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow.js",
        "relation": "优点"
      }
    ]
  },
  "使用 GPU 加速模型运算，提高运算效率": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow.js",
        "relation": "优点"
      }
    ]
  },
  "在 Node 环境运算速度与 Python 不相上下": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow.js",
        "relation": "优点"
      }
    ]
  },
  "模型可以与 Python 等其他语言模型互转": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow.js",
        "relation": "优点"
      }
    ]
  },
  "浏览器可以很好可视化机器训练过程": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow.js",
        "relation": "优点"
      }
    ]
  },
  "浏览器可调用设备的摄像头、麦克风等增加应用场景": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow.js",
        "relation": "优点"
      }
    ]
  },
  "@tensorflow/tfjs": {
    "successors": [
      {
        "target": "TensorFlow.js 模块",
        "relation": "是"
      }
    ],
    "predecessors": []
  },
  "TensorFlow.js 模块": {
    "successors": [],
    "predecessors": [
      {
        "source": "@tensorflow/tfjs",
        "relation": "是"
      }
    ]
  },
  "@tensorflow/tfjs-vis": {
    "successors": [
      {
        "target": "TensorFlow.js 进行浏览器可视化的一组实用工具库",
        "relation": "是"
      }
    ],
    "predecessors": []
  },
  "TensorFlow.js 进行浏览器可视化的一组实用工具库": {
    "successors": [],
    "predecessors": [
      {
        "source": "@tensorflow/tfjs-vis",
        "relation": "是"
      }
    ]
  },
  "加载 @tensorflow/tfjs 和 @tensorflow/tfjs-vis 两个 TFJS 模块的代码": {
    "successors": [],
    "predecessors": [
      {
        "source": "index.html",
        "relation": "包含"
      }
    ]
  },
  "cdn.jsdelivr.net": {
    "successors": [
      {
        "target": "将 NPM 模块转换为在线可以引用的免费服务",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "将 NPM 模块转换为在线可以引用的免费服务": {
    "successors": [],
    "predecessors": [
      {
        "source": "cdn.jsdelivr.net",
        "relation": "用途"
      }
    ]
  },
  "HTML 文件": {
    "successors": [
      {
        "target": "头信息",
        "relation": "组成部分"
      },
      {
        "target": "加载 @tensorflow/tfjs 和 @tensorflow/tfjs-vis 两个 TFJS 模块的脚本",
        "relation": "间接包含"
      }
    ],
    "predecessors": []
  },
  "头信息": {
    "successors": [
      {
        "target": "加载 @tensorflow/tfjs 和 @tensorflow/tfjs-vis 两个 TFJS 模块的脚本",
        "relation": "包含"
      }
    ],
    "predecessors": [
      {
        "source": "HTML 文件",
        "relation": "组成部分"
      }
    ]
  },
  "加载 @tensorflow/tfjs 和 @tensorflow/tfjs-vis 两个 TFJS 模块的脚本": {
    "successors": [],
    "predecessors": [
      {
        "source": "头信息",
        "relation": "包含"
      },
      {
        "source": "HTML 文件",
        "relation": "间接包含"
      }
    ]
  },
  "CNN": {
    "successors": [
      {
        "target": "识别手写数字",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "识别手写数字": {
    "successors": [],
    "predecessors": [
      {
        "source": "CNN",
        "relation": "用途"
      }
    ]
  },
  "构建CNN模型": {
    "successors": [],
    "predecessors": [
      {
        "source": "Tensorflow.js",
        "relation": "用途"
      }
    ]
  },
  "手写数字识别": {
    "successors": [
      {
        "target": "训练分类器",
        "relation": "步骤"
      },
      {
        "target": "评估分类器的准确性",
        "relation": "步骤"
      }
    ],
    "predecessors": []
  },
  "训练分类器": {
    "successors": [],
    "predecessors": [
      {
        "source": "手写数字识别",
        "relation": "步骤"
      }
    ]
  },
  "评估分类器的准确性": {
    "successors": [],
    "predecessors": [
      {
        "source": "手写数字识别",
        "relation": "步骤"
      }
    ]
  },
  "分类器": {
    "successors": [
      {
        "target": "查看图像及其标签",
        "relation": "用途"
      },
      {
        "target": "评估准确性",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "查看图像及其标签": {
    "successors": [],
    "predecessors": [
      {
        "source": "分类器",
        "relation": "用途"
      }
    ]
  },
  "评估准确性": {
    "successors": [],
    "predecessors": [
      {
        "source": "分类器",
        "relation": "用途"
      }
    ]
  },
  "数据预处理": {
    "successors": [
      {
        "target": "数据规范化和转换为张量类型",
        "relation": "包含"
      }
    ],
    "predecessors": []
  },
  "数据规范化和转换为张量类型": {
    "successors": [],
    "predecessors": [
      {
        "source": "数据预处理",
        "relation": "包含"
      }
    ]
  },
  "JavaScript": {
    "successors": [
      {
        "target": "在大规模数据处理上不如Python高效",
        "relation": "缺点"
      },
      {
        "target": "内存回收问题突出",
        "relation": "缺点"
      }
    ],
    "predecessors": []
  },
  "在大规模数据处理上不如Python高效": {
    "successors": [],
    "predecessors": [
      {
        "source": "JavaScript",
        "relation": "缺点"
      }
    ]
  },
  "内存回收问题突出": {
    "successors": [],
    "predecessors": [
      {
        "source": "JavaScript",
        "relation": "缺点"
      }
    ]
  },
  "解决JavaScript内存回收问题": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow.js",
        "relation": "用途"
      }
    ]
  },
  "tf.tidy()": {
    "successors": [
      {
        "target": "进行内存清理工作，防止内存泄露",
        "relation": "用途"
      },
      {
        "target": "将大规模内存操作放置在其回调中执行",
        "relation": "特点"
      }
    ],
    "predecessors": []
  },
  "进行内存清理工作，防止内存泄露": {
    "successors": [],
    "predecessors": [
      {
        "source": "tf.tidy()",
        "relation": "用途"
      }
    ]
  },
  "将大规模内存操作放置在其回调中执行": {
    "successors": [],
    "predecessors": [
      {
        "source": "tf.tidy()",
        "relation": "特点"
      }
    ]
  },
  "convertToTensor函数": {
    "successors": [
      {
        "target": "打乱数据顺序，创建特征向量和标签向量，转换为张量格式，进行归一化操作",
        "relation": "执行步骤"
      },
      {
        "target": "将原始数据转变为TensorFlow可读的张量格式",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "打乱数据顺序，创建特征向量和标签向量，转换为张量格式，进行归一化操作": {
    "successors": [],
    "predecessors": [
      {
        "source": "convertToTensor函数",
        "relation": "执行步骤"
      }
    ]
  },
  "将原始数据转变为TensorFlow可读的张量格式": {
    "successors": [],
    "predecessors": [
      {
        "source": "convertToTensor函数",
        "relation": "用途"
      }
    ]
  },
  "归一化操作": {
    "successors": [
      {
        "target": "让输入输出映射到0-1之间，保证后期更有效地训练",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "让输入输出映射到0-1之间，保证后期更有效地训练": {
    "successors": [],
    "predecessors": [
      {
        "source": "归一化操作",
        "relation": "用途"
      }
    ]
  },
  "tf.util.shuffle": {
    "successors": [
      {
        "target": "打乱数据集中数据顺序",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "打乱数据集中数据顺序": {
    "successors": [],
    "predecessors": [
      {
        "source": "tf.util.shuffle",
        "relation": "用途"
      }
    ]
  },
  "定义模型的拓扑结构": {
    "successors": [],
    "predecessors": [
      {
        "source": "训练模型",
        "relation": "步骤"
      }
    ]
  },
  "训练并评估训练的结果": {
    "successors": [],
    "predecessors": [
      {
        "source": "训练模型",
        "relation": "步骤"
      }
    ]
  },
  "train函数": {
    "successors": [
      {
        "target": "训练模型",
        "relation": "用途"
      }
    ],
    "predecessors": [
      {
        "source": "index.js",
        "relation": "包含"
      },
      {
        "source": "训练数据",
        "relation": "可能与...相关"
      }
    ]
  },
  "metrics": {
    "successors": [
      {
        "target": "loss, val_loss, acc, val_acc",
        "relation": "包含"
      }
    ],
    "predecessors": []
  },
  "loss, val_loss, acc, val_acc": {
    "successors": [],
    "predecessors": [
      {
        "source": "metrics",
        "relation": "包含"
      }
    ]
  },
  "loss": {
    "successors": [
      {
        "target": "表示训练集的损失值",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "表示训练集的损失值": {
    "successors": [],
    "predecessors": [
      {
        "source": "loss",
        "relation": "用途"
      }
    ]
  },
  "val_loss": {
    "successors": [
      {
        "target": "表示验证集的损失值",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "表示验证集的损失值": {
    "successors": [],
    "predecessors": [
      {
        "source": "val_loss",
        "relation": "用途"
      }
    ]
  },
  "acc": {
    "successors": [
      {
        "target": "表示训练集的准确度",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "表示训练集的准确度": {
    "successors": [],
    "predecessors": [
      {
        "source": "acc",
        "relation": "用途"
      }
    ]
  },
  "val_acc": {
    "successors": [
      {
        "target": "表示验证集的准确度",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "表示验证集的准确度": {
    "successors": [],
    "predecessors": [
      {
        "source": "val_acc",
        "relation": "用途"
      }
    ]
  },
  "验证集": {
    "successors": [
      {
        "target": "了解模型效率、调试超参数",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "了解模型效率、调试超参数": {
    "successors": [],
    "predecessors": [
      {
        "source": "验证集",
        "relation": "用途"
      }
    ]
  },
  "trainXs": {
    "successors": [
      {
        "target": "训练集，用于训练模型",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "训练集，用于训练模型": {
    "successors": [],
    "predecessors": [
      {
        "source": "trainXs",
        "relation": "用途"
      }
    ]
  },
  "testXs": {
    "successors": [
      {
        "target": "验证集，在每个时期结束时对模型进行测试",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "验证集，在每个时期结束时对模型进行测试": {
    "successors": [],
    "predecessors": [
      {
        "source": "testXs",
        "relation": "用途"
      }
    ]
  },
  "数据集": {
    "successors": [
      {
        "target": "需要调整为模型期望的形状",
        "relation": "特点"
      },
      {
        "target": "输入（Xs）和标签（Ys）",
        "relation": "组成部分"
      }
    ],
    "predecessors": []
  },
  "需要调整为模型期望的形状": {
    "successors": [],
    "predecessors": [
      {
        "source": "数据集",
        "relation": "特点"
      }
    ]
  },
  "模型期望的形状": {
    "successors": [
      {
        "target": "[num_examples, image_width, image_height, channels]",
        "relation": "是"
      }
    ],
    "predecessors": []
  },
  "[num_examples, image_width, image_height, channels]": {
    "successors": [],
    "predecessors": [
      {
        "source": "模型期望的形状",
        "relation": "是"
      }
    ]
  },
  "输入（Xs）和标签（Ys）": {
    "successors": [],
    "predecessors": [
      {
        "source": "数据集",
        "relation": "组成部分"
      }
    ]
  },
  "model.fit": {
    "successors": [
      {
        "target": "BATCH_SIZE设置为512",
        "relation": "参数"
      },
      {
        "target": "validationData设置为[testXs, testYs]",
        "relation": "参数"
      },
      {
        "target": "是异步函数",
        "relation": "特点"
      },
      {
        "target": "train_generator, steps_per_epoch=len(train_generator), epochs=epochs, validation_data=val_generator, validation_steps=len(val_generator)",
        "relation": "执行步骤"
      },
      {
        "target": "训练模型",
        "relation": "用途"
      },
      {
        "target": "train_ds, validation_data=val_ds, epochs=NUM_EPOCHS, callbacks=tensorboard_callback",
        "relation": "组成部分"
      },
      {
        "target": "model.fit",
        "relation": "可能与...相关"
      }
    ],
    "predecessors": [
      {
        "source": "model.fit",
        "relation": "可能与...相关"
      }
    ]
  },
  "BATCH_SIZE设置为512": {
    "successors": [],
    "predecessors": [
      {
        "source": "model.fit",
        "relation": "参数"
      }
    ]
  },
  "BATCH_SIZE": {
    "successors": [
      {
        "target": "每次批量处理512个图像",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "每次批量处理512个图像": {
    "successors": [],
    "predecessors": [
      {
        "source": "BATCH_SIZE",
        "relation": "用途"
      }
    ]
  },
  "单个图像的维度为[28,28,1]": {
    "successors": [],
    "predecessors": [
      {
        "source": "MNIST数据集",
        "relation": "特点"
      }
    ]
  },
  "较大的批次": {
    "successors": [
      {
        "target": "对模型的权重产生了更一致且变化较小的渐变更新",
        "relation": "优点"
      },
      {
        "target": "训练期间需要更多的内存",
        "relation": "缺点"
      },
      {
        "target": "需要相应地增加epochs",
        "relation": "条件"
      }
    ],
    "predecessors": []
  },
  "对模型的权重产生了更一致且变化较小的渐变更新": {
    "successors": [],
    "predecessors": [
      {
        "source": "较大的批次",
        "relation": "优点"
      }
    ]
  },
  "训练期间需要更多的内存": {
    "successors": [],
    "predecessors": [
      {
        "source": "较大的批次",
        "relation": "缺点"
      }
    ]
  },
  "需要相应地增加epochs": {
    "successors": [],
    "predecessors": [
      {
        "source": "较大的批次",
        "relation": "条件"
      }
    ]
  },
  "validationData设置为[testXs, testYs]": {
    "successors": [],
    "predecessors": [
      {
        "source": "model.fit",
        "relation": "参数"
      }
    ]
  },
  "validationData": {
    "successors": [
      {
        "target": "在训练期间验证损失和准确性",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "在训练期间验证损失和准确性": {
    "successors": [],
    "predecessors": [
      {
        "source": "validationData",
        "relation": "用途"
      }
    ]
  },
  "是异步函数": {
    "successors": [],
    "predecessors": [
      {
        "source": "model.fit",
        "relation": "特点"
      }
    ]
  },
  "run函数": {
    "successors": [
      {
        "target": "调用getModel获取模型",
        "relation": "步骤"
      },
      {
        "target": "显示模型架构",
        "relation": "步骤"
      },
      {
        "target": "调用train函数训练模型",
        "relation": "步骤"
      }
    ],
    "predecessors": []
  },
  "调用getModel获取模型": {
    "successors": [],
    "predecessors": [
      {
        "source": "run函数",
        "relation": "步骤"
      }
    ]
  },
  "显示模型架构": {
    "successors": [],
    "predecessors": [
      {
        "source": "run函数",
        "relation": "步骤"
      }
    ]
  },
  "调用train函数训练模型": {
    "successors": [],
    "predecessors": [
      {
        "source": "run函数",
        "relation": "步骤"
      }
    ]
  },
  "MNIST模型训练": {
    "successors": [
      {
        "target": "执行10个周期",
        "relation": "特点"
      },
      {
        "target": "每个周期由大约110批次组成",
        "relation": "特点"
      }
    ],
    "predecessors": []
  },
  "执行10个周期": {
    "successors": [],
    "predecessors": [
      {
        "source": "MNIST模型训练",
        "relation": "特点"
      }
    ]
  },
  "每个周期由大约110批次组成": {
    "successors": [],
    "predecessors": [
      {
        "source": "MNIST模型训练",
        "relation": "特点"
      }
    ]
  },
  "TensorFlow Lite": {
    "successors": [
      {
        "target": "在移动端、嵌入式和物联网设备上运行 TensorFlow 模型",
        "relation": "用途"
      },
      {
        "target": "转换和运行 TensorFlow 模型的工具",
        "relation": "组成部分"
      },
      {
        "target": "优化模型大小和性能",
        "relation": "用途"
      },
      {
        "target": "Post training quantization 和 Quantization-aware training",
        "relation": "包含"
      },
      {
        "target": "端侧机器学习",
        "relation": "用途"
      },
      {
        "target": "移动应用中的OCR处理",
        "relation": "用途"
      },
      {
        "target": "视频中的AR效果",
        "relation": "用途"
      },
      {
        "target": "文字处理",
        "relation": "用途"
      },
      {
        "target": "图像和视频处理",
        "relation": "用途"
      },
      {
        "target": "离线语音识别",
        "relation": "用途"
      },
      {
        "target": "IoT领域",
        "relation": "用途"
      },
      {
        "target": "工业物联智能设备开发",
        "relation": "用途"
      },
      {
        "target": "高性能",
        "relation": "特点"
      },
      {
        "target": "模型优化工具",
        "relation": "特点"
      },
      {
        "target": "Google Photos",
        "relation": "示例"
      },
      {
        "target": "Google Arts & Culture",
        "relation": "示例"
      },
      {
        "target": "Google Assistant",
        "relation": "示例"
      },
      {
        "target": "网易",
        "relation": "示例"
      },
      {
        "target": "爱奇艺",
        "relation": "示例"
      },
      {
        "target": "WPS",
        "relation": "示例"
      },
      {
        "target": "出门问问智能音箱",
        "relation": "示例"
      },
      {
        "target": "科沃斯扫地机器人",
        "relation": "示例"
      },
      {
        "target": "创新奇智智能质检一体机",
        "relation": "示例"
      },
      {
        "target": "智能读码机",
        "relation": "示例"
      },
      {
        "target": "在边缘设备上运行 TensorFlow 模型推理的官方框架",
        "relation": "是"
      },
      {
        "target": "跨平台运行，包括 Android、iOS 以及基于 Linux 的 IoT 设备和微控制器",
        "relation": "特点"
      },
      {
        "target": "在边缘设备上运行 TensorFlow 模型推理",
        "relation": "用途"
      },
      {
        "target": "特别为各种端侧设备优化的算子库",
        "relation": "组成部分"
      },
      {
        "target": "能够利用各种硬件加速",
        "relation": "特点"
      },
      {
        "target": "更轻量，二进制文件的大小约为 1 MB（针对 32 位 ARM build）",
        "relation": "特点"
      },
      {
        "target": "如果仅使用支持常见图像分类模型（InceptionV3 和 MobileNet）所需的运算符，二进制文件的大小不到 300 KB",
        "relation": "特点"
      },
      {
        "target": "基于 TF Mobile 的经验，也继承了 TFMini 和内部其他类似项目的很多优秀工作",
        "relation": "发展历史"
      },
      {
        "target": "多种级别的量化支持",
        "relation": "包含"
      },
      {
        "target": "模型文件和标签文件",
        "relation": "包含"
      },
      {
        "target": "TensorFlow Lite 解释器(Interpreter)",
        "relation": "组成部分"
      },
      {
        "target": "TensorFlow Lite 转换器(Converter)",
        "relation": "组成部分"
      },
      {
        "target": "算子库(Op kernels)",
        "relation": "组成部分"
      },
      {
        "target": "硬件加速代理(Hardware accelerator delegate)",
        "relation": "组成部分"
      },
      {
        "target": "利用手机上的加速器，比如 GPU 或者 DSP",
        "relation": "用途"
      },
      {
        "target": "利用 Android 神经网络 API（Android NN API)",
        "relation": "用途"
      },
      {
        "target": "一个轻量、快速、兼容度高的专门针对移动式应用场景的深度学习工具",
        "relation": "是什么"
      },
      {
        "target": "在移动设备、嵌入式设备和 IoT 设备上运行 TensorFlow 模型",
        "relation": "用途"
      },
      {
        "target": "二进制文件小、延迟低、支持设备端机器学习推断",
        "relation": "特点"
      },
      {
        "target": "TensorFlow Lite 解释器、TensorFlow Lite 转换器、算子库、硬件加速代理",
        "relation": "组成部分"
      },
      {
        "target": "Google Assistant、Google Photos、Uber、Airbnb、网易、爱奇艺、WPS等",
        "relation": "应用"
      },
      {
        "target": "Android、iOS、基于 Linux 的 IoT 设备和微控制器",
        "relation": "支持平台"
      },
      {
        "target": "更轻量、特别为各种端侧设备优化的算子库、能够利用各种硬件加速",
        "relation": "优点"
      },
      {
        "target": "一组帮助开发者在移动设备、嵌入式设备和 IoT 设备上运行 TensorFlow 模型的工具",
        "relation": "是什么"
      },
      {
        "target": "支持设备端机器学习推断",
        "relation": "用途"
      },
      {
        "target": "延迟较低",
        "relation": "特点"
      },
      {
        "target": "二进制文件很小",
        "relation": "特点"
      },
      {
        "target": "移动端及IoT设备端的深度学习技术",
        "relation": "用途"
      },
      {
        "target": "轻量化",
        "relation": "特点"
      },
      {
        "target": "快速",
        "relation": "特点"
      },
      {
        "target": "兼容度高",
        "relation": "特点"
      },
      {
        "target": "大大降低移动端及IoT设备端的深度学习技术门槛",
        "relation": "结果"
      },
      {
        "target": "移动端模型部署",
        "relation": "用途"
      },
      {
        "target": "TensorFlow Lite",
        "relation": "可能与...相关"
      },
      {
        "target": "识别输入图像",
        "relation": "用途"
      },
      {
        "target": "无需使用ByteBuffer来处理图像，提供了方便的支持库来简化图像预处理",
        "relation": "特点"
      },
      {
        "target": "解释器和转换器",
        "relation": "组成部分"
      },
      {
        "target": "在移动设备和嵌入式设备上运行TensorFlow模型",
        "relation": "用途"
      },
      {
        "target": "在移动和嵌入式设备上运行推理",
        "relation": "用途"
      },
      {
        "target": "一组工具，可帮助开发者在移动设备、嵌入式设备和 IoT 设备上运行 TensorFlow 模型",
        "relation": "是什么"
      },
      {
        "target": "支持设备端机器学习推断，延迟较低，并且二进制文件很小",
        "relation": "特点"
      },
      {
        "target": "采用更小的模型格式，并提供了方便的模型转换器",
        "relation": "特点"
      },
      {
        "target": "将 TensorFlow 模型转换为方便解释器使用的格式，并可引入优化以减小二进制文件的大小和提高性能",
        "relation": "用途"
      },
      {
        "target": "可在手机、嵌入式 Linux 设备和微控制器等很多不同类型的硬件上运行经过专门优化的模型",
        "relation": "特点"
      },
      {
        "target": "安卓应用只需 1 兆左右的运行环境，在 MCU 上甚至可以小于 100KB",
        "relation": "特点"
      },
      {
        "target": "在硬件加速层面，对于 CPU 利用了 ARM 的 NEON 指令集做了大量的优化",
        "relation": "特点"
      },
      {
        "target": "可以利用手机上的加速器，比如 GPU 或者 DSP 等",
        "relation": "特点"
      },
      {
        "target": "最新的安卓系统提供了 Android 神经网络 API（Android NN API)，让硬件厂商可以扩展支持这样的接口",
        "relation": "特点"
      }
    ],
    "predecessors": [
      {
        "source": "TensorFlow",
        "relation": "包含"
      },
      {
        "source": "tf.lite.TFLiteConverter",
        "relation": "属于"
      },
      {
        "source": "TensorFlow Lite",
        "relation": "可能与...相关"
      }
    ]
  },
  "在移动端、嵌入式和物联网设备上运行 TensorFlow 模型": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite",
        "relation": "用途"
      },
      {
        "source": "tf.lite.TFLiteConverter",
        "relation": "可能用途"
      }
    ]
  },
  "TensorFlow 模型": {
    "successors": [
      {
        "target": "一种数据结构，包含了在解决特定问题时训练得到的机器学习网络的逻辑和知识",
        "relation": "是什么"
      },
      {
        "target": "解决特定问题",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "一种数据结构，包含了在解决特定问题时训练得到的机器学习网络的逻辑和知识": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow 模型",
        "relation": "是什么"
      }
    ]
  },
  "解决特定问题": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow 模型",
        "relation": "用途"
      }
    ]
  },
  "转换和运行 TensorFlow 模型的工具": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite",
        "relation": "组成部分"
      },
      {
        "source": "TensorFlow",
        "relation": "间接包含"
      }
    ]
  },
  "TensorFlow Hub": {
    "successors": [
      {
        "target": "存放训练好的模型供开发人员复用",
        "relation": "用途"
      },
      {
        "target": "提供经过充分认证的模型",
        "relation": "特点"
      },
      {
        "target": "提供训练好的模型供开发人员复用",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "存放训练好的模型供开发人员复用": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Hub",
        "relation": "用途"
      }
    ]
  },
  "提供经过充分认证的模型": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Hub",
        "relation": "特点"
      }
    ]
  },
  "预训练模型": {
    "successors": [
      {
        "target": "直接部署或用于迁移学习",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "直接部署或用于迁移学习": {
    "successors": [],
    "predecessors": [
      {
        "source": "预训练模型",
        "relation": "用途"
      }
    ]
  },
  "MobileNet": {
    "successors": [
      {
        "target": "TensorFlow Hub 上的一个模型",
        "relation": "示例"
      },
      {
        "target": "在有 GPU 加速的手机上运行图像分类，模型运行速度可以提高 5.5 倍",
        "relation": "示例"
      },
      {
        "target": "图像识别模型",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "TensorFlow Hub 上的一个模型": {
    "successors": [],
    "predecessors": [
      {
        "source": "MobileNet",
        "relation": "示例"
      }
    ]
  },
  "hub.KerasLayer": {
    "successors": [
      {
        "target": "加载和使用 TensorFlow Hub 上的模型",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "加载和使用 TensorFlow Hub 上的模型": {
    "successors": [],
    "predecessors": [
      {
        "source": "hub.KerasLayer",
        "relation": "用途"
      }
    ]
  },
  "TensorFlow Lite 转换器": {
    "successors": [
      {
        "target": "Keras Model 和 SavedModel",
        "relation": "可以接受"
      },
      {
        "target": "将 TensorFlow 模型转换为 TFLite 格式",
        "relation": "用途"
      },
      {
        "target": "调用 Python API 或命令行进行转换",
        "relation": "执行步骤"
      },
      {
        "target": "支持算子优化和编译优化",
        "relation": "特点"
      },
      {
        "target": "支持量化原生支持",
        "relation": "特点"
      },
      {
        "target": "tf.lite.TFLiteConverter",
        "relation": "组成部分"
      },
      {
        "target": "将 TensorFlow 模型转换为方便解释器使用的格式",
        "relation": "用途"
      },
      {
        "target": "引入优化以减小二进制文件的大小和提高性能",
        "relation": "用途"
      },
      {
        "target": "将输入的 TensorFlow 模型生成 TensorFlow Lite 模型",
        "relation": "用途"
      },
      {
        "target": "命令行与 Python API",
        "relation": "使用方法"
      },
      {
        "target": "将 TensorFlow 模型转换为 TensorFlow Lite 格式",
        "relation": "用途"
      },
      {
        "target": "算子优化和常见的编译优化、量化的原生支持",
        "relation": "优化工作"
      },
      {
        "target": "命令行工具和 Python API",
        "relation": "组成部分"
      },
      {
        "target": "from_saved_model(), from_keras_model(), from_concrete_functions()",
        "relation": "间接包含"
      },
      {
        "target": "TensorFlow Lite 转换器",
        "relation": "可能与...相关"
      }
    ],
    "predecessors": [
      {
        "source": "TensorFlow Lite 转换器",
        "relation": "可能与...相关"
      }
    ]
  },
  "Keras Model 和 SavedModel": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite 转换器",
        "relation": "可以接受"
      }
    ]
  },
  "将 TensorFlow 模型转换为 TFLite 格式": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite 转换器",
        "relation": "用途"
      }
    ]
  },
  "调用 Python API 或命令行进行转换": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite 转换器",
        "relation": "执行步骤"
      }
    ]
  },
  "支持算子优化和编译优化": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite 转换器",
        "relation": "特点"
      }
    ]
  },
  "支持量化原生支持": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite 转换器",
        "relation": "特点"
      }
    ]
  },
  "tf.lite.TFLiteConverter": {
    "successors": [
      {
        "target": "从 SavedModel 或 Keras Model 转换",
        "relation": "用途"
      },
      {
        "target": "使用 from_saved_model() 或 from_keras_model()",
        "relation": "执行步骤"
      },
      {
        "target": "TensorFlow Lite",
        "relation": "属于"
      },
      {
        "target": "将 TensorFlow 模型格式转换为 TensorFlow Lite 的 Python API",
        "relation": "是什么"
      },
      {
        "target": "from_saved_model(), from_keras_model(), from_concrete_functions()",
        "relation": "包含"
      },
      {
        "target": "将Keras模型转换为TensorFlow Lite模型",
        "relation": "用途"
      },
      {
        "target": "在移动端、嵌入式和物联网设备上运行 TensorFlow 模型",
        "relation": "可能用途"
      },
      {
        "target": "优化模型大小和性能",
        "relation": "可能用途"
      },
      {
        "target": "端侧机器学习",
        "relation": "可能用途"
      },
      {
        "target": "移动应用中的OCR处理",
        "relation": "可能用途"
      },
      {
        "target": "视频中的AR效果",
        "relation": "可能用途"
      },
      {
        "target": "文字处理",
        "relation": "可能用途"
      },
      {
        "target": "图像和视频处理",
        "relation": "可能用途"
      },
      {
        "target": "离线语音识别",
        "relation": "可能用途"
      },
      {
        "target": "IoT领域",
        "relation": "可能用途"
      },
      {
        "target": "工业物联智能设备开发",
        "relation": "可能用途"
      },
      {
        "target": "在边缘设备上运行 TensorFlow 模型推理",
        "relation": "可能用途"
      },
      {
        "target": "利用手机上的加速器，比如 GPU 或者 DSP",
        "relation": "可能用途"
      },
      {
        "target": "利用 Android 神经网络 API（Android NN API)",
        "relation": "可能用途"
      },
      {
        "target": "在移动设备、嵌入式设备和 IoT 设备上运行 TensorFlow 模型",
        "relation": "可能用途"
      },
      {
        "target": "支持设备端机器学习推断",
        "relation": "可能用途"
      },
      {
        "target": "移动端及IoT设备端的深度学习技术",
        "relation": "可能用途"
      },
      {
        "target": "移动端模型部署",
        "relation": "可能用途"
      }
    ],
    "predecessors": [
      {
        "source": "TensorFlow Lite 转换器",
        "relation": "组成部分"
      }
    ]
  },
  "从 SavedModel 或 Keras Model 转换": {
    "successors": [],
    "predecessors": [
      {
        "source": "tf.lite.TFLiteConverter",
        "relation": "用途"
      }
    ]
  },
  "使用 from_saved_model() 或 from_keras_model()": {
    "successors": [],
    "predecessors": [
      {
        "source": "tf.lite.TFLiteConverter",
        "relation": "执行步骤"
      }
    ]
  },
  "tflite_convert": {
    "successors": [
      {
        "target": "通过命令行转换模型",
        "relation": "用途"
      },
      {
        "target": "命令行 TensorFlow Lite 转换器命令行工具",
        "relation": "属于"
      },
      {
        "target": "与 TensorFlow 一起安装",
        "relation": "安装方式"
      },
      {
        "target": "TensorFlow Lite 转换器命令行工具",
        "relation": "是"
      },
      {
        "target": "--output_file, --saved_model_dir, --keras_model_file, --enable_v1_converter",
        "relation": "包含"
      }
    ],
    "predecessors": []
  },
  "通过命令行转换模型": {
    "successors": [],
    "predecessors": [
      {
        "source": "tflite_convert",
        "relation": "用途"
      }
    ]
  },
  "算子优化": {
    "successors": [
      {
        "target": "算子融合、常数折叠、无用代码删除",
        "relation": "包含"
      }
    ],
    "predecessors": []
  },
  "算子融合、常数折叠、无用代码删除": {
    "successors": [],
    "predecessors": [
      {
        "source": "算子优化",
        "relation": "包含"
      }
    ]
  },
  "量化": {
    "successors": [
      {
        "target": "在模型转换过程中使用训练后量化",
        "relation": "特点"
      },
      {
        "target": "设置 converter.optimizations=[tf.lite.Optimize.DEFAULT]",
        "relation": "执行步骤"
      },
      {
        "target": "降低权重的精确表示，并且可选的降低存储和计算的激活值",
        "relation": "用途"
      },
      {
        "target": "对现有 CPU 平台的支持",
        "relation": "优点"
      },
      {
        "target": "降低存储器访问成本",
        "relation": "优点"
      },
      {
        "target": "对 SIMD 指令功能特别有益",
        "relation": "优点"
      },
      {
        "target": "降低权重的精确表示，降低存储和计算的激活值",
        "relation": "用途"
      },
      {
        "target": "降低用于读取和存储中间激活值的存储器访问成本",
        "relation": "优点"
      },
      {
        "target": "许多 CPU 和硬件加速器实现提供 SIMD 指令功能，对量化特别有益",
        "relation": "优点"
      },
      {
        "target": "量化",
        "relation": "可能与...相关"
      }
    ],
    "predecessors": [
      {
        "source": "量化",
        "relation": "可能与...相关"
      }
    ]
  },
  "在模型转换过程中使用训练后量化": {
    "successors": [],
    "predecessors": [
      {
        "source": "量化",
        "relation": "特点"
      }
    ]
  },
  "设置 converter.optimizations=[tf.lite.Optimize.DEFAULT]": {
    "successors": [],
    "predecessors": [
      {
        "source": "量化",
        "relation": "执行步骤"
      }
    ]
  },
  "TensorFlow Lite 解释器": {
    "successors": [
      {
        "target": "执行模型文件在输入数据上定义的运算符，输出推理结果",
        "relation": "用途"
      },
      {
        "target": "适用于多个平台，提供了一个简单的 API",
        "relation": "特点"
      },
      {
        "target": "GPU 委托",
        "relation": "组成部分"
      },
      {
        "target": "适用于多个平台",
        "relation": "特点"
      },
      {
        "target": "简单的 API 用于从 Java、Swift、Objective-C、C++ 和 Python 运行 TensorFlow Lite 模型",
        "relation": "提供"
      },
      {
        "target": "可在手机、嵌入式 Linux 设备和微控制器等很多不同类型的硬件上运行经过专门优化的模型",
        "relation": "特点"
      },
      {
        "target": "安卓应用只需 1 兆左右的运行环境，在 MCU 上甚至可以小于 100KB",
        "relation": "特点"
      },
      {
        "target": "提供多种语言的 API",
        "relation": "特点"
      },
      {
        "target": "轻量级、快速启动、内存高效",
        "relation": "特点"
      },
      {
        "target": "在不同设备上使用硬件加速",
        "relation": "用途"
      },
      {
        "target": "委托（Delegates）",
        "relation": "包含"
      },
      {
        "target": "在 Android 与 iOS 平台上使用",
        "relation": "用途"
      },
      {
        "target": "部署在 Raspberry Pi 和基于 Arm64 的主板的嵌入式 Linux 系统上",
        "relation": "用途"
      },
      {
        "target": "TensorFlow Lite 解释器",
        "relation": "可能与...相关"
      }
    ],
    "predecessors": [
      {
        "source": "花卉识别 app",
        "relation": "组成部分"
      },
      {
        "source": "TensorFlow Lite 解释器",
        "relation": "可能与...相关"
      }
    ]
  },
  "执行模型文件在输入数据上定义的运算符，输出推理结果": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite 解释器",
        "relation": "用途"
      }
    ]
  },
  "适用于多个平台，提供了一个简单的 API": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite 解释器",
        "relation": "特点"
      }
    ]
  },
  "GPU 委托": {
    "successors": [
      {
        "target": "允许解释器在设备的 GPU 上运行适当的运算符",
        "relation": "用途"
      },
      {
        "target": "GPU 委托",
        "relation": "可能与...相关"
      }
    ],
    "predecessors": [
      {
        "source": "TensorFlow Lite 解释器",
        "relation": "组成部分"
      },
      {
        "source": "花卉识别 app",
        "relation": "间接包含"
      },
      {
        "source": "GPU 委托",
        "relation": "可能与...相关"
      }
    ]
  },
  "允许解释器在设备的 GPU 上运行适当的运算符": {
    "successors": [],
    "predecessors": [
      {
        "source": "GPU 委托",
        "relation": "用途"
      }
    ]
  },
  "GPU": {
    "successors": [
      {
        "target": "比 CPU 执行更快的浮点矩阵运算",
        "relation": "优点"
      },
      {
        "target": "在有 GPU 加速的手机上运行 MobileNet 图像分类，模型运行速度可以提高",
        "relation": "示例"
      }
    ],
    "predecessors": []
  },
  "比 CPU 执行更快的浮点矩阵运算": {
    "successors": [],
    "predecessors": [
      {
        "source": "GPU",
        "relation": "优点"
      }
    ]
  },
  "在有 GPU 加速的手机上运行图像分类，模型运行速度可以提高 5.5 倍": {
    "successors": [],
    "predecessors": [
      {
        "source": "MobileNet",
        "relation": "示例"
      }
    ]
  },
  "优化模型大小和性能": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite",
        "relation": "用途"
      },
      {
        "source": "tf.lite.TFLiteConverter",
        "relation": "可能用途"
      }
    ]
  },
  "降低权重的精确表示，并且可选的降低存储和计算的激活值": {
    "successors": [],
    "predecessors": [
      {
        "source": "量化",
        "relation": "用途"
      }
    ]
  },
  "对现有 CPU 平台的支持": {
    "successors": [],
    "predecessors": [
      {
        "source": "量化",
        "relation": "优点"
      }
    ]
  },
  "降低存储器访问成本": {
    "successors": [],
    "predecessors": [
      {
        "source": "量化",
        "relation": "优点"
      }
    ]
  },
  "对 SIMD 指令功能特别有益": {
    "successors": [],
    "predecessors": [
      {
        "source": "量化",
        "relation": "优点"
      }
    ]
  },
  "Post training quantization 和 Quantization-aware training": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite",
        "relation": "包含"
      },
      {
        "source": "TensorFlow",
        "relation": "间接包含"
      }
    ]
  },
  "MobileNet V2": {
    "successors": [
      {
        "target": "实现识别花卉模型",
        "relation": "用途"
      },
      {
        "target": "基于一个流线型的架构，使用深度可分离的卷积",
        "relation": "特点"
      },
      {
        "target": "基于流线型架构的轻量级深层神经网络",
        "relation": "是"
      },
      {
        "target": "图像分类任务",
        "relation": "用途"
      },
      {
        "target": "使用深度可分离的卷积",
        "relation": "特点"
      },
      {
        "target": "预训练模型和全连接的分类器",
        "relation": "组成部分"
      },
      {
        "target": "将图片分类到1000类",
        "relation": "用途"
      },
      {
        "target": "最后的神经网络层",
        "relation": "组成部分"
      },
      {
        "target": "默认分类到1000类",
        "relation": "特点"
      },
      {
        "target": "瓶颈层",
        "relation": "组成部分"
      },
      {
        "target": "分类层",
        "relation": "组成部分"
      },
      {
        "target": "创建、训练和导出自定义 TensorFlow Lite 模型",
        "relation": "用途"
      },
      {
        "target": "155层网络",
        "relation": "组成部分"
      },
      {
        "target": "训练顶层分类器",
        "relation": "用途"
      },
      {
        "target": "前几层学习非常简单和通用的功能，这些功能可以推广到几乎所有类型的图像",
        "relation": "特点"
      },
      {
        "target": "MobileNet V2",
        "relation": "可能与...相关"
      }
    ],
    "predecessors": [
      {
        "source": "MobileNet V2",
        "relation": "可能与...相关"
      }
    ]
  },
  "实现识别花卉模型": {
    "successors": [],
    "predecessors": [
      {
        "source": "MobileNet V2",
        "relation": "用途"
      }
    ]
  },
  "基于一个流线型的架构，使用深度可分离的卷积": {
    "successors": [],
    "predecessors": [
      {
        "source": "MobileNet V2",
        "relation": "特点"
      }
    ]
  },
  "迁移学习": {
    "successors": [
      {
        "target": "利用在同一域中的较大数据集上训练的模型所学习的特征",
        "relation": "用途"
      },
      {
        "target": "实例化预先训练的模型，并在顶部添加全连接的分类器",
        "relation": "步骤"
      },
      {
        "target": "在小型数据集上训练模型",
        "relation": "用途"
      },
      {
        "target": "冻结预训练模型并更新分类器的权重",
        "relation": "步骤"
      },
      {
        "target": "不改变基础模型的各项参数变量",
        "relation": "特点"
      },
      {
        "target": "保留原来大规模训练的优势",
        "relation": "优点"
      },
      {
        "target": "迁移学习",
        "relation": "可能与...相关"
      }
    ],
    "predecessors": [
      {
        "source": "迁移学习",
        "relation": "可能与...相关"
      }
    ]
  },
  "利用在同一域中的较大数据集上训练的模型所学习的特征": {
    "successors": [],
    "predecessors": [
      {
        "source": "迁移学习",
        "relation": "用途"
      }
    ]
  },
  "实例化预先训练的模型，并在顶部添加全连接的分类器": {
    "successors": [],
    "predecessors": [
      {
        "source": "迁移学习",
        "relation": "步骤"
      }
    ]
  },
  "微调": {
    "successors": [
      {
        "target": "调整预训练模型的顶层权重，以便模型学习特定于数据集的高级特征",
        "relation": "用途"
      },
      {
        "target": "提高模型性能",
        "relation": "用途"
      },
      {
        "target": "训练数据集很大且类似于预训练模型训练的原始数据集",
        "relation": "条件"
      },
      {
        "target": "取消冻结模型的顶层",
        "relation": "步骤"
      },
      {
        "target": "设置前100层为不可训练",
        "relation": "步骤"
      },
      {
        "target": "使用低学习率重新编译模型",
        "relation": "步骤"
      },
      {
        "target": "提高模型准确率",
        "relation": "用途"
      },
      {
        "target": "模型精度达到98%",
        "relation": "结果"
      },
      {
        "target": "可能导致模型过拟合",
        "relation": "缺点"
      },
      {
        "target": "设置 model.trainable = False",
        "relation": "条件"
      },
      {
        "target": "训练预训练模型的顶层的权重以及刚添加的分类器的训练",
        "relation": "用途"
      },
      {
        "target": "训练期间将不更新预训练网络的权重，只在 MobileNet V2基础模型上训练了几层",
        "relation": "特点"
      },
      {
        "target": "预训练模型将忘记它学到的东西",
        "relation": "结果"
      },
      {
        "target": "微调",
        "relation": "可能与...相关"
      }
    ],
    "predecessors": [
      {
        "source": "微调",
        "relation": "可能与...相关"
      }
    ]
  },
  "调整预训练模型的顶层权重，以便模型学习特定于数据集的高级特征": {
    "successors": [],
    "predecessors": [
      {
        "source": "微调",
        "relation": "用途"
      }
    ]
  },
  "ImageDataGenerator": {
    "successors": [
      {
        "target": "生成一个批次一个批次的图片，以生成器的形式给模型训练",
        "relation": "用途"
      },
      {
        "target": "生成批次的图片以进行模型训练",
        "relation": "用途"
      },
      {
        "target": "包含像素缩放和数据增强功能",
        "relation": "特点"
      },
      {
        "target": "生成一个批次的图片，以生成器的形式给模型训练",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "生成一个批次一个批次的图片，以生成器的形式给模型训练": {
    "successors": [],
    "predecessors": [
      {
        "source": "ImageDataGenerator",
        "relation": "用途"
      }
    ]
  },
  "flow_from_directory": {
    "successors": [
      {
        "target": "逐步加载单个数据集的图像",
        "relation": "用途"
      },
      {
        "target": "target_size设置为(224, 224)的正方形图像",
        "relation": "参数"
      },
      {
        "target": "batch_size默认值为32，可设置为64",
        "relation": "参数"
      },
      {
        "target": "shuffle参数设置为False以确定性顺序返回批处理",
        "relation": "参数"
      },
      {
        "target": "可以指定目标尺寸、批次大小和子集类型",
        "relation": "特点"
      },
      {
        "target": "flow_from_directory",
        "relation": "可能与...相关"
      }
    ],
    "predecessors": [
      {
        "source": "flow_from_directory",
        "relation": "可能与...相关"
      }
    ]
  },
  "逐步加载单个数据集的图像": {
    "successors": [],
    "predecessors": [
      {
        "source": "flow_from_directory",
        "relation": "用途"
      }
    ]
  },
  "基于流线型架构的轻量级深层神经网络": {
    "successors": [],
    "predecessors": [
      {
        "source": "MobileNet V2",
        "relation": "是"
      }
    ]
  },
  "图像分类任务": {
    "successors": [],
    "predecessors": [
      {
        "source": "MobileNet V2",
        "relation": "用途"
      }
    ]
  },
  "使用深度可分离的卷积": {
    "successors": [],
    "predecessors": [
      {
        "source": "MobileNet V2",
        "relation": "特点"
      }
    ]
  },
  "预训练模型和全连接的分类器": {
    "successors": [],
    "predecessors": [
      {
        "source": "MobileNet V2",
        "relation": "组成部分"
      }
    ]
  },
  "在小型数据集上训练模型": {
    "successors": [],
    "predecessors": [
      {
        "source": "迁移学习",
        "relation": "用途"
      }
    ]
  },
  "冻结预训练模型并更新分类器的权重": {
    "successors": [],
    "predecessors": [
      {
        "source": "迁移学习",
        "relation": "步骤"
      }
    ]
  },
  "提高模型性能": {
    "successors": [],
    "predecessors": [
      {
        "source": "微调",
        "relation": "用途"
      }
    ]
  },
  "训练数据集很大且类似于预训练模型训练的原始数据集": {
    "successors": [],
    "predecessors": [
      {
        "source": "微调",
        "relation": "条件"
      }
    ]
  },
  "生成批次的图片以进行模型训练": {
    "successors": [],
    "predecessors": [
      {
        "source": "ImageDataGenerator",
        "relation": "用途"
      }
    ]
  },
  "包含像素缩放和数据增强功能": {
    "successors": [],
    "predecessors": [
      {
        "source": "ImageDataGenerator",
        "relation": "特点"
      }
    ]
  },
  "target_size设置为(224, 224)的正方形图像": {
    "successors": [],
    "predecessors": [
      {
        "source": "flow_from_directory",
        "relation": "参数"
      }
    ]
  },
  "batch_size默认值为32，可设置为64": {
    "successors": [],
    "predecessors": [
      {
        "source": "flow_from_directory",
        "relation": "参数"
      }
    ]
  },
  "shuffle参数设置为False以确定性顺序返回批处理": {
    "successors": [],
    "predecessors": [
      {
        "source": "flow_from_directory",
        "relation": "参数"
      }
    ]
  },
  "端侧机器学习": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite",
        "relation": "用途"
      },
      {
        "source": "tf.lite.TFLiteConverter",
        "relation": "可能用途"
      }
    ]
  },
  "移动应用中的OCR处理": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite",
        "relation": "用途"
      },
      {
        "source": "tf.lite.TFLiteConverter",
        "relation": "可能用途"
      }
    ]
  },
  "视频中的AR效果": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite",
        "relation": "用途"
      },
      {
        "source": "tf.lite.TFLiteConverter",
        "relation": "可能用途"
      }
    ]
  },
  "文字处理": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite",
        "relation": "用途"
      },
      {
        "source": "tf.lite.TFLiteConverter",
        "relation": "可能用途"
      }
    ]
  },
  "图像和视频处理": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite",
        "relation": "用途"
      },
      {
        "source": "tf.lite.TFLiteConverter",
        "relation": "可能用途"
      }
    ]
  },
  "离线语音识别": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite",
        "relation": "用途"
      },
      {
        "source": "tf.lite.TFLiteConverter",
        "relation": "可能用途"
      }
    ]
  },
  "IoT领域": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite",
        "relation": "用途"
      },
      {
        "source": "tf.lite.TFLiteConverter",
        "relation": "可能用途"
      }
    ]
  },
  "工业物联智能设备开发": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite",
        "relation": "用途"
      },
      {
        "source": "tf.lite.TFLiteConverter",
        "relation": "可能用途"
      }
    ]
  },
  "高性能": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite",
        "relation": "特点"
      }
    ]
  },
  "模型优化工具": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite",
        "relation": "特点"
      }
    ]
  },
  "Google Photos": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite",
        "relation": "示例"
      }
    ]
  },
  "Google Arts & Culture": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite",
        "relation": "示例"
      }
    ]
  },
  "Google Assistant": {
    "successors": [
      {
        "target": "语音识别",
        "relation": "用途"
      },
      {
        "target": "完全基于神经网络的移动端语音识别",
        "relation": "特点"
      },
      {
        "target": "Live Caption",
        "relation": "示例"
      }
    ],
    "predecessors": [
      {
        "source": "TensorFlow Lite",
        "relation": "示例"
      }
    ]
  },
  "网易": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite",
        "relation": "示例"
      }
    ]
  },
  "爱奇艺": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite",
        "relation": "示例"
      }
    ]
  },
  "WPS": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite",
        "relation": "示例"
      }
    ]
  },
  "出门问问智能音箱": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite",
        "relation": "示例"
      }
    ]
  },
  "科沃斯扫地机器人": {
    "successors": [
      {
        "target": "室内避开障碍物",
        "relation": "用途"
      },
      {
        "target": "使用机器视觉识别障碍物",
        "relation": "特点"
      },
      {
        "target": "推理速度提高了30%",
        "relation": "结果"
      }
    ],
    "predecessors": [
      {
        "source": "TensorFlow Lite",
        "relation": "示例"
      }
    ]
  },
  "创新奇智智能质检一体机": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite",
        "relation": "示例"
      }
    ]
  },
  "智能读码机": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite",
        "relation": "示例"
      }
    ]
  },
  "语音识别": {
    "successors": [],
    "predecessors": [
      {
        "source": "Google Assistant",
        "relation": "用途"
      }
    ]
  },
  "完全基于神经网络的移动端语音识别": {
    "successors": [],
    "predecessors": [
      {
        "source": "Google Assistant",
        "relation": "特点"
      }
    ]
  },
  "Live Caption": {
    "successors": [],
    "predecessors": [
      {
        "source": "Google Assistant",
        "relation": "示例"
      }
    ]
  },
  "MCU": {
    "successors": [
      {
        "target": "单一芯片的小型计算机",
        "relation": "是什么"
      },
      {
        "target": "没有操作系统",
        "relation": "特点"
      },
      {
        "target": "内存只有几十KB",
        "relation": "特点"
      }
    ],
    "predecessors": []
  },
  "单一芯片的小型计算机": {
    "successors": [],
    "predecessors": [
      {
        "source": "MCU",
        "relation": "是什么"
      }
    ]
  },
  "没有操作系统": {
    "successors": [],
    "predecessors": [
      {
        "source": "MCU",
        "relation": "特点"
      }
    ]
  },
  "内存只有几十KB": {
    "successors": [],
    "predecessors": [
      {
        "source": "MCU",
        "relation": "特点"
      }
    ]
  },
  "室内避开障碍物": {
    "successors": [],
    "predecessors": [
      {
        "source": "科沃斯扫地机器人",
        "relation": "用途"
      }
    ]
  },
  "使用机器视觉识别障碍物": {
    "successors": [],
    "predecessors": [
      {
        "source": "科沃斯扫地机器人",
        "relation": "特点"
      }
    ]
  },
  "推理速度提高了30%": {
    "successors": [],
    "predecessors": [
      {
        "source": "科沃斯扫地机器人",
        "relation": "结果"
      }
    ]
  },
  "创新奇智": {
    "successors": [
      {
        "target": "服装厂质检",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "服装厂质检": {
    "successors": [],
    "predecessors": [
      {
        "source": "创新奇智",
        "relation": "用途"
      }
    ]
  },
  "tf.keras model": {
    "successors": [
      {
        "target": "生成 HDF5 文件的绝对路径目录",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "生成 HDF5 文件的绝对路径目录": {
    "successors": [],
    "predecessors": [
      {
        "source": "tf.keras model",
        "relation": "用途"
      }
    ]
  },
  "TensorFlow 模型导出": {
    "successors": [
      {
        "target": "SavedModel 和 Keras Sequential 两种模型导出方法和格式",
        "relation": "支持"
      },
      {
        "target": "SavedModel 和 Keras Sequential",
        "relation": "包含"
      }
    ],
    "predecessors": []
  },
  "SavedModel 和 Keras Sequential 两种模型导出方法和格式": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow 模型导出",
        "relation": "支持"
      }
    ]
  },
  "SavedModel": {
    "successors": [
      {
        "target": "tflite_convert --saved_model_dir=/tmp/mobilenet_saved_model --output_file=/tmp/mobilenet.tflite",
        "relation": "示例"
      },
      {
        "target": "TensorFlow模型的序列化格式",
        "relation": "是"
      },
      {
        "target": "可以跨平台部署",
        "relation": "特点"
      },
      {
        "target": "包含完整的TensorFlow程序",
        "relation": "特点"
      },
      {
        "target": "不需要原始模型构建代码就可以运行",
        "relation": "用途"
      },
      {
        "target": "SavedModel",
        "relation": "可能与...相关"
      },
      {
        "target": "包含一个完整的TensorFlow程序，不仅包含权重值，还包含计算",
        "relation": "特点"
      }
    ],
    "predecessors": [
      {
        "source": "SavedModel",
        "relation": "可能与...相关"
      }
    ]
  },
  "tflite_convert --saved_model_dir=/tmp/mobilenet_saved_model --output_file=/tmp/mobilenet.tflite": {
    "successors": [],
    "predecessors": [
      {
        "source": "SavedModel",
        "relation": "示例"
      }
    ]
  },
  "Keras H5": {
    "successors": [
      {
        "target": "tflite_convert --keras_model_file=/tmp/mobilenet_keras_model.h5 --output_file=/tmp/mobilenet.tflite",
        "relation": "示例"
      }
    ],
    "predecessors": []
  },
  "tflite_convert --keras_model_file=/tmp/mobilenet_keras_model.h5 --output_file=/tmp/mobilenet.tflite": {
    "successors": [],
    "predecessors": [
      {
        "source": "Keras H5",
        "relation": "示例"
      }
    ]
  },
  "aaptOptions": {
    "successors": [
      {
        "target": "防止Android在生成应用程序二进制文件时压缩TensorFlow Lite模型文件",
        "relation": "用途"
      },
      {
        "target": "noCompress \"tflite\"",
        "relation": "组成部分"
      }
    ],
    "predecessors": []
  },
  "防止Android在生成应用程序二进制文件时压缩TensorFlow Lite模型文件": {
    "successors": [],
    "predecessors": [
      {
        "source": "aaptOptions",
        "relation": "用途"
      }
    ]
  },
  "noCompress \"tflite\"": {
    "successors": [],
    "predecessors": [
      {
        "source": "aaptOptions",
        "relation": "组成部分"
      }
    ]
  },
  "Android环境部署": {
    "successors": [
      {
        "target": "运行Sync Gradle",
        "relation": "步骤"
      }
    ],
    "predecessors": []
  },
  "运行Sync Gradle": {
    "successors": [],
    "predecessors": [
      {
        "source": "Android环境部署",
        "relation": "步骤"
      }
    ]
  },
  "Android Studio": {
    "successors": [
      {
        "target": "需要配置proxy或使用国内镜像",
        "relation": "条件"
      },
      {
        "target": "开发 Android 应用",
        "relation": "用途"
      },
      {
        "target": "打开现有 Android Studio 项目",
        "relation": "用途"
      },
      {
        "target": "启动图标",
        "relation": "组成部分"
      },
      {
        "target": "打开项目图标",
        "relation": "组成部分"
      }
    ],
    "predecessors": []
  },
  "需要配置proxy或使用国内镜像": {
    "successors": [],
    "predecessors": [
      {
        "source": "Android Studio",
        "relation": "条件"
      }
    ]
  },
  "build.gradle": {
    "successors": [
      {
        "target": "将maven源google()和jcenter()替换为国内镜像",
        "relation": "修改内容"
      },
      {
        "target": "配置项目依赖",
        "relation": "用途"
      }
    ],
    "predecessors": [
      {
        "source": "dependencies",
        "relation": "组成部分"
      }
    ]
  },
  "将maven源google()和jcenter()替换为国内镜像": {
    "successors": [],
    "predecessors": [
      {
        "source": "build.gradle",
        "relation": "修改内容"
      }
    ]
  },
  "buildscript": {
    "successors": [
      {
        "target": "repositories和dependencies",
        "relation": "组成部分"
      }
    ],
    "predecessors": []
  },
  "repositories和dependencies": {
    "successors": [],
    "predecessors": [
      {
        "source": "buildscript",
        "relation": "组成部分"
      }
    ]
  },
  "在边缘设备上运行 TensorFlow 模型推理的官方框架": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite",
        "relation": "是"
      }
    ]
  },
  "跨平台运行，包括 Android、iOS 以及基于 Linux 的 IoT 设备和微控制器": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite",
        "relation": "特点"
      }
    ]
  },
  "在边缘设备上运行 TensorFlow 模型推理": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite",
        "relation": "用途"
      },
      {
        "source": "tf.lite.TFLiteConverter",
        "relation": "可能用途"
      }
    ]
  },
  "特别为各种端侧设备优化的算子库": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite",
        "relation": "组成部分"
      },
      {
        "source": "TensorFlow",
        "relation": "间接包含"
      }
    ]
  },
  "能够利用各种硬件加速": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite",
        "relation": "特点"
      }
    ]
  },
  "更轻量，二进制文件的大小约为 1 MB（针对 32 位 ARM build）": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite",
        "relation": "特点"
      }
    ]
  },
  "如果仅使用支持常见图像分类模型（InceptionV3 和 MobileNet）所需的运算符，二进制文件的大小不到 300 KB": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite",
        "relation": "特点"
      }
    ]
  },
  "TF Mobile": {
    "successors": [
      {
        "target": "一个缩减版的 TensorFlow，简化了算子集，也缩小了运行库",
        "relation": "是"
      },
      {
        "target": "尝试简化 TensorFlow 并在移动设备上运行",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "一个缩减版的 TensorFlow，简化了算子集，也缩小了运行库": {
    "successors": [],
    "predecessors": [
      {
        "source": "TF Mobile",
        "relation": "是"
      }
    ]
  },
  "尝试简化 TensorFlow 并在移动设备上运行": {
    "successors": [],
    "predecessors": [
      {
        "source": "TF Mobile",
        "relation": "用途"
      }
    ]
  },
  "TFMini": {
    "successors": [
      {
        "target": "Google 内部用于计算机视觉场景的解决方案",
        "relation": "是"
      },
      {
        "target": "提供了一些转换工具压缩模型，进行算子融合并生成代码",
        "relation": "用途"
      },
      {
        "target": "将模型嵌入到二进制文件中，这样就可以在设备上运行和部署模型",
        "relation": "用途"
      },
      {
        "target": "针对移动设备做了很多优化",
        "relation": "特点"
      },
      {
        "target": "在把模型嵌入到实际的二进制文件中时兼容性存在较大挑战",
        "relation": "缺点"
      }
    ],
    "predecessors": []
  },
  "Google 内部用于计算机视觉场景的解决方案": {
    "successors": [],
    "predecessors": [
      {
        "source": "TFMini",
        "relation": "是"
      }
    ]
  },
  "提供了一些转换工具压缩模型，进行算子融合并生成代码": {
    "successors": [],
    "predecessors": [
      {
        "source": "TFMini",
        "relation": "用途"
      }
    ]
  },
  "将模型嵌入到二进制文件中，这样就可以在设备上运行和部署模型": {
    "successors": [],
    "predecessors": [
      {
        "source": "TFMini",
        "relation": "用途"
      }
    ]
  },
  "针对移动设备做了很多优化": {
    "successors": [],
    "predecessors": [
      {
        "source": "TFMini",
        "relation": "特点"
      }
    ]
  },
  "在把模型嵌入到实际的二进制文件中时兼容性存在较大挑战": {
    "successors": [],
    "predecessors": [
      {
        "source": "TFMini",
        "relation": "缺点"
      }
    ]
  },
  "基于 TF Mobile 的经验，也继承了 TFMini 和内部其他类似项目的很多优秀工作": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite",
        "relation": "发展历史"
      }
    ]
  },
  "将图片分类到1000类": {
    "successors": [],
    "predecessors": [
      {
        "source": "MobileNet V2",
        "relation": "用途"
      }
    ]
  },
  "最后的神经网络层": {
    "successors": [],
    "predecessors": [
      {
        "source": "MobileNet V2",
        "relation": "组成部分"
      }
    ]
  },
  "默认分类到1000类": {
    "successors": [],
    "predecessors": [
      {
        "source": "MobileNet V2",
        "relation": "特点"
      }
    ]
  },
  "include_top=False": {
    "successors": [
      {
        "target": "不需要原有模型中最后的神经网络层",
        "relation": "用途"
      },
      {
        "target": "include_top=False",
        "relation": "可能与...相关"
      }
    ],
    "predecessors": [
      {
        "source": "include_top=False",
        "relation": "可能与...相关"
      }
    ]
  },
  "不需要原有模型中最后的神经网络层": {
    "successors": [],
    "predecessors": [
      {
        "source": "include_top=False",
        "relation": "用途"
      }
    ]
  },
  "不改变基础模型的各项参数变量": {
    "successors": [],
    "predecessors": [
      {
        "source": "迁移学习",
        "relation": "特点"
      }
    ]
  },
  "保留原来大规模训练的优势": {
    "successors": [],
    "predecessors": [
      {
        "source": "迁移学习",
        "relation": "优点"
      }
    ]
  },
  "model.trainable = False": {
    "successors": [
      {
        "target": "设置在训练中基础模型的各项参数变量不会被新的训练修改数据",
        "relation": "用途"
      },
      {
        "target": "基础模型的各项参数变量不会被新的训练修改数据",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "设置在训练中基础模型的各项参数变量不会被新的训练修改数据": {
    "successors": [],
    "predecessors": [
      {
        "source": "model.trainable = False",
        "relation": "用途"
      }
    ]
  },
  "瓶颈层": {
    "successors": [
      {
        "target": "保持了很多通用性",
        "relation": "特点"
      },
      {
        "target": "在展平操作之前依赖于最后一层",
        "relation": "用途"
      },
      {
        "target": "瓶颈层",
        "relation": "可能与...相关"
      }
    ],
    "predecessors": [
      {
        "source": "MobileNet V2",
        "relation": "组成部分"
      },
      {
        "source": "瓶颈层",
        "relation": "可能与...相关"
      }
    ]
  },
  "保持了很多通用性": {
    "successors": [],
    "predecessors": [
      {
        "source": "瓶颈层",
        "relation": "特点"
      }
    ]
  },
  "在展平操作之前依赖于最后一层": {
    "successors": [],
    "predecessors": [
      {
        "source": "瓶颈层",
        "relation": "用途"
      }
    ]
  },
  "池化层": {
    "successors": [
      {
        "target": "对数据降维",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "对数据降维": {
    "successors": [],
    "predecessors": [
      {
        "source": "池化层",
        "relation": "用途"
      }
    ]
  },
  "5个节点": {
    "successors": [],
    "predecessors": [
      {
        "source": "输出层",
        "relation": "组成部分"
      }
    ]
  },
  "GlobalAveragePooling2D": {
    "successors": [
      {
        "target": "将特征转换为每个图像对应一个1280元素向量",
        "relation": "用途"
      },
      {
        "target": "用5x5在空间位置上进行平均",
        "relation": "特点"
      },
      {
        "target": "GlobalAveragePooling2D",
        "relation": "可能与...相关"
      }
    ],
    "predecessors": [
      {
        "source": "tf.keras.Sequential",
        "relation": "组成部分"
      },
      {
        "source": "GlobalAveragePooling2D",
        "relation": "可能与...相关"
      }
    ]
  },
  "将特征转换为每个图像对应一个1280元素向量": {
    "successors": [],
    "predecessors": [
      {
        "source": "GlobalAveragePooling2D",
        "relation": "用途"
      }
    ]
  },
  "用5x5在空间位置上进行平均": {
    "successors": [],
    "predecessors": [
      {
        "source": "GlobalAveragePooling2D",
        "relation": "特点"
      }
    ]
  },
  "TFLite 模型文件格式": {
    "successors": [
      {
        "target": "FlatBuffers",
        "relation": "采用"
      },
      {
        "target": "更注重考虑实时性，内存高效",
        "relation": "特点"
      },
      {
        "target": "支持将文件映射到内存中，然后直接进行读取和解释，不需要额外解析",
        "relation": "特点"
      },
      {
        "target": "减少了内存碎片化",
        "relation": "特点"
      }
    ],
    "predecessors": [
      {
        "source": "schema.fbs 文件",
        "relation": "定义"
      }
    ]
  },
  "FlatBuffers": {
    "successors": [
      {
        "target": "主要应用于游戏场景",
        "relation": "用途"
      },
      {
        "target": "高性能场景创建的序列化库",
        "relation": "特点"
      },
      {
        "target": "相比 Protocol Buffer 有更高的性能和更小的大小",
        "relation": "优点"
      },
      {
        "target": "更适合于边缘设备部署",
        "relation": "用途"
      },
      {
        "target": "TFLite 模型文件格式，更注重考虑实时性，内存高效",
        "relation": "用途"
      },
      {
        "target": "主要应用于游戏场景，是为了高性能场景创建的序列化库",
        "relation": "用途"
      },
      {
        "target": "FlatBuffers",
        "relation": "可能与...相关"
      }
    ],
    "predecessors": [
      {
        "source": "TFLite 模型文件格式",
        "relation": "采用"
      },
      {
        "source": "FlatBuffers",
        "relation": "可能与...相关"
      }
    ]
  },
  "更注重考虑实时性，内存高效": {
    "successors": [],
    "predecessors": [
      {
        "source": "TFLite 模型文件格式",
        "relation": "特点"
      }
    ]
  },
  "支持将文件映射到内存中，然后直接进行读取和解释，不需要额外解析": {
    "successors": [],
    "predecessors": [
      {
        "source": "TFLite 模型文件格式",
        "relation": "特点"
      }
    ]
  },
  "减少了内存碎片化": {
    "successors": [],
    "predecessors": [
      {
        "source": "TFLite 模型文件格式",
        "relation": "特点"
      }
    ]
  },
  "schema.fbs 文件": {
    "successors": [
      {
        "target": "TFLite 模型文件格式",
        "relation": "定义"
      }
    ],
    "predecessors": []
  },
  "TFLite 模型文件": {
    "successors": [
      {
        "target": "子图",
        "relation": "组成部分"
      },
      {
        "target": "算子库",
        "relation": "组成部分"
      },
      {
        "target": "共享的内存缓冲区",
        "relation": "组成部分"
      },
      {
        "target": "一系列的计算节点",
        "relation": "间接包含"
      },
      {
        "target": "多个张量",
        "relation": "间接包含"
      },
      {
        "target": "子图本身的输入和输出",
        "relation": "间接包含"
      }
    ],
    "predecessors": []
  },
  "子图": {
    "successors": [
      {
        "target": "一系列的计算节点",
        "relation": "组成部分"
      },
      {
        "target": "多个张量",
        "relation": "组成部分"
      },
      {
        "target": "子图本身的输入和输出",
        "relation": "组成部分"
      }
    ],
    "predecessors": [
      {
        "source": "TFLite 模型文件",
        "relation": "组成部分"
      }
    ]
  },
  "算子库": {
    "successors": [],
    "predecessors": [
      {
        "source": "TFLite 模型文件",
        "relation": "组成部分"
      }
    ]
  },
  "共享的内存缓冲区": {
    "successors": [],
    "predecessors": [
      {
        "source": "TFLite 模型文件",
        "relation": "组成部分"
      }
    ]
  },
  "张量": {
    "successors": [
      {
        "target": "存储模型权重",
        "relation": "用途"
      },
      {
        "target": "计算节点的输入和输出",
        "relation": "用途"
      },
      {
        "target": "引用 Model 的内存缓冲区的一片区域，提高内存效率",
        "relation": "特点"
      }
    ],
    "predecessors": []
  },
  "存储模型权重": {
    "successors": [],
    "predecessors": [
      {
        "source": "张量",
        "relation": "用途"
      }
    ]
  },
  "计算节点的输入和输出": {
    "successors": [],
    "predecessors": [
      {
        "source": "张量",
        "relation": "用途"
      }
    ]
  },
  "引用 Model 的内存缓冲区的一片区域，提高内存效率": {
    "successors": [],
    "predecessors": [
      {
        "source": "张量",
        "relation": "特点"
      }
    ]
  },
  "算子实现": {
    "successors": [
      {
        "target": "OperatorCode",
        "relation": "组成部分"
      }
    ],
    "predecessors": []
  },
  "OperatorCode": {
    "successors": [
      {
        "target": "内置的算子",
        "relation": "可以是"
      },
      {
        "target": "自定制算子",
        "relation": "可以是"
      },
      {
        "target": "有一个名字",
        "relation": "特点"
      }
    ],
    "predecessors": [
      {
        "source": "算子实现",
        "relation": "组成部分"
      }
    ]
  },
  "内置的算子": {
    "successors": [],
    "predecessors": [
      {
        "source": "OperatorCode",
        "relation": "可以是"
      }
    ]
  },
  "自定制算子": {
    "successors": [],
    "predecessors": [
      {
        "source": "OperatorCode",
        "relation": "可以是"
      }
    ]
  },
  "有一个名字": {
    "successors": [],
    "predecessors": [
      {
        "source": "OperatorCode",
        "relation": "特点"
      }
    ]
  },
  "模型的计算节点": {
    "successors": [
      {
        "target": "用到的算子索引",
        "relation": "组成部分"
      },
      {
        "target": "输入输出用到的 Tensor 索引",
        "relation": "组成部分"
      }
    ],
    "predecessors": []
  },
  "用到的算子索引": {
    "successors": [],
    "predecessors": [
      {
        "source": "模型的计算节点",
        "relation": "组成部分"
      }
    ]
  },
  "输入输出用到的 Tensor 索引": {
    "successors": [],
    "predecessors": [
      {
        "source": "模型的计算节点",
        "relation": "组成部分"
      }
    ]
  },
  "一系列的计算节点": {
    "successors": [],
    "predecessors": [
      {
        "source": "子图",
        "relation": "组成部分"
      },
      {
        "source": "TFLite 模型文件",
        "relation": "间接包含"
      }
    ]
  },
  "多个张量": {
    "successors": [],
    "predecessors": [
      {
        "source": "子图",
        "relation": "组成部分"
      },
      {
        "source": "TFLite 模型文件",
        "relation": "间接包含"
      }
    ]
  },
  "子图本身的输入和输出": {
    "successors": [],
    "predecessors": [
      {
        "source": "子图",
        "relation": "组成部分"
      },
      {
        "source": "TFLite 模型文件",
        "relation": "间接包含"
      }
    ]
  },
  "花卉识别 app": {
    "successors": [
      {
        "target": "在 Android 设备上运行图像识别模型 MobileNets_v2来识别花卉",
        "relation": "用途"
      },
      {
        "target": "TensorFlow Lite 解释器",
        "relation": "组成部分"
      },
      {
        "target": "TensorFlow Lite 支持库",
        "relation": "组成部分"
      },
      {
        "target": "可以实时识别照相机所拍摄的花卉",
        "relation": "特点"
      },
      {
        "target": "使用 TFLite 转换器转换模型",
        "relation": "执行步骤"
      },
      {
        "target": "在 Android 应用中使用 TFLite 解释器运行模型",
        "relation": "执行步骤"
      },
      {
        "target": "使用 TensorFlow Lite 支持库预处理模型输入和后处理模型输出",
        "relation": "执行步骤"
      },
      {
        "target": "实现一个在手机上运行的 app",
        "relation": "执行步骤"
      },
      {
        "target": "GPU 委托",
        "relation": "间接包含"
      },
      {
        "target": "委托（Delegates）",
        "relation": "间接包含"
      }
    ],
    "predecessors": []
  },
  "在 Android 设备上运行图像识别模型 MobileNets_v2来识别花卉": {
    "successors": [],
    "predecessors": [
      {
        "source": "花卉识别 app",
        "relation": "用途"
      }
    ]
  },
  "TensorFlow Lite 支持库": {
    "successors": [
      {
        "target": "预处理模型输入和后处理模型输出",
        "relation": "用途"
      }
    ],
    "predecessors": [
      {
        "source": "花卉识别 app",
        "relation": "组成部分"
      }
    ]
  },
  "可以实时识别照相机所拍摄的花卉": {
    "successors": [],
    "predecessors": [
      {
        "source": "花卉识别 app",
        "relation": "特点"
      }
    ]
  },
  "花卉识别模型": {
    "successors": [
      {
        "target": "通过迁移学习实现",
        "relation": "实现方式"
      },
      {
        "target": "TFLite 转换器",
        "relation": "转换工具"
      },
      {
        "target": "卷积层与全连接层",
        "relation": "组成部分"
      }
    ],
    "predecessors": []
  },
  "通过迁移学习实现": {
    "successors": [],
    "predecessors": [
      {
        "source": "花卉识别模型",
        "relation": "实现方式"
      }
    ]
  },
  "TFLite 转换器": {
    "successors": [],
    "predecessors": [
      {
        "source": "花卉识别模型",
        "relation": "转换工具"
      }
    ]
  },
  "预处理模型输入和后处理模型输出": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite 支持库",
        "relation": "用途"
      }
    ]
  },
  "使用 TFLite 转换器转换模型": {
    "successors": [],
    "predecessors": [
      {
        "source": "花卉识别 app",
        "relation": "执行步骤"
      }
    ]
  },
  "在 Android 应用中使用 TFLite 解释器运行模型": {
    "successors": [],
    "predecessors": [
      {
        "source": "花卉识别 app",
        "relation": "执行步骤"
      }
    ]
  },
  "使用 TensorFlow Lite 支持库预处理模型输入和后处理模型输出": {
    "successors": [],
    "predecessors": [
      {
        "source": "花卉识别 app",
        "relation": "执行步骤"
      }
    ]
  },
  "实现一个在手机上运行的 app": {
    "successors": [],
    "predecessors": [
      {
        "source": "花卉识别 app",
        "relation": "执行步骤"
      }
    ]
  },
  "模型优化": {
    "successors": [
      {
        "target": "在给定设备上实现性能、模型大小和准确性的理想平衡",
        "relation": "目标"
      }
    ],
    "predecessors": []
  },
  "在给定设备上实现性能、模型大小和准确性的理想平衡": {
    "successors": [],
    "predecessors": [
      {
        "source": "模型优化",
        "relation": "目标"
      }
    ]
  },
  "大而复杂的模型": {
    "successors": [
      {
        "target": "需要高准确率的任务",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "需要高准确率的任务": {
    "successors": [],
    "predecessors": [
      {
        "source": "大而复杂的模型",
        "relation": "用途"
      }
    ]
  },
  "小一点的模型": {
    "successors": [
      {
        "target": "精确度不高的任务",
        "relation": "用途"
      },
      {
        "target": "占用更少的磁盘和内存，更快更高效",
        "relation": "优点"
      }
    ],
    "predecessors": []
  },
  "精确度不高的任务": {
    "successors": [],
    "predecessors": [
      {
        "source": "小一点的模型",
        "relation": "用途"
      }
    ]
  },
  "占用更少的磁盘和内存，更快更高效": {
    "successors": [],
    "predecessors": [
      {
        "source": "小一点的模型",
        "relation": "优点"
      }
    ]
  },
  "降低权重的精确表示，降低存储和计算的激活值": {
    "successors": [],
    "predecessors": [
      {
        "source": "量化",
        "relation": "用途"
      }
    ]
  },
  "降低用于读取和存储中间激活值的存储器访问成本": {
    "successors": [],
    "predecessors": [
      {
        "source": "量化",
        "relation": "优点"
      }
    ]
  },
  "许多 CPU 和硬件加速器实现提供 SIMD 指令功能，对量化特别有益": {
    "successors": [],
    "predecessors": [
      {
        "source": "量化",
        "relation": "优点"
      }
    ]
  },
  "多种级别的量化支持": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite",
        "relation": "包含"
      },
      {
        "source": "TensorFlow",
        "relation": "间接包含"
      }
    ]
  },
  "Tensorflow Lite post-training quantization": {
    "successors": [
      {
        "target": "使权重和激活值的 Post training 更简单",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "使权重和激活值的 Post training 更简单": {
    "successors": [],
    "predecessors": [
      {
        "source": "Tensorflow Lite post-training quantization",
        "relation": "用途"
      }
    ]
  },
  "Quantization-aware training": {
    "successors": [
      {
        "target": "以最小精度下降来训练网络",
        "relation": "用途"
      },
      {
        "target": "仅适用于卷积神经网络的一个子集",
        "relation": "条件"
      }
    ],
    "predecessors": []
  },
  "以最小精度下降来训练网络": {
    "successors": [],
    "predecessors": [
      {
        "source": "Quantization-aware training",
        "relation": "用途"
      }
    ]
  },
  "仅适用于卷积神经网络的一个子集": {
    "successors": [],
    "predecessors": [
      {
        "source": "Quantization-aware training",
        "relation": "条件"
      }
    ]
  },
  "适用于多个平台": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite 解释器",
        "relation": "特点"
      }
    ]
  },
  "简单的 API 用于从 Java、Swift、Objective-C、C++ 和 Python 运行 TensorFlow Lite 模型": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite 解释器",
        "relation": "提供"
      }
    ]
  },
  "Java": {
    "successors": [
      {
        "target": "try (Interpreter interpreter = new Interpreter(tensorflow_lite_model_file)) { interpreter.run(input, output); }",
        "relation": "调用方式"
      }
    ],
    "predecessors": [
      {
        "source": "TFLite",
        "relation": "支持语言"
      }
    ]
  },
  "try (Interpreter interpreter = new Interpreter(tensorflow_lite_model_file)) { interpreter.run(input, output); }": {
    "successors": [],
    "predecessors": [
      {
        "source": "Java",
        "relation": "调用方式"
      }
    ]
  },
  "在有 GPU 加速的手机上运行 MobileNet 图像分类，模型运行速度可以提高": {
    "successors": [],
    "predecessors": [
      {
        "source": "GPU",
        "relation": "示例"
      }
    ]
  },
  "分类层": {
    "successors": [],
    "predecessors": [
      {
        "source": "MobileNet V2",
        "relation": "组成部分"
      }
    ]
  },
  "基础模型的各项参数变量不会被新的训练修改数据": {
    "successors": [],
    "predecessors": [
      {
        "source": "model.trainable = False",
        "relation": "用途"
      }
    ]
  },
  "tf.keras.Sequential": {
    "successors": [
      {
        "target": "base_model",
        "relation": "组成部分"
      },
      {
        "target": "Conv2D",
        "relation": "组成部分"
      },
      {
        "target": "Dropout",
        "relation": "组成部分"
      },
      {
        "target": "GlobalAveragePooling2D",
        "relation": "组成部分"
      },
      {
        "target": "Dense",
        "relation": "组成部分"
      },
      {
        "target": "MobileNetV2模型",
        "relation": "间接包含"
      }
    ],
    "predecessors": []
  },
  "base_model": {
    "successors": [
      {
        "target": "MobileNetV2模型",
        "relation": "组成部分"
      },
      {
        "target": "不包含顶层分类层",
        "relation": "特点"
      }
    ],
    "predecessors": [
      {
        "source": "tf.keras.Sequential",
        "relation": "组成部分"
      }
    ]
  },
  "Conv2D": {
    "successors": [
      {
        "target": "使用32个3x3的滤波器",
        "relation": "特点"
      },
      {
        "target": "激活函数为relu",
        "relation": "特点"
      },
      {
        "target": "输出三维张量，形状为(height, width, channels)",
        "relation": "特点"
      },
      {
        "target": "输出三维张量，形状描述(height, width, channels)",
        "relation": "特点"
      },
      {
        "target": "filters参数决定输出通道数量",
        "relation": "组成部分"
      },
      {
        "target": "MaxPooling2D",
        "relation": "可能与...相关"
      }
    ],
    "predecessors": [
      {
        "source": "tf.keras.Sequential",
        "relation": "组成部分"
      }
    ]
  },
  "Dropout": {
    "successors": [
      {
        "target": "丢弃率为0.2",
        "relation": "特点"
      }
    ],
    "predecessors": [
      {
        "source": "tf.keras.Sequential",
        "relation": "组成部分"
      }
    ]
  },
  "Dense": {
    "successors": [
      {
        "target": "5个节点的输出层",
        "relation": "特点"
      },
      {
        "target": "激活函数为softmax",
        "relation": "特点"
      },
      {
        "target": "全连接层",
        "relation": "是什么"
      },
      {
        "target": "全连接(Full Connected)层",
        "relation": "是什么"
      },
      {
        "target": "完成分类任务",
        "relation": "用途"
      },
      {
        "target": "softmax激活函数",
        "relation": "组成部分"
      }
    ],
    "predecessors": [
      {
        "source": "tf.keras.Sequential",
        "relation": "组成部分"
      }
    ]
  },
  "使用32个3x3的滤波器": {
    "successors": [],
    "predecessors": [
      {
        "source": "Conv2D",
        "relation": "特点"
      }
    ]
  },
  "激活函数为relu": {
    "successors": [],
    "predecessors": [
      {
        "source": "Conv2D",
        "relation": "特点"
      }
    ]
  },
  "丢弃率为0.2": {
    "successors": [],
    "predecessors": [
      {
        "source": "Dropout",
        "relation": "特点"
      }
    ]
  },
  "5个节点的输出层": {
    "successors": [],
    "predecessors": [
      {
        "source": "Dense",
        "relation": "特点"
      }
    ]
  },
  "激活函数为softmax": {
    "successors": [],
    "predecessors": [
      {
        "source": "Dense",
        "relation": "特点"
      }
    ]
  },
  "model.compile": {
    "successors": [
      {
        "target": "Adam优化器",
        "relation": "组成部分"
      },
      {
        "target": "类别交叉熵损失函数",
        "relation": "组成部分"
      },
      {
        "target": "准确率指标",
        "relation": "组成部分"
      },
      {
        "target": "配置模型的优化器和损失函数",
        "relation": "用途"
      },
      {
        "target": "使用优化器'sgd'和损失函数'mean_squared_error'",
        "relation": "特点"
      },
      {
        "target": "编译模型，设置优化器和损失函数",
        "relation": "用途"
      },
      {
        "target": "配置模型的优化器、损失函数和评估指标",
        "relation": "用途"
      },
      {
        "target": "损失函数使用类别交叉熵",
        "relation": "组成部分"
      }
    ],
    "predecessors": []
  },
  "类别交叉熵损失函数": {
    "successors": [],
    "predecessors": [
      {
        "source": "model.compile",
        "relation": "组成部分"
      }
    ]
  },
  "准确率指标": {
    "successors": [],
    "predecessors": [
      {
        "source": "model.compile",
        "relation": "组成部分"
      }
    ]
  },
  "创建、训练和导出自定义 TensorFlow Lite 模型": {
    "successors": [],
    "predecessors": [
      {
        "source": "MobileNet V2",
        "relation": "用途"
      }
    ]
  },
  "模型文件和标签文件": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite",
        "relation": "包含"
      },
      {
        "source": "TensorFlow",
        "relation": "间接包含"
      }
    ]
  },
  "Android 应用": {
    "successors": [
      {
        "target": "识别花卉图片",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "识别花卉图片": {
    "successors": [],
    "predecessors": [
      {
        "source": "Android 应用",
        "relation": "用途"
      }
    ]
  },
  "TensorFlow Lite 示例": {
    "successors": [
      {
        "target": "TensorFlow 官网",
        "relation": "来源"
      }
    ],
    "predecessors": []
  },
  "TensorFlow 官网": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite 示例",
        "relation": "来源"
      }
    ]
  },
  "flower_classification": {
    "successors": [
      {
        "target": "android 目录",
        "relation": "组成部分"
      }
    ],
    "predecessors": []
  },
  "android 目录": {
    "successors": [],
    "predecessors": [
      {
        "source": "flower_classification",
        "relation": "组成部分"
      }
    ]
  },
  "flower_classification 项目": {
    "successors": [
      {
        "target": "start 目录和 finish 目录",
        "relation": "包含"
      }
    ],
    "predecessors": []
  },
  "start 目录和 finish 目录": {
    "successors": [],
    "predecessors": [
      {
        "source": "flower_classification 项目",
        "relation": "包含"
      }
    ]
  },
  "开发 Android 应用": {
    "successors": [],
    "predecessors": [
      {
        "source": "Android Studio",
        "relation": "用途"
      }
    ]
  },
  "TFLite 模型转换过程": {
    "successors": [
      {
        "target": "用户在自己的工作台中使用 TensorFlow API 构造 TensorFlow 模型",
        "relation": "步骤"
      },
      {
        "target": "使用 TFLite 模型转换器转换成 TFLite 文件格式(FlatBuffers 格式)",
        "relation": "步骤"
      }
    ],
    "predecessors": []
  },
  "用户在自己的工作台中使用 TensorFlow API 构造 TensorFlow 模型": {
    "successors": [],
    "predecessors": [
      {
        "source": "TFLite 模型转换过程",
        "relation": "步骤"
      }
    ]
  },
  "使用 TFLite 模型转换器转换成 TFLite 文件格式(FlatBuffers 格式)": {
    "successors": [],
    "predecessors": [
      {
        "source": "TFLite 模型转换过程",
        "relation": "步骤"
      }
    ]
  },
  "TFLite 解释器": {
    "successors": [
      {
        "target": "接受 TFLite 模型",
        "relation": "用途"
      },
      {
        "target": "调用不同的硬件加速器比如 GPU 进行执行",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "接受 TFLite 模型": {
    "successors": [],
    "predecessors": [
      {
        "source": "TFLite 解释器",
        "relation": "用途"
      }
    ]
  },
  "调用不同的硬件加速器比如 GPU 进行执行": {
    "successors": [],
    "predecessors": [
      {
        "source": "TFLite 解释器",
        "relation": "用途"
      }
    ]
  },
  "TFLite 文件格式": {
    "successors": [
      {
        "target": "FlatBuffers 格式",
        "relation": "是"
      }
    ],
    "predecessors": []
  },
  "FlatBuffers 格式": {
    "successors": [],
    "predecessors": [
      {
        "source": "TFLite 文件格式",
        "relation": "是"
      }
    ]
  },
  "Keras模型": {
    "successors": [
      {
        "target": "TensorFlow Lite模型",
        "relation": "转换为"
      }
    ],
    "predecessors": []
  },
  "TensorFlow Lite模型": {
    "successors": [
      {
        "target": "model.tflite文件",
        "relation": "保存为"
      }
    ],
    "predecessors": [
      {
        "source": "Keras模型",
        "relation": "转换为"
      }
    ]
  },
  "model.tflite文件": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite模型",
        "relation": "保存为"
      }
    ]
  },
  "TensorFlow": {
    "successors": [
      {
        "target": "TensorFlow Lite",
        "relation": "包含"
      },
      {
        "target": "一个端到端的机器学习开源框架",
        "relation": "是什么"
      },
      {
        "target": "支持大规模的模型训练",
        "relation": "特点"
      },
      {
        "target": "支持各种环境的部署",
        "relation": "特点"
      },
      {
        "target": "支持多种编程语言",
        "relation": "特点"
      },
      {
        "target": "转换和运行 TensorFlow 模型的工具",
        "relation": "间接包含"
      },
      {
        "target": "Post training quantization 和 Quantization-aware training",
        "relation": "间接包含"
      },
      {
        "target": "特别为各种端侧设备优化的算子库",
        "relation": "间接包含"
      },
      {
        "target": "多种级别的量化支持",
        "relation": "间接包含"
      },
      {
        "target": "模型文件和标签文件",
        "relation": "间接包含"
      },
      {
        "target": "TensorFlow Lite 解释器(Interpreter)",
        "relation": "间接包含"
      },
      {
        "target": "TensorFlow Lite 转换器(Converter)",
        "relation": "间接包含"
      },
      {
        "target": "算子库(Op kernels)",
        "relation": "间接包含"
      },
      {
        "target": "硬件加速代理(Hardware accelerator delegate)",
        "relation": "间接包含"
      },
      {
        "target": "TensorFlow Lite 解释器、TensorFlow Lite 转换器、算子库、硬件加速代理",
        "relation": "间接包含"
      },
      {
        "target": "一个使用数据流图进行数值计算的开源软件库",
        "relation": "是什么"
      },
      {
        "target": "灵活的架构可以将模型部署到桌面、服务器或移动设备中的 CPU 或 GPU 上",
        "relation": "特点"
      },
      {
        "target": "必须与正在使用的 JetPack 版本一致",
        "relation": "版本要求"
      },
      {
        "target": "版本变化后API函数会改变",
        "relation": "特点"
      },
      {
        "target": "2.3.0版本",
        "relation": "示例"
      }
    ],
    "predecessors": []
  },
  "TensorFlow Lite 解释器(Interpreter)": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite",
        "relation": "组成部分"
      },
      {
        "source": "TensorFlow",
        "relation": "间接包含"
      }
    ]
  },
  "TensorFlow Lite 转换器(Converter)": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite",
        "relation": "组成部分"
      },
      {
        "source": "TensorFlow",
        "relation": "间接包含"
      }
    ]
  },
  "算子库(Op kernels)": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite",
        "relation": "组成部分"
      },
      {
        "source": "TensorFlow",
        "relation": "间接包含"
      }
    ]
  },
  "硬件加速代理(Hardware accelerator delegate)": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite",
        "relation": "组成部分"
      },
      {
        "source": "TensorFlow",
        "relation": "间接包含"
      }
    ]
  },
  "将 TensorFlow 模型转换为方便解释器使用的格式": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite 转换器",
        "relation": "用途"
      }
    ]
  },
  "引入优化以减小二进制文件的大小和提高性能": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite 转换器",
        "relation": "用途"
      }
    ]
  },
  "可在手机、嵌入式 Linux 设备和微控制器等很多不同类型的硬件上运行经过专门优化的模型": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite 解释器",
        "relation": "特点"
      },
      {
        "source": "TensorFlow Lite",
        "relation": "特点"
      }
    ]
  },
  "安卓应用只需 1 兆左右的运行环境，在 MCU 上甚至可以小于 100KB": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite 解释器",
        "relation": "特点"
      },
      {
        "source": "TensorFlow Lite",
        "relation": "特点"
      }
    ]
  },
  "TensorFlow Lite 算子库": {
    "successors": [
      {
        "target": "目前有130个左右",
        "relation": "特点"
      },
      {
        "target": "与 TensorFlow 的核心算子库略有不同，并做了移动设备相关的优化",
        "relation": "特点"
      }
    ],
    "predecessors": []
  },
  "目前有130个左右": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite 算子库",
        "relation": "特点"
      }
    ]
  },
  "与 TensorFlow 的核心算子库略有不同，并做了移动设备相关的优化": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite 算子库",
        "relation": "特点"
      }
    ]
  },
  "利用手机上的加速器，比如 GPU 或者 DSP": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite",
        "relation": "用途"
      },
      {
        "source": "tf.lite.TFLiteConverter",
        "relation": "可能用途"
      }
    ]
  },
  "利用 Android 神经网络 API（Android NN API)": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite",
        "relation": "用途"
      },
      {
        "source": "tf.lite.TFLiteConverter",
        "relation": "可能用途"
      }
    ]
  },
  "tf.saved_model.save": {
    "successors": [
      {
        "target": "生成SavedModel",
        "relation": "用途"
      },
      {
        "target": "model和保存目录路径",
        "relation": "参数"
      },
      {
        "target": "将 Keras 模型保存为 SavedModel 格式",
        "relation": "用途"
      },
      {
        "target": "保存模型",
        "relation": "用途"
      },
      {
        "target": "保存完整的TensorFlow模型",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "生成SavedModel": {
    "successors": [],
    "predecessors": [
      {
        "source": "tf.saved_model.save",
        "relation": "用途"
      }
    ]
  },
  "model和保存目录路径": {
    "successors": [],
    "predecessors": [
      {
        "source": "tf.saved_model.save",
        "relation": "参数"
      }
    ]
  },
  "TensorFlow模型的序列化格式": {
    "successors": [],
    "predecessors": [
      {
        "source": "SavedModel",
        "relation": "是"
      }
    ]
  },
  "可以跨平台部署": {
    "successors": [],
    "predecessors": [
      {
        "source": "SavedModel",
        "relation": "特点"
      }
    ]
  },
  "将输入的 TensorFlow 模型生成 TensorFlow Lite 模型": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite 转换器",
        "relation": "用途"
      }
    ]
  },
  "TensorFlow Lite 模型": {
    "successors": [
      {
        "target": "优化的 FlatBuffer 格式",
        "relation": "特点"
      },
      {
        "target": ".tflite",
        "relation": "文件扩展名"
      },
      {
        "target": "优化的 FlatBuffer 格式，以 .tflite 为文件扩展名",
        "relation": "特点"
      }
    ],
    "predecessors": []
  },
  "优化的 FlatBuffer 格式": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite 模型",
        "relation": "特点"
      }
    ]
  },
  ".tflite": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite 模型",
        "relation": "文件扩展名"
      }
    ]
  },
  "命令行与 Python API": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite 转换器",
        "relation": "使用方法"
      }
    ]
  },
  "Google": {
    "successors": [
      {
        "target": "使用 Python API 进行转换",
        "relation": "推荐"
      }
    ],
    "predecessors": []
  },
  "使用 Python API 进行转换": {
    "successors": [],
    "predecessors": [
      {
        "source": "Google",
        "relation": "推荐"
      }
    ]
  },
  "命令行工具": {
    "successors": [
      {
        "target": "只提供了基本的转化功能",
        "relation": "特点"
      }
    ],
    "predecessors": []
  },
  "只提供了基本的转化功能": {
    "successors": [],
    "predecessors": [
      {
        "source": "命令行工具",
        "relation": "特点"
      }
    ]
  },
  "主要应用于游戏场景": {
    "successors": [],
    "predecessors": [
      {
        "source": "FlatBuffers",
        "relation": "用途"
      }
    ]
  },
  "高性能场景创建的序列化库": {
    "successors": [],
    "predecessors": [
      {
        "source": "FlatBuffers",
        "relation": "特点"
      }
    ]
  },
  "相比 Protocol Buffer 有更高的性能和更小的大小": {
    "successors": [],
    "predecessors": [
      {
        "source": "FlatBuffers",
        "relation": "优点"
      }
    ]
  },
  "更适合于边缘设备部署": {
    "successors": [],
    "predecessors": [
      {
        "source": "FlatBuffers",
        "relation": "用途"
      }
    ]
  },
  "命令行 TensorFlow Lite 转换器命令行工具": {
    "successors": [],
    "predecessors": [
      {
        "source": "tflite_convert",
        "relation": "属于"
      }
    ]
  },
  "与 TensorFlow 一起安装": {
    "successors": [],
    "predecessors": [
      {
        "source": "tflite_convert",
        "relation": "安装方式"
      }
    ]
  },
  "--output_file": {
    "successors": [
      {
        "target": "Full path of the output file",
        "relation": "参数说明"
      },
      {
        "target": "指定输出文件的绝对路径",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "Full path of the output file": {
    "successors": [],
    "predecessors": [
      {
        "source": "--output_file",
        "relation": "参数说明"
      }
    ]
  },
  "--saved_model_dir": {
    "successors": [
      {
        "target": "Full path to the SavedModel directory",
        "relation": "参数说明"
      },
      {
        "target": "指定含有 TensorFlow 1.x 或者 2.0 使用 SavedModel 生成文件的绝对路径目录",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "Full path to the SavedModel directory": {
    "successors": [],
    "predecessors": [
      {
        "source": "--saved_model_dir",
        "relation": "参数说明"
      }
    ]
  },
  "--keras_model_file": {
    "successors": [
      {
        "target": "Full path to the Keras H5 model file",
        "relation": "参数说明"
      },
      {
        "target": "指定含有 TensorFlow 1.x 或者 2.0 使用 tf.keras model 生成 HDF5 文件的绝对路径目录",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "Full path to the Keras H5 model file": {
    "successors": [],
    "predecessors": [
      {
        "source": "--keras_model_file",
        "relation": "参数说明"
      }
    ]
  },
  "--enable_v1_converter": {
    "successors": [
      {
        "target": "Enables the converter and flags used in TF 1.x instead of TF 2.x",
        "relation": "参数说明"
      }
    ],
    "predecessors": []
  },
  "Enables the converter and flags used in TF 1.x instead of TF 2.x": {
    "successors": [],
    "predecessors": [
      {
        "source": "--enable_v1_converter",
        "relation": "参数说明"
      }
    ]
  },
  "打开现有 Android Studio 项目": {
    "successors": [],
    "predecessors": [
      {
        "source": "Android Studio",
        "relation": "用途"
      }
    ]
  },
  "启动图标": {
    "successors": [],
    "predecessors": [
      {
        "source": "Android Studio",
        "relation": "组成部分"
      }
    ]
  },
  "打开项目图标": {
    "successors": [],
    "predecessors": [
      {
        "source": "Android Studio",
        "relation": "组成部分"
      }
    ]
  },
  "flower_classification/android/finish": {
    "successors": [
      {
        "target": "工作目录",
        "relation": "属于"
      }
    ],
    "predecessors": []
  },
  "工作目录": {
    "successors": [],
    "predecessors": [
      {
        "source": "flower_classification/android/finish",
        "relation": "属于"
      }
    ]
  },
  "model.tflite": {
    "successors": [
      {
        "target": "TensorFlow Lite 模型文件",
        "relation": "属于"
      }
    ],
    "predecessors": []
  },
  "TensorFlow Lite 模型文件": {
    "successors": [],
    "predecessors": [
      {
        "source": "model.tflite",
        "relation": "属于"
      }
    ]
  },
  "label.txt": {
    "successors": [
      {
        "target": "标签文件",
        "relation": "属于"
      }
    ],
    "predecessors": []
  },
  "标签文件": {
    "successors": [],
    "predecessors": [
      {
        "source": "label.txt",
        "relation": "属于"
      }
    ]
  },
  "配置项目依赖": {
    "successors": [],
    "predecessors": [
      {
        "source": "build.gradle",
        "relation": "用途"
      }
    ]
  },
  "Gradle 同步": {
    "successors": [
      {
        "target": "首次打开项目时",
        "relation": "条件"
      }
    ],
    "predecessors": []
  },
  "首次打开项目时": {
    "successors": [],
    "predecessors": [
      {
        "source": "Gradle 同步",
        "relation": "条件"
      }
    ]
  },
  "tensorflow-lite": {
    "successors": [
      {
        "target": "导入 TensorFlow Lite 库",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "导入 TensorFlow Lite 库": {
    "successors": [],
    "predecessors": [
      {
        "source": "tensorflow-lite",
        "relation": "用途"
      }
    ]
  },
  "dependencies": {
    "successors": [
      {
        "target": "build.gradle",
        "relation": "组成部分"
      }
    ],
    "predecessors": []
  },
  "implementation('org.tensorflow:tensorflow-lite:+')": {
    "successors": [
      {
        "target": "添加 TensorFlow Lite 依赖",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "添加 TensorFlow Lite 依赖": {
    "successors": [],
    "predecessors": [
      {
        "source": "implementation('org.tensorflow:tensorflow-lite:+')",
        "relation": "用途"
      }
    ]
  },
  "tf.lite.TFLiteConverter.from_saved_model": {
    "successors": [
      {
        "target": "转换模型",
        "relation": "用途"
      },
      {
        "target": "saved_model_dir",
        "relation": "输入参数"
      },
      {
        "target": "将模型保存为TFLite兼容格式",
        "relation": "用途"
      },
      {
        "target": "将SavedModel转换为TFLite格式",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "转换模型": {
    "successors": [
      {
        "target": "使用 TensorFlow Lite 转换器将模型转换为 TensorFlow Lite 格式",
        "relation": "用途"
      }
    ],
    "predecessors": [
      {
        "source": "tf.lite.TFLiteConverter.from_saved_model",
        "relation": "用途"
      }
    ]
  },
  "saved_model_dir": {
    "successors": [],
    "predecessors": [
      {
        "source": "tf.lite.TFLiteConverter.from_saved_model",
        "relation": "输入参数"
      }
    ]
  },
  "TFLite 解释执行器": {
    "successors": [
      {
        "target": "轻量级",
        "relation": "特点"
      },
      {
        "target": "快速启动",
        "relation": "特点"
      },
      {
        "target": "内存高效",
        "relation": "特点"
      },
      {
        "target": "核心运行时",
        "relation": "组成部分"
      },
      {
        "target": "标准算子",
        "relation": "组成部分"
      },
      {
        "target": "加载模型",
        "relation": "执行步骤"
      },
      {
        "target": "转换数据",
        "relation": "执行步骤"
      },
      {
        "target": "运行模型推理",
        "relation": "执行步骤"
      },
      {
        "target": "解释输出",
        "relation": "执行步骤"
      }
    ],
    "predecessors": []
  },
  "轻量级": {
    "successors": [],
    "predecessors": [
      {
        "source": "TFLite 解释执行器",
        "relation": "特点"
      }
    ]
  },
  "快速启动": {
    "successors": [],
    "predecessors": [
      {
        "source": "TFLite 解释执行器",
        "relation": "特点"
      }
    ]
  },
  "内存高效": {
    "successors": [],
    "predecessors": [
      {
        "source": "TFLite 解释执行器",
        "relation": "特点"
      }
    ]
  },
  "核心运行时": {
    "successors": [],
    "predecessors": [
      {
        "source": "TFLite 解释执行器",
        "relation": "组成部分"
      }
    ]
  },
  "标准算子": {
    "successors": [],
    "predecessors": [
      {
        "source": "TFLite 解释执行器",
        "relation": "组成部分"
      }
    ]
  },
  "加载模型": {
    "successors": [],
    "predecessors": [
      {
        "source": "TFLite 解释执行器",
        "relation": "执行步骤"
      }
    ]
  },
  "转换数据": {
    "successors": [],
    "predecessors": [
      {
        "source": "TFLite 解释执行器",
        "relation": "执行步骤"
      }
    ]
  },
  "运行模型推理": {
    "successors": [],
    "predecessors": [
      {
        "source": "TFLite 解释执行器",
        "relation": "执行步骤"
      }
    ]
  },
  "解释输出": {
    "successors": [],
    "predecessors": [
      {
        "source": "TFLite 解释执行器",
        "relation": "执行步骤"
      }
    ]
  },
  "TFLite": {
    "successors": [
      {
        "target": "移动设备",
        "relation": "用途"
      },
      {
        "target": "Java",
        "relation": "支持语言"
      },
      {
        "target": "C++",
        "relation": "支持语言"
      },
      {
        "target": "Python",
        "relation": "支持语言"
      },
      {
        "target": "C",
        "relation": "支持语言"
      },
      {
        "target": "Object C",
        "relation": "支持语言"
      },
      {
        "target": "C#",
        "relation": "支持语言"
      },
      {
        "target": "Swift",
        "relation": "支持语言"
      },
      {
        "target": "从头编译",
        "relation": "部署方式"
      },
      {
        "target": "使用预编译库",
        "relation": "部署方式"
      },
      {
        "target": "Android JCenter Bintray 的 TFLite AAR",
        "relation": "部署方式"
      },
      {
        "target": "iOS CocoaPods",
        "relation": "部署方式"
      },
      {
        "target": "将模型转换为移动设备兼容格式",
        "relation": "用途"
      },
      {
        "target": "TensorFlow Lite的简称",
        "relation": "是"
      }
    ],
    "predecessors": []
  },
  "移动设备": {
    "successors": [],
    "predecessors": [
      {
        "source": "TFLite",
        "relation": "用途"
      }
    ]
  },
  "C++": {
    "successors": [],
    "predecessors": [
      {
        "source": "TFLite",
        "relation": "支持语言"
      }
    ]
  },
  "Python": {
    "successors": [
      {
        "target": "功能强大的编程语言，易于使用，易于阅读和编写",
        "relation": "特点"
      },
      {
        "target": "与树莓派结合可以将项目与现实世界轻松的联系起来",
        "relation": "用途"
      },
      {
        "target": "树莓派的官方编程语言",
        "relation": "是"
      }
    ],
    "predecessors": [
      {
        "source": "TFLite",
        "relation": "支持语言"
      }
    ]
  },
  "C": {
    "successors": [],
    "predecessors": [
      {
        "source": "TFLite",
        "relation": "支持语言"
      }
    ]
  },
  "Object C": {
    "successors": [],
    "predecessors": [
      {
        "source": "TFLite",
        "relation": "支持语言"
      }
    ]
  },
  "C#": {
    "successors": [],
    "predecessors": [
      {
        "source": "TFLite",
        "relation": "支持语言"
      }
    ]
  },
  "Swift": {
    "successors": [],
    "predecessors": [
      {
        "source": "TFLite",
        "relation": "支持语言"
      }
    ]
  },
  "从头编译": {
    "successors": [],
    "predecessors": [
      {
        "source": "TFLite",
        "relation": "部署方式"
      }
    ]
  },
  "使用预编译库": {
    "successors": [],
    "predecessors": [
      {
        "source": "TFLite",
        "relation": "部署方式"
      }
    ]
  },
  "Android JCenter Bintray 的 TFLite AAR": {
    "successors": [],
    "predecessors": [
      {
        "source": "TFLite",
        "relation": "部署方式"
      }
    ]
  },
  "iOS CocoaPods": {
    "successors": [],
    "predecessors": [
      {
        "source": "TFLite",
        "relation": "部署方式"
      }
    ]
  },
  "155层网络": {
    "successors": [],
    "predecessors": [
      {
        "source": "MobileNet V2",
        "relation": "组成部分"
      }
    ]
  },
  "取消冻结模型的顶层": {
    "successors": [],
    "predecessors": [
      {
        "source": "微调",
        "relation": "步骤"
      }
    ]
  },
  "设置前100层为不可训练": {
    "successors": [],
    "predecessors": [
      {
        "source": "微调",
        "relation": "步骤"
      }
    ]
  },
  "使用低学习率重新编译模型": {
    "successors": [],
    "predecessors": [
      {
        "source": "微调",
        "relation": "步骤"
      }
    ]
  },
  "提高模型准确率": {
    "successors": [],
    "predecessors": [
      {
        "source": "微调",
        "relation": "用途"
      }
    ]
  },
  "模型精度达到98%": {
    "successors": [],
    "predecessors": [
      {
        "source": "微调",
        "relation": "结果"
      }
    ]
  },
  "可能导致模型过拟合": {
    "successors": [],
    "predecessors": [
      {
        "source": "微调",
        "relation": "缺点"
      }
    ]
  },
  "将模型转换为移动设备兼容格式": {
    "successors": [],
    "predecessors": [
      {
        "source": "TFLite",
        "relation": "用途"
      }
    ]
  },
  "包含完整的TensorFlow程序": {
    "successors": [],
    "predecessors": [
      {
        "source": "SavedModel",
        "relation": "特点"
      }
    ]
  },
  "不需要原始模型构建代码就可以运行": {
    "successors": [],
    "predecessors": [
      {
        "source": "SavedModel",
        "relation": "用途"
      }
    ]
  },
  "模型训练": {
    "successors": [
      {
        "target": "设置model.trainable = False",
        "relation": "步骤"
      },
      {
        "target": "训练预训练模型的顶层权重",
        "relation": "步骤"
      },
      {
        "target": "在训练顶层分类器并将预训练模型设置为不可训练之后",
        "relation": "条件"
      },
      {
        "target": "精度达到98%",
        "relation": "结果"
      },
      {
        "target": "可能存在过度拟合",
        "relation": "缺点"
      }
    ],
    "predecessors": []
  },
  "设置model.trainable = False": {
    "successors": [],
    "predecessors": [
      {
        "source": "模型训练",
        "relation": "步骤"
      }
    ]
  },
  "训练预训练模型的顶层权重": {
    "successors": [],
    "predecessors": [
      {
        "source": "模型训练",
        "relation": "步骤"
      }
    ]
  },
  "在训练顶层分类器并将预训练模型设置为不可训练之后": {
    "successors": [],
    "predecessors": [
      {
        "source": "模型训练",
        "relation": "条件"
      }
    ]
  },
  "梯度下降": {
    "successors": [
      {
        "target": "可能导致预训练模型忘记已学内容",
        "relation": "缺点"
      }
    ],
    "predecessors": []
  },
  "可能导致预训练模型忘记已学内容": {
    "successors": [],
    "predecessors": [
      {
        "source": "梯度下降",
        "relation": "缺点"
      }
    ]
  },
  "mobilenetv2_1.00_224": {
    "successors": [
      {
        "target": "conv2d, dropout, global_average_pooling2d, dense",
        "relation": "组成部分"
      },
      {
        "target": "Total params: 2,626,821, Trainable params: 368,837, Non-trainable params: 2,257,984",
        "relation": "特点"
      }
    ],
    "predecessors": []
  },
  "conv2d, dropout, global_average_pooling2d, dense": {
    "successors": [],
    "predecessors": [
      {
        "source": "mobilenetv2_1.00_224",
        "relation": "组成部分"
      }
    ]
  },
  "Total params: 2,626,821, Trainable params: 368,837, Non-trainable params: 2,257,984": {
    "successors": [],
    "predecessors": [
      {
        "source": "mobilenetv2_1.00_224",
        "relation": "特点"
      }
    ]
  },
  "train_generator, steps_per_epoch=len(train_generator), epochs=epochs, validation_data=val_generator, validation_steps=len(val_generator)": {
    "successors": [],
    "predecessors": [
      {
        "source": "model.fit",
        "relation": "执行步骤"
      }
    ]
  },
  "设置 model.trainable = False": {
    "successors": [],
    "predecessors": [
      {
        "source": "微调",
        "relation": "条件"
      }
    ]
  },
  "训练预训练模型的顶层的权重以及刚添加的分类器的训练": {
    "successors": [],
    "predecessors": [
      {
        "source": "微调",
        "relation": "用途"
      }
    ]
  },
  "训练期间将不更新预训练网络的权重，只在 MobileNet V2基础模型上训练了几层": {
    "successors": [],
    "predecessors": [
      {
        "source": "微调",
        "relation": "特点"
      }
    ]
  },
  "预训练模型将忘记它学到的东西": {
    "successors": [],
    "predecessors": [
      {
        "source": "微调",
        "relation": "结果"
      }
    ]
  },
  "训练顶层分类器": {
    "successors": [],
    "predecessors": [
      {
        "source": "MobileNet V2",
        "relation": "用途"
      }
    ]
  },
  "前几层学习非常简单和通用的功能，这些功能可以推广到几乎所有类型的图像": {
    "successors": [],
    "predecessors": [
      {
        "source": "MobileNet V2",
        "relation": "特点"
      }
    ]
  },
  "train_generator": {
    "successors": [
      {
        "target": "从目录中生成训练数据批次",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "从目录中生成训练数据批次": {
    "successors": [],
    "predecessors": [
      {
        "source": "train_generator",
        "relation": "用途"
      }
    ]
  },
  "val_generator": {
    "successors": [
      {
        "target": "从目录中生成验证数据批次",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "从目录中生成验证数据批次": {
    "successors": [],
    "predecessors": [
      {
        "source": "val_generator",
        "relation": "用途"
      }
    ]
  },
  "可以指定目标尺寸、批次大小和子集类型": {
    "successors": [],
    "predecessors": [
      {
        "source": "flow_from_directory",
        "relation": "特点"
      }
    ]
  },
  "MobileNetV2": {
    "successors": [
      {
        "target": "一个预加载了ImageNet训练权重的深度学习模型",
        "relation": "是什么"
      },
      {
        "target": "作为迁移学习的基础模型",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "一个预加载了ImageNet训练权重的深度学习模型": {
    "successors": [],
    "predecessors": [
      {
        "source": "MobileNetV2",
        "relation": "是什么"
      }
    ]
  },
  "作为迁移学习的基础模型": {
    "successors": [],
    "predecessors": [
      {
        "source": "MobileNetV2",
        "relation": "用途"
      }
    ]
  },
  "MobileNetV2模型": {
    "successors": [],
    "predecessors": [
      {
        "source": "base_model",
        "relation": "组成部分"
      },
      {
        "source": "tf.keras.Sequential",
        "relation": "间接包含"
      }
    ]
  },
  "不包含顶层分类层": {
    "successors": [],
    "predecessors": [
      {
        "source": "base_model",
        "relation": "特点"
      }
    ]
  },
  "labels.txt": {
    "successors": [
      {
        "target": "保存训练数据的类别标签",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "保存训练数据的类别标签": {
    "successors": [],
    "predecessors": [
      {
        "source": "labels.txt",
        "relation": "用途"
      }
    ]
  },
  "TensorFlow Lite 开发工作流程": {
    "successors": [
      {
        "target": "选择模型、转换模型、部署到设备、优化模型",
        "relation": "执行步骤"
      }
    ],
    "predecessors": []
  },
  "选择模型、转换模型、部署到设备、优化模型": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite 开发工作流程",
        "relation": "执行步骤"
      },
      {
        "source": "TensorFlow Lite 工作流程",
        "relation": "步骤"
      },
      {
        "source": "TensorFlow Lite的工作流程",
        "relation": "包含"
      }
    ]
  },
  "选择模型": {
    "successors": [
      {
        "target": "可以使用自己的 TensorFlow 模型、在线查找模型，或者从的 TensorFlow 预训练模型中选择一个模型直接使用或重新训练",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "可以使用自己的 TensorFlow 模型、在线查找模型，或者从的 TensorFlow 预训练模型中选择一个模型直接使用或重新训练": {
    "successors": [],
    "predecessors": [
      {
        "source": "选择模型",
        "relation": "用途"
      }
    ]
  },
  "使用 TensorFlow Lite 转换器将模型转换为 TensorFlow Lite 格式": {
    "successors": [],
    "predecessors": [
      {
        "source": "转换模型",
        "relation": "用途"
      }
    ]
  },
  "部署到设备": {
    "successors": [
      {
        "target": "使用 TensorFlow Lite 解释器（提供多种语言的 API）在设备端运行模型",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "使用 TensorFlow Lite 解释器（提供多种语言的 API）在设备端运行模型": {
    "successors": [],
    "predecessors": [
      {
        "source": "部署到设备",
        "relation": "用途"
      }
    ]
  },
  "优化模型": {
    "successors": [
      {
        "target": "使用模型优化工具包缩减模型的大小并提高其效率，同时最大限度地降低对准确率的影响",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "使用模型优化工具包缩减模型的大小并提高其效率，同时最大限度地降低对准确率的影响": {
    "successors": [],
    "predecessors": [
      {
        "source": "优化模型",
        "relation": "用途"
      }
    ]
  },
  "提供多种语言的 API": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite 解释器",
        "relation": "特点"
      }
    ]
  },
  "模型优化工具包": {
    "successors": [
      {
        "target": "缩减模型的大小并提高其效率，同时最大限度地降低对准确率的影响",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "缩减模型的大小并提高其效率，同时最大限度地降低对准确率的影响": {
    "successors": [],
    "predecessors": [
      {
        "source": "模型优化工具包",
        "relation": "用途"
      }
    ]
  },
  "TensorFlow Lite解释器": {
    "successors": [
      {
        "target": "执行模型推理过程",
        "relation": "用途"
      },
      {
        "target": "模型执行流图",
        "relation": "组成部分"
      }
    ],
    "predecessors": []
  },
  "执行模型推理过程": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite解释器",
        "relation": "用途"
      }
    ]
  },
  "模型执行流图": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite解释器",
        "relation": "组成部分"
      }
    ]
  },
  "ClassifierFloatMobileNet类": {
    "successors": [
      {
        "target": "model.tflite和label.txt文件",
        "relation": "包含"
      }
    ],
    "predecessors": []
  },
  "model.tflite和label.txt文件": {
    "successors": [],
    "predecessors": [
      {
        "source": "ClassifierFloatMobileNet类",
        "relation": "包含"
      }
    ]
  },
  "Classifier类": {
    "successors": [
      {
        "target": "TFLite解释器和GPU代理",
        "relation": "包含"
      }
    ],
    "predecessors": []
  },
  "TFLite解释器和GPU代理": {
    "successors": [],
    "predecessors": [
      {
        "source": "Classifier类",
        "relation": "包含"
      }
    ]
  },
  "GPU代理": {
    "successors": [
      {
        "target": "加速模型推理过程",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "加速模型推理过程": {
    "successors": [],
    "predecessors": [
      {
        "source": "GPU代理",
        "relation": "用途"
      }
    ]
  },
  "TFLite解释器": {
    "successors": [
      {
        "target": "创建实例并加载模型",
        "relation": "执行步骤"
      },
      {
        "target": "在设备端运行TFLite模型",
        "relation": "用途"
      },
      {
        "target": "可以调用不同的硬件加速器比如GPU进行执行",
        "relation": "特点"
      }
    ],
    "predecessors": []
  },
  "创建实例并加载模型": {
    "successors": [],
    "predecessors": [
      {
        "source": "TFLite解释器",
        "relation": "执行步骤"
      }
    ]
  },
  "TensorFlow Lite支持库": {
    "successors": [
      {
        "target": "简化图像预处理和输出处理",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "简化图像预处理和输出处理": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite支持库",
        "relation": "用途"
      }
    ]
  },
  "ImageProcessor": {
    "successors": [
      {
        "target": "对输入图像进行预处理",
        "relation": "用途"
      },
      {
        "target": "调整大小、裁剪、旋转和归一化图像",
        "relation": "执行步骤"
      },
      {
        "target": "预处理输入图像",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "对输入图像进行预处理": {
    "successors": [],
    "predecessors": [
      {
        "source": "ImageProcessor",
        "relation": "用途"
      }
    ]
  },
  "调整大小、裁剪、旋转和归一化图像": {
    "successors": [],
    "predecessors": [
      {
        "source": "ImageProcessor",
        "relation": "执行步骤"
      }
    ]
  },
  "recognizeImage方法": {
    "successors": [
      {
        "target": "运行TFLite推理并获取输出概率",
        "relation": "执行步骤"
      }
    ],
    "predecessors": []
  },
  "运行TFLite推理并获取输出概率": {
    "successors": [],
    "predecessors": [
      {
        "source": "recognizeImage方法",
        "relation": "执行步骤"
      }
    ]
  },
  "TensorLabel": {
    "successors": [
      {
        "target": "将模型输出概率与类别标签关联",
        "relation": "用途"
      },
      {
        "target": "关联概率与类别标签",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "将模型输出概率与类别标签关联": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorLabel",
        "relation": "用途"
      }
    ]
  },
  "PoseNet模型": {
    "successors": [
      {
        "target": "实现人体姿势估计",
        "relation": "用途"
      },
      {
        "target": "检测关键身体部位的位置",
        "relation": "执行步骤"
      },
      {
        "target": "PoseNet",
        "relation": "可能与...相关"
      }
    ],
    "predecessors": []
  },
  "实现人体姿势估计": {
    "successors": [],
    "predecessors": [
      {
        "source": "PoseNet模型",
        "relation": "用途"
      },
      {
        "source": "PoseNet",
        "relation": "用途"
      }
    ]
  },
  "检测关键身体部位的位置": {
    "successors": [],
    "predecessors": [
      {
        "source": "PoseNet模型",
        "relation": "执行步骤"
      }
    ]
  },
  "PoseNet示例应用程序": {
    "successors": [
      {
        "target": "获取图像数据、处理位图、调用姿势估计函数、绘制关键点",
        "relation": "执行步骤"
      }
    ],
    "predecessors": []
  },
  "获取图像数据、处理位图、调用姿势估计函数、绘制关键点": {
    "successors": [],
    "predecessors": [
      {
        "source": "PoseNet示例应用程序",
        "relation": "执行步骤"
      }
    ]
  },
  "tf.keras.models.Sequential": {
    "successors": [
      {
        "target": "tf.keras.layers.Dense(units=1, input_shape=[1])",
        "relation": "组成部分"
      },
      {
        "target": "tf.keras.layers.Dense(units=16, activation='relu')",
        "relation": "组成部分"
      },
      {
        "target": "tf.keras.layers.Dense(units=1)",
        "relation": "组成部分"
      },
      {
        "target": "创建包含多个 Dense 层的模型",
        "relation": "示例"
      }
    ],
    "predecessors": []
  },
  "tf.keras.layers.Dense(units=1, input_shape=[1])": {
    "successors": [],
    "predecessors": [
      {
        "source": "tf.keras.models.Sequential",
        "relation": "组成部分"
      }
    ]
  },
  "tf.keras.layers.Dense(units=16, activation='relu')": {
    "successors": [],
    "predecessors": [
      {
        "source": "tf.keras.models.Sequential",
        "relation": "组成部分"
      }
    ]
  },
  "tf.keras.layers.Dense(units=1)": {
    "successors": [],
    "predecessors": [
      {
        "source": "tf.keras.models.Sequential",
        "relation": "组成部分"
      }
    ]
  },
  "配置模型的优化器和损失函数": {
    "successors": [],
    "predecessors": [
      {
        "source": "model.compile",
        "relation": "用途"
      }
    ]
  },
  "使用优化器'sgd'和损失函数'mean_squared_error'": {
    "successors": [],
    "predecessors": [
      {
        "source": "model.compile",
        "relation": "特点"
      }
    ]
  },
  "一个轻量、快速、兼容度高的专门针对移动式应用场景的深度学习工具": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite",
        "relation": "是什么"
      }
    ]
  },
  "在移动设备、嵌入式设备和 IoT 设备上运行 TensorFlow 模型": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite",
        "relation": "用途"
      },
      {
        "source": "tf.lite.TFLiteConverter",
        "relation": "可能用途"
      }
    ]
  },
  "二进制文件小、延迟低、支持设备端机器学习推断": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite",
        "relation": "特点"
      }
    ]
  },
  "TensorFlow Lite 解释器、TensorFlow Lite 转换器、算子库、硬件加速代理": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite",
        "relation": "组成部分"
      },
      {
        "source": "TensorFlow",
        "relation": "间接包含"
      }
    ]
  },
  "Google Assistant、Google Photos、Uber、Airbnb、网易、爱奇艺、WPS等": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite",
        "relation": "应用"
      }
    ]
  },
  "Android、iOS、基于 Linux 的 IoT 设备和微控制器": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite",
        "relation": "支持平台"
      }
    ]
  },
  "更轻量、特别为各种端侧设备优化的算子库、能够利用各种硬件加速": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite",
        "relation": "优点"
      }
    ]
  },
  "轻量级、快速启动、内存高效": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite 解释器",
        "relation": "特点"
      }
    ]
  },
  "将 TensorFlow 模型转换为 TensorFlow Lite 格式": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite 转换器",
        "relation": "用途"
      }
    ]
  },
  "算子优化和常见的编译优化、量化的原生支持": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite 转换器",
        "relation": "优化工作"
      }
    ]
  },
  "TFLite 模型文件格式，更注重考虑实时性，内存高效": {
    "successors": [],
    "predecessors": [
      {
        "source": "FlatBuffers",
        "relation": "用途"
      }
    ]
  },
  "TensorFlow Lite 工作流程": {
    "successors": [
      {
        "target": "选择模型、转换模型、部署到设备、优化模型",
        "relation": "步骤"
      }
    ],
    "predecessors": []
  },
  "提供训练好的模型供开发人员复用": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Hub",
        "relation": "用途"
      }
    ]
  },
  "图像识别模型": {
    "successors": [],
    "predecessors": [
      {
        "source": "MobileNet",
        "relation": "用途"
      }
    ]
  },
  "fine_tune_at": {
    "successors": [
      {
        "target": "指定从哪个层开始进行微调的参数",
        "relation": "是什么"
      },
      {
        "target": "控制迁移学习中微调的起始层",
        "relation": "用途"
      },
      {
        "target": "设置为100表示从第100层开始微调",
        "relation": "示例"
      }
    ],
    "predecessors": []
  },
  "指定从哪个层开始进行微调的参数": {
    "successors": [],
    "predecessors": [
      {
        "source": "fine_tune_at",
        "relation": "是什么"
      }
    ]
  },
  "控制迁移学习中微调的起始层": {
    "successors": [],
    "predecessors": [
      {
        "source": "fine_tune_at",
        "relation": "用途"
      }
    ]
  },
  "设置为100表示从第100层开始微调": {
    "successors": [],
    "predecessors": [
      {
        "source": "fine_tune_at",
        "relation": "示例"
      }
    ]
  },
  "优化的 FlatBuffer 格式，以 .tflite 为文件扩展名": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite 模型",
        "relation": "特点"
      }
    ]
  },
  "命令行工具和 Python API": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite 转换器",
        "relation": "组成部分"
      }
    ]
  },
  "主要应用于游戏场景，是为了高性能场景创建的序列化库": {
    "successors": [],
    "predecessors": [
      {
        "source": "FlatBuffers",
        "relation": "用途"
      }
    ]
  },
  "TensorFlow Lite 转换器命令行工具": {
    "successors": [],
    "predecessors": [
      {
        "source": "tflite_convert",
        "relation": "是"
      }
    ]
  },
  "--output_file, --saved_model_dir, --keras_model_file, --enable_v1_converter": {
    "successors": [],
    "predecessors": [
      {
        "source": "tflite_convert",
        "relation": "包含"
      }
    ]
  },
  "指定输出文件的绝对路径": {
    "successors": [],
    "predecessors": [
      {
        "source": "--output_file",
        "relation": "用途"
      }
    ]
  },
  "指定含有 TensorFlow 1.x 或者 2.0 使用 SavedModel 生成文件的绝对路径目录": {
    "successors": [],
    "predecessors": [
      {
        "source": "--saved_model_dir",
        "relation": "用途"
      }
    ]
  },
  "指定含有 TensorFlow 1.x 或者 2.0 使用 tf.keras model 生成 HDF5 文件的绝对路径目录": {
    "successors": [],
    "predecessors": [
      {
        "source": "--keras_model_file",
        "relation": "用途"
      }
    ]
  },
  "SavedModel 和 Keras Sequential": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow 模型导出",
        "relation": "包含"
      }
    ]
  },
  "将 TensorFlow 模型格式转换为 TensorFlow Lite 的 Python API": {
    "successors": [],
    "predecessors": [
      {
        "source": "tf.lite.TFLiteConverter",
        "relation": "是什么"
      }
    ]
  },
  "from_saved_model(), from_keras_model(), from_concrete_functions()": {
    "successors": [],
    "predecessors": [
      {
        "source": "tf.lite.TFLiteConverter",
        "relation": "包含"
      },
      {
        "source": "TensorFlow Lite 转换器",
        "relation": "间接包含"
      }
    ]
  },
  "TFLiteConverter.from_saved_model()": {
    "successors": [
      {
        "target": "用来转换 SavedModel 格式模型",
        "relation": "用途"
      },
      {
        "target": "转换 SavedModel 格式模型",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "用来转换 SavedModel 格式模型": {
    "successors": [],
    "predecessors": [
      {
        "source": "TFLiteConverter.from_saved_model()",
        "relation": "用途"
      }
    ]
  },
  "TFLiteConverter.from_keras_model()": {
    "successors": [
      {
        "target": "用来转换 tf.keras 模型",
        "relation": "用途"
      },
      {
        "target": "转换 tf.keras 模型",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "用来转换 tf.keras 模型": {
    "successors": [],
    "predecessors": [
      {
        "source": "TFLiteConverter.from_keras_model()",
        "relation": "用途"
      }
    ]
  },
  "TFLiteConverter.from_concrete_functions()": {
    "successors": [
      {
        "target": "用来转换 concrete functions",
        "relation": "用途"
      },
      {
        "target": "转换 concrete functions",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "用来转换 concrete functions": {
    "successors": [],
    "predecessors": [
      {
        "source": "TFLiteConverter.from_concrete_functions()",
        "relation": "用途"
      }
    ]
  },
  "TensorFlow 2.x 模型": {
    "successors": [
      {
        "target": "使用 SavedModel 格式存储",
        "relation": "特点"
      },
      {
        "target": "SavedModel 格式",
        "relation": "存储格式"
      },
      {
        "target": "高阶 tf.keras.* API（Keras 模型）或低阶 tf.* API（用于生成具体函数）",
        "relation": "生成方式"
      }
    ],
    "predecessors": []
  },
  "使用 SavedModel 格式存储": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow 2.x 模型",
        "relation": "特点"
      }
    ]
  },
  "将Keras模型转换为TensorFlow Lite模型": {
    "successors": [],
    "predecessors": [
      {
        "source": "tf.lite.TFLiteConverter",
        "relation": "用途"
      }
    ]
  },
  "tf.lite.TFLiteConverter.from_keras_model": {
    "successors": [
      {
        "target": "创建TFLiteConverter实例并加载Keras模型",
        "relation": "步骤"
      }
    ],
    "predecessors": []
  },
  "创建TFLiteConverter实例并加载Keras模型": {
    "successors": [],
    "predecessors": [
      {
        "source": "tf.lite.TFLiteConverter.from_keras_model",
        "relation": "步骤"
      }
    ]
  },
  "converter.convert": {
    "successors": [
      {
        "target": "执行模型转换过程生成TFLite模型",
        "relation": "步骤"
      }
    ],
    "predecessors": []
  },
  "执行模型转换过程生成TFLite模型": {
    "successors": [],
    "predecessors": [
      {
        "source": "converter.convert",
        "relation": "步骤"
      }
    ]
  },
  "在不同设备上使用硬件加速": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite 解释器",
        "relation": "用途"
      }
    ]
  },
  "委托（Delegates）": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite 解释器",
        "relation": "包含"
      },
      {
        "source": "花卉识别 app",
        "relation": "间接包含"
      }
    ]
  },
  "在 Android 与 iOS 平台上使用": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite 解释器",
        "relation": "用途"
      }
    ]
  },
  "Android 开发人员": {
    "successors": [
      {
        "target": "TensorFlow Lite AAR",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "TensorFlow Lite AAR": {
    "successors": [],
    "predecessors": [
      {
        "source": "Android 开发人员",
        "relation": "用途"
      }
    ]
  },
  "iOS 开发人员": {
    "successors": [
      {
        "target": "CocoaPods for Swift or Objective-C",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "CocoaPods for Swift or Objective-C": {
    "successors": [],
    "predecessors": [
      {
        "source": "iOS 开发人员",
        "relation": "用途"
      }
    ]
  },
  "部署在 Raspberry Pi 和基于 Arm64 的主板的嵌入式 Linux 系统上": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite 解释器",
        "relation": "用途"
      }
    ]
  },
  "一组帮助开发者在移动设备、嵌入式设备和 IoT 设备上运行 TensorFlow 模型的工具": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite",
        "relation": "是什么"
      }
    ]
  },
  "支持设备端机器学习推断": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite",
        "relation": "用途"
      },
      {
        "source": "tf.lite.TFLiteConverter",
        "relation": "可能用途"
      }
    ]
  },
  "延迟较低": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite",
        "relation": "特点"
      }
    ]
  },
  "二进制文件很小": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite",
        "relation": "特点"
      }
    ]
  },
  "一个端到端的机器学习开源框架": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow",
        "relation": "是什么"
      }
    ]
  },
  "支持大规模的模型训练": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow",
        "relation": "特点"
      }
    ]
  },
  "支持各种环境的部署": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow",
        "relation": "特点"
      }
    ]
  },
  "支持多种编程语言": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow",
        "relation": "特点"
      }
    ]
  },
  "移动端及IoT设备端的深度学习技术": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite",
        "relation": "用途"
      },
      {
        "source": "tf.lite.TFLiteConverter",
        "relation": "可能用途"
      }
    ]
  },
  "轻量化": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite",
        "relation": "特点"
      }
    ]
  },
  "快速": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite",
        "relation": "特点"
      }
    ]
  },
  "兼容度高": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite",
        "relation": "特点"
      }
    ]
  },
  "大大降低移动端及IoT设备端的深度学习技术门槛": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite",
        "relation": "结果"
      }
    ]
  },
  "转换 SavedModel 格式模型": {
    "successors": [],
    "predecessors": [
      {
        "source": "TFLiteConverter.from_saved_model()",
        "relation": "用途"
      }
    ]
  },
  "转换 tf.keras 模型": {
    "successors": [],
    "predecessors": [
      {
        "source": "TFLiteConverter.from_keras_model()",
        "relation": "用途"
      }
    ]
  },
  "转换 concrete functions": {
    "successors": [],
    "predecessors": [
      {
        "source": "TFLiteConverter.from_concrete_functions()",
        "relation": "用途"
      }
    ]
  },
  "SavedModel 格式": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow 2.x 模型",
        "relation": "存储格式"
      }
    ]
  },
  "高阶 tf.keras.* API（Keras 模型）或低阶 tf.* API（用于生成具体函数）": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow 2.x 模型",
        "relation": "生成方式"
      }
    ]
  },
  "创建包含多个 Dense 层的模型": {
    "successors": [],
    "predecessors": [
      {
        "source": "tf.keras.models.Sequential",
        "relation": "示例"
      }
    ]
  },
  "tf.keras.layers.Dense": {
    "successors": [
      {
        "target": "构建神经网络的全连接层",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "构建神经网络的全连接层": {
    "successors": [],
    "predecessors": [
      {
        "source": "tf.keras.layers.Dense",
        "relation": "用途"
      }
    ]
  },
  "编译模型，设置优化器和损失函数": {
    "successors": [],
    "predecessors": [
      {
        "source": "model.compile",
        "relation": "用途"
      }
    ]
  },
  "将 Keras 模型保存为 SavedModel 格式": {
    "successors": [],
    "predecessors": [
      {
        "source": "tf.saved_model.save",
        "relation": "用途"
      }
    ]
  },
  "微调过程": {
    "successors": [
      {
        "target": "冻结前100层",
        "relation": "步骤"
      },
      {
        "target": "使用低学习率编译模型",
        "relation": "步骤"
      },
      {
        "target": "恢复训练",
        "relation": "步骤"
      }
    ],
    "predecessors": []
  },
  "冻结前100层": {
    "successors": [],
    "predecessors": [
      {
        "source": "微调过程",
        "relation": "步骤"
      }
    ]
  },
  "使用低学习率编译模型": {
    "successors": [],
    "predecessors": [
      {
        "source": "微调过程",
        "relation": "步骤"
      }
    ]
  },
  "恢复训练": {
    "successors": [],
    "predecessors": [
      {
        "source": "微调过程",
        "relation": "步骤"
      }
    ]
  },
  "模型编译": {
    "successors": [
      {
        "target": "优化损失函数和准确率",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "优化损失函数和准确率": {
    "successors": [],
    "predecessors": [
      {
        "source": "模型编译",
        "relation": "用途"
      }
    ]
  },
  "精度达到98%": {
    "successors": [],
    "predecessors": [
      {
        "source": "模型训练",
        "relation": "结果"
      }
    ]
  },
  "可能存在过度拟合": {
    "successors": [],
    "predecessors": [
      {
        "source": "模型训练",
        "relation": "缺点"
      }
    ]
  },
  "移动端模型部署": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite",
        "relation": "用途"
      },
      {
        "source": "tf.lite.TFLiteConverter",
        "relation": "可能用途"
      }
    ]
  },
  "TFLiteConverter": {
    "successors": [
      {
        "target": "将SavedModel转换为TFLite格式",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "将SavedModel转换为TFLite格式": {
    "successors": [],
    "predecessors": [
      {
        "source": "TFLiteConverter",
        "relation": "用途"
      },
      {
        "source": "tf.lite.TFLiteConverter.from_saved_model",
        "relation": "用途"
      }
    ]
  },
  "Android部署": {
    "successors": [
      {
        "target": "拷贝模型和标签文件到assets目录",
        "relation": "步骤"
      },
      {
        "target": "配置build.gradle文件",
        "relation": "步骤"
      },
      {
        "target": "初始化TensorFlow Lite解释器",
        "relation": "步骤"
      }
    ],
    "predecessors": []
  },
  "拷贝模型和标签文件到assets目录": {
    "successors": [],
    "predecessors": [
      {
        "source": "Android部署",
        "relation": "步骤"
      }
    ]
  },
  "配置build.gradle文件": {
    "successors": [],
    "predecessors": [
      {
        "source": "Android部署",
        "relation": "步骤"
      }
    ]
  },
  "初始化TensorFlow Lite解释器": {
    "successors": [],
    "predecessors": [
      {
        "source": "Android部署",
        "relation": "步骤"
      }
    ]
  },
  "Interpreter": {
    "successors": [
      {
        "target": "执行TFLite模型推理",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "执行TFLite模型推理": {
    "successors": [],
    "predecessors": [
      {
        "source": "Interpreter",
        "relation": "用途"
      }
    ]
  },
  "GpuDelegate": {
    "successors": [
      {
        "target": "加速GPU上的模型推理",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "加速GPU上的模型推理": {
    "successors": [],
    "predecessors": [
      {
        "source": "GpuDelegate",
        "relation": "用途"
      }
    ]
  },
  "预处理输入图像": {
    "successors": [],
    "predecessors": [
      {
        "source": "ImageProcessor",
        "relation": "用途"
      }
    ]
  },
  "关联概率与类别标签": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorLabel",
        "relation": "用途"
      }
    ]
  },
  "PoseNet": {
    "successors": [
      {
        "target": "实现人体姿势估计",
        "relation": "用途"
      },
      {
        "target": "检测关键身体部位位置",
        "relation": "特点"
      }
    ],
    "predecessors": [
      {
        "source": "PoseNet模型",
        "relation": "可能与...相关"
      }
    ]
  },
  "检测关键身体部位位置": {
    "successors": [],
    "predecessors": [
      {
        "source": "PoseNet",
        "relation": "特点"
      }
    ]
  },
  "/usr/bin/python": {
    "successors": [
      {
        "target": "软链接",
        "relation": "是"
      },
      {
        "target": "python",
        "relation": "指向"
      }
    ],
    "predecessors": []
  },
  "软链接": {
    "successors": [],
    "predecessors": [
      {
        "source": "/usr/bin/python",
        "relation": "是"
      }
    ]
  },
  "python": {
    "successors": [],
    "predecessors": [
      {
        "source": "/usr/bin/python",
        "relation": "指向"
      }
    ]
  },
  "树莓派系统": {
    "successors": [
      {
        "target": "直接更新树莓派系统",
        "relation": "升级方法"
      },
      {
        "target": "下载特定版本的Python",
        "relation": "升级方法"
      }
    ],
    "predecessors": []
  },
  "直接更新树莓派系统": {
    "successors": [],
    "predecessors": [
      {
        "source": "树莓派系统",
        "relation": "升级方法"
      }
    ]
  },
  "下载特定版本的Python": {
    "successors": [],
    "predecessors": [
      {
        "source": "树莓派系统",
        "relation": "升级方法"
      }
    ]
  },
  "树莓派系统升级": {
    "successors": [
      {
        "target": "需要root权限",
        "relation": "条件"
      },
      {
        "target": "更换国内源如阿里、清华",
        "relation": "优化方法"
      }
    ],
    "predecessors": []
  },
  "需要root权限": {
    "successors": [],
    "predecessors": [
      {
        "source": "树莓派系统升级",
        "relation": "条件"
      }
    ]
  },
  "更换国内源如阿里、清华": {
    "successors": [],
    "predecessors": [
      {
        "source": "树莓派系统升级",
        "relation": "优化方法"
      }
    ]
  },
  "清华源": {
    "successors": [
      {
        "target": "Raspbian软件仓库镜像",
        "relation": "示例"
      }
    ],
    "predecessors": []
  },
  "Raspbian软件仓库镜像": {
    "successors": [],
    "predecessors": [
      {
        "source": "清华源",
        "relation": "示例"
      }
    ]
  },
  "软件源配置文件": {
    "successors": [
      {
        "target": "/etc/apt/sources.list",
        "relation": "位置"
      },
      {
        "target": "nano或vi",
        "relation": "编辑工具"
      }
    ],
    "predecessors": []
  },
  "/etc/apt/sources.list": {
    "successors": [],
    "predecessors": [
      {
        "source": "软件源配置文件",
        "relation": "位置"
      }
    ]
  },
  "nano或vi": {
    "successors": [],
    "predecessors": [
      {
        "source": "软件源配置文件",
        "relation": "编辑工具"
      }
    ]
  },
  "Python安装": {
    "successors": [
      {
        "target": "安装依赖",
        "relation": "步骤"
      }
    ],
    "predecessors": []
  },
  "安装依赖": {
    "successors": [],
    "predecessors": [
      {
        "source": "Python安装",
        "relation": "步骤"
      }
    ]
  },
  "功能强大的编程语言，易于使用，易于阅读和编写": {
    "successors": [],
    "predecessors": [
      {
        "source": "Python",
        "relation": "特点"
      }
    ]
  },
  "与树莓派结合可以将项目与现实世界轻松的联系起来": {
    "successors": [],
    "predecessors": [
      {
        "source": "Python",
        "relation": "用途"
      }
    ]
  },
  "树莓派": {
    "successors": [
      {
        "target": "默认已安装的Python开发环境",
        "relation": "包含"
      },
      {
        "target": "测试Python开发环境并查看当前Python版本",
        "relation": "用途"
      },
      {
        "target": "运行Jupyter lab服务",
        "relation": "用途"
      },
      {
        "target": "控制外部硬件设备",
        "relation": "用途"
      },
      {
        "target": "GPIO引脚",
        "relation": "组成部分"
      },
      {
        "target": "教育",
        "relation": "用途"
      },
      {
        "target": "廉价且周边设备多",
        "relation": "特点"
      },
      {
        "target": "Linux开发环境",
        "relation": "是"
      },
      {
        "target": "40个GPIO引脚",
        "relation": "包含"
      },
      {
        "target": "安装Python",
        "relation": "用途"
      },
      {
        "target": "树莓派",
        "relation": "可能与...相关"
      }
    ],
    "predecessors": [
      {
        "source": "树莓派",
        "relation": "可能与...相关"
      }
    ]
  },
  "默认已安装的Python开发环境": {
    "successors": [],
    "predecessors": [
      {
        "source": "树莓派",
        "relation": "包含"
      }
    ]
  },
  "测试Python开发环境并查看当前Python版本": {
    "successors": [],
    "predecessors": [
      {
        "source": "树莓派",
        "relation": "用途"
      }
    ]
  },
  "train_ds, validation_data=val_ds, epochs=NUM_EPOCHS, callbacks=tensorboard_callback": {
    "successors": [],
    "predecessors": [
      {
        "source": "model.fit",
        "relation": "组成部分"
      }
    ]
  },
  "保存模型": {
    "successors": [],
    "predecessors": [
      {
        "source": "tf.saved_model.save",
        "relation": "用途"
      }
    ]
  },
  "包含一个完整的TensorFlow程序，不仅包含权重值，还包含计算": {
    "successors": [],
    "predecessors": [
      {
        "source": "SavedModel",
        "relation": "特点"
      }
    ]
  },
  "将模型保存为TFLite兼容格式": {
    "successors": [],
    "predecessors": [
      {
        "source": "tf.lite.TFLiteConverter.from_saved_model",
        "relation": "用途"
      }
    ]
  },
  "Jetson Nano": {
    "successors": [
      {
        "target": "部署TensorFlow Lite模型",
        "relation": "用途"
      },
      {
        "target": "资源有限，不能训练网络，可能导致内存溢出",
        "relation": "缺点"
      },
      {
        "target": "连接显示器、键盘和鼠标或通过SSH/VNC远程访问",
        "relation": "交互方式"
      },
      {
        "target": "OpenCV",
        "relation": "包含"
      },
      {
        "target": "移动行业处理器接口（MIPI）的相机串行接口（CSI）端口",
        "relation": "包含"
      },
      {
        "target": "机器学习和计算机视觉应用，如物体检测、人脸识别、图像分割等视觉任务",
        "relation": "用途"
      },
      {
        "target": "运行各种深度学习模型",
        "relation": "用途"
      },
      {
        "target": "构建小型移动机器人、人脸签到打卡、口罩识别、智能门锁、智能音箱等复杂 AI 系统",
        "relation": "用途"
      },
      {
        "target": "microSD 卡",
        "relation": "组成部分"
      },
      {
        "target": "Micro-USB 接口",
        "relation": "组成部分"
      },
      {
        "target": "不包括无线网卡",
        "relation": "缺点"
      },
      {
        "target": "Ethernet 有线网络",
        "relation": "组成部分"
      },
      {
        "target": "已经训练好的分类器，其中包括面部，眼睛，微笑等",
        "relation": "间接包含"
      }
    ],
    "predecessors": []
  },
  "部署TensorFlow Lite模型": {
    "successors": [],
    "predecessors": [
      {
        "source": "Jetson Nano",
        "relation": "用途"
      }
    ]
  },
  "class_names": {
    "successors": [
      {
        "target": "郁金香(tulips)、玫瑰(roses)、浦公英(dandelion)、向日葵(sunflowers)、雏菊(daisy)",
        "relation": "包含"
      },
      {
        "target": "['daisy', 'dandelion', 'roses', 'sunflowers', 'tulips']",
        "relation": "包含"
      },
      {
        "target": "daisy, dandelion, roses, sunflowers, tulips",
        "relation": "包含"
      }
    ],
    "predecessors": []
  },
  "郁金香(tulips)、玫瑰(roses)、浦公英(dandelion)、向日葵(sunflowers)、雏菊(daisy)": {
    "successors": [],
    "predecessors": [
      {
        "source": "class_names",
        "relation": "包含"
      }
    ]
  },
  "资源有限，不能训练网络，可能导致内存溢出": {
    "successors": [],
    "predecessors": [
      {
        "source": "Jetson Nano",
        "relation": "缺点"
      }
    ]
  },
  "batch_size": {
    "successors": [
      {
        "target": "受限于GPU内存的大小",
        "relation": "条件"
      },
      {
        "target": "默认值为32，可以设置为64",
        "relation": "特点"
      }
    ],
    "predecessors": []
  },
  "受限于GPU内存的大小": {
    "successors": [],
    "predecessors": [
      {
        "source": "batch_size",
        "relation": "条件"
      }
    ]
  },
  "识别输入图像": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite",
        "relation": "用途"
      }
    ]
  },
  "无需使用ByteBuffer来处理图像，提供了方便的支持库来简化图像预处理": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite",
        "relation": "特点"
      }
    ]
  },
  "数据转换": {
    "successors": [
      {
        "target": "将输入数据转换成模型接收的形式或排布，如resize原始图像到模型输入大小",
        "relation": "步骤"
      }
    ],
    "predecessors": []
  },
  "将输入数据转换成模型接收的形式或排布，如resize原始图像到模型输入大小": {
    "successors": [],
    "predecessors": [
      {
        "source": "数据转换",
        "relation": "步骤"
      }
    ]
  },
  "GPIO库": {
    "successors": [
      {
        "target": "控制GPIO引脚",
        "relation": "用途"
      }
    ],
    "predecessors": [
      {
        "source": "Wiring Pi",
        "relation": "包含"
      }
    ]
  },
  "控制GPIO引脚": {
    "successors": [],
    "predecessors": [
      {
        "source": "GPIO库",
        "relation": "用途"
      }
    ]
  },
  "GPIO引脚编号模式": {
    "successors": [
      {
        "target": "BCM编号方式",
        "relation": "包含"
      }
    ],
    "predecessors": []
  },
  "BCM编号方式": {
    "successors": [],
    "predecessors": [
      {
        "source": "GPIO引脚编号模式",
        "relation": "包含"
      }
    ]
  },
  "GPIO21": {
    "successors": [
      {
        "target": "LED的控制引脚",
        "relation": "用途"
      },
      {
        "target": "输出模式",
        "relation": "组成部分"
      },
      {
        "target": "激活、设置为输出状态、写入1",
        "relation": "执行步骤"
      },
      {
        "target": "PIN处于高电压点亮LED",
        "relation": "结果"
      }
    ],
    "predecessors": []
  },
  "LED的控制引脚": {
    "successors": [],
    "predecessors": [
      {
        "source": "GPIO21",
        "relation": "用途"
      }
    ]
  },
  "GPIO.setup()方法": {
    "successors": [
      {
        "target": "设置GPIO引脚模式",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "设置GPIO引脚模式": {
    "successors": [],
    "predecessors": [
      {
        "source": "GPIO.setup()方法",
        "relation": "用途"
      }
    ]
  },
  "输出模式": {
    "successors": [],
    "predecessors": [
      {
        "source": "GPIO21",
        "relation": "组成部分"
      }
    ]
  },
  "HIGH电平": {
    "successors": [
      {
        "target": "点亮LED灯",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "点亮LED灯": {
    "successors": [
      {
        "target": "连接LED灯和限流电阻到GPIO21和GND",
        "relation": "步骤"
      },
      {
        "target": "面包板、杜邦线公对母、LED灯、330欧姆电阻",
        "relation": "所需硬件"
      }
    ],
    "predecessors": [
      {
        "source": "HIGH电平",
        "relation": "用途"
      }
    ]
  },
  "time.sleep()方法": {
    "successors": [
      {
        "target": "延迟一秒钟",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "延迟一秒钟": {
    "successors": [],
    "predecessors": [
      {
        "source": "time.sleep()方法",
        "relation": "用途"
      }
    ]
  },
  "LOW电平": {
    "successors": [
      {
        "target": "关闭LED灯",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "关闭LED灯": {
    "successors": [],
    "predecessors": [
      {
        "source": "LOW电平",
        "relation": "用途"
      }
    ]
  },
  "GPIO.cleanup()方法": {
    "successors": [
      {
        "target": "清理GPIO引脚的设置",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "清理GPIO引脚的设置": {
    "successors": [],
    "predecessors": [
      {
        "source": "GPIO.cleanup()方法",
        "relation": "用途"
      }
    ]
  },
  "四引脚按键": {
    "successors": [
      {
        "target": "控制LED灯的亮暗",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "控制LED灯的亮暗": {
    "successors": [],
    "predecessors": [
      {
        "source": "四引脚按键",
        "relation": "用途"
      }
    ]
  },
  "四脚按键": {
    "successors": [
      {
        "target": "由常开触点、常闭触点组合而成",
        "relation": "工作原理"
      }
    ],
    "predecessors": []
  },
  "由常开触点、常闭触点组合而成": {
    "successors": [],
    "predecessors": [
      {
        "source": "四脚按键",
        "relation": "工作原理"
      }
    ]
  },
  "常开触点": {
    "successors": [
      {
        "target": "当压力施压时电路接通",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "当压力施压时电路接通": {
    "successors": [],
    "predecessors": [
      {
        "source": "常开触点",
        "relation": "用途"
      }
    ]
  },
  "常闭触点": {
    "successors": [
      {
        "target": "当压力撤销时电路断开",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "当压力撤销时电路断开": {
    "successors": [],
    "predecessors": [
      {
        "source": "常闭触点",
        "relation": "用途"
      }
    ]
  },
  "上拉电阻": {
    "successors": [
      {
        "target": "在18号引脚处设置",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "在18号引脚处设置": {
    "successors": [],
    "predecessors": [
      {
        "source": "上拉电阻",
        "relation": "用途"
      }
    ]
  },
  "GPIO.setup(18, GPIO.IN, pull_up_down=GPIO.PUD_UP)": {
    "successors": [
      {
        "target": "设置上拉电阻",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "设置上拉电阻": {
    "successors": [],
    "predecessors": [
      {
        "source": "GPIO.setup(18, GPIO.IN, pull_up_down=GPIO.PUD_UP)",
        "relation": "用途"
      }
    ]
  },
  "边缘操作": {
    "successors": [
      {
        "target": "观测开关去抖效果",
        "relation": "用途"
      },
      {
        "target": "print(\"button pressed!\")",
        "relation": "可能与...相关"
      }
    ],
    "predecessors": []
  },
  "观测开关去抖效果": {
    "successors": [],
    "predecessors": [
      {
        "source": "边缘操作",
        "relation": "用途"
      },
      {
        "source": "print(\"button pressed!\")",
        "relation": "用途"
      }
    ]
  },
  "print(\"button pressed!\")": {
    "successors": [
      {
        "target": "观测开关去抖效果",
        "relation": "用途"
      }
    ],
    "predecessors": [
      {
        "source": "边缘操作",
        "relation": "可能与...相关"
      }
    ]
  },
  "RPI.GPIO库": {
    "successors": [
      {
        "target": "wait_for_edge()函数",
        "relation": "包含"
      },
      {
        "target": "add_event_detect()函数",
        "relation": "包含"
      }
    ],
    "predecessors": []
  },
  "wait_for_edge()函数": {
    "successors": [
      {
        "target": "阻塞函数，会阻塞程序执行，直到检测到一个边沿",
        "relation": "特点"
      }
    ],
    "predecessors": [
      {
        "source": "RPI.GPIO库",
        "relation": "包含"
      }
    ]
  },
  "add_event_detect()函数": {
    "successors": [
      {
        "target": "增加一个事件的检测函数",
        "relation": "特点"
      }
    ],
    "predecessors": [
      {
        "source": "RPI.GPIO库",
        "relation": "包含"
      }
    ]
  },
  "边缘": {
    "successors": [
      {
        "target": "电信号从低电平到高电平，或从高电平到低电平状态的改变",
        "relation": "定义"
      }
    ],
    "predecessors": []
  },
  "电信号从低电平到高电平，或从高电平到低电平状态的改变": {
    "successors": [],
    "predecessors": [
      {
        "source": "边缘",
        "relation": "定义"
      }
    ]
  },
  "阻塞函数，会阻塞程序执行，直到检测到一个边沿": {
    "successors": [],
    "predecessors": [
      {
        "source": "wait_for_edge()函数",
        "relation": "特点"
      }
    ]
  },
  "增加一个事件的检测函数": {
    "successors": [],
    "predecessors": [
      {
        "source": "add_event_detect()函数",
        "relation": "特点"
      }
    ]
  },
  "pip install": {
    "successors": [
      {
        "target": "安装Python包",
        "relation": "用途"
      },
      {
        "target": "可以添加--no-cache-dir参数来避免缓存问题",
        "relation": "特点"
      }
    ],
    "predecessors": []
  },
  "安装Python包": {
    "successors": [],
    "predecessors": [
      {
        "source": "pip install",
        "relation": "用途"
      }
    ]
  },
  "可以添加--no-cache-dir参数来避免缓存问题": {
    "successors": [],
    "predecessors": [
      {
        "source": "pip install",
        "relation": "特点"
      }
    ]
  },
  "jupyter": {
    "successors": [
      {
        "target": "配置文件jupyter_notebook_config.py",
        "relation": "组成部分"
      }
    ],
    "predecessors": []
  },
  "配置文件jupyter_notebook_config.py": {
    "successors": [],
    "predecessors": [
      {
        "source": "jupyter",
        "relation": "组成部分"
      }
    ]
  },
  "jupyter_notebook_config.py": {
    "successors": [
      {
        "target": "由jupyter软件自动生成",
        "relation": "特点"
      },
      {
        "target": "配置Jupyter lab的运行参数",
        "relation": "用途"
      },
      {
        "target": "运行服务监听的IP地址、端口、notebooks内核目录、浏览器开关设置",
        "relation": "包含"
      }
    ],
    "predecessors": []
  },
  "由jupyter软件自动生成": {
    "successors": [],
    "predecessors": [
      {
        "source": "jupyter_notebook_config.py",
        "relation": "特点"
      }
    ]
  },
  "配置Jupyter lab的运行参数": {
    "successors": [],
    "predecessors": [
      {
        "source": "jupyter_notebook_config.py",
        "relation": "用途"
      }
    ]
  },
  "运行服务监听的IP地址、端口、notebooks内核目录、浏览器开关设置": {
    "successors": [],
    "predecessors": [
      {
        "source": "jupyter_notebook_config.py",
        "relation": "包含"
      }
    ]
  },
  "Jupyter lab": {
    "successors": [
      {
        "target": "提供交互式编程环境",
        "relation": "用途"
      },
      {
        "target": "可以设置访问密码增强安全性",
        "relation": "特点"
      },
      {
        "target": "通过 pip 安装 Jupyter lab，如果网络环境较差导致下载软件包慢，可以考虑更换源",
        "relation": "安装步骤"
      }
    ],
    "predecessors": []
  },
  "提供交互式编程环境": {
    "successors": [],
    "predecessors": [
      {
        "source": "Jupyter lab",
        "relation": "用途"
      }
    ]
  },
  "可以设置访问密码增强安全性": {
    "successors": [],
    "predecessors": [
      {
        "source": "Jupyter lab",
        "relation": "特点"
      }
    ]
  },
  "运行Jupyter lab服务": {
    "successors": [],
    "predecessors": [
      {
        "source": "树莓派",
        "relation": "用途"
      }
    ]
  },
  "minNeighbors": {
    "successors": [
      {
        "target": "构成检测目标的相邻矩形的最小个数",
        "relation": "定义"
      }
    ],
    "predecessors": []
  },
  "构成检测目标的相邻矩形的最小个数": {
    "successors": [],
    "predecessors": [
      {
        "source": "minNeighbors",
        "relation": "定义"
      }
    ]
  },
  "Haar特征的cascade分类器": {
    "successors": [
      {
        "target": "检测人脸",
        "relation": "用途"
      },
      {
        "target": "Haar特征的cascade分类器",
        "relation": "可能与...相关"
      }
    ],
    "predecessors": [
      {
        "source": "Haar特征的cascade分类器",
        "relation": "可能与...相关"
      }
    ]
  },
  "检测人脸": {
    "successors": [],
    "predecessors": [
      {
        "source": "Haar特征的cascade分类器",
        "relation": "用途"
      }
    ]
  },
  "OpenCV": {
    "successors": [
      {
        "target": "调用CSI摄像头和USB摄像头",
        "relation": "用途"
      },
      {
        "target": "计算机视觉应用",
        "relation": "用途"
      },
      {
        "target": "安装依赖项",
        "relation": "安装步骤"
      },
      {
        "target": "下载 OpenCV",
        "relation": "安装步骤"
      },
      {
        "target": "编译 OpenCV",
        "relation": "安装步骤"
      },
      {
        "target": "安装 OpenCV 项目",
        "relation": "安装步骤"
      },
      {
        "target": "不支持 CUDA 且版本是固定搭配的",
        "relation": "特点"
      },
      {
        "target": "已经训练好的分类器，其中包括面部，眼睛，微笑等",
        "relation": "包含"
      },
      {
        "target": "TensorFlow GPU 版本",
        "relation": "可能与...相关"
      }
    ],
    "predecessors": [
      {
        "source": "Jetson Nano",
        "relation": "包含"
      }
    ]
  },
  "调用CSI摄像头和USB摄像头": {
    "successors": [],
    "predecessors": [
      {
        "source": "OpenCV",
        "relation": "用途"
      }
    ]
  },
  "CSI摄像头": {
    "successors": [
      {
        "target": "需要使用GStreamer读取视频流",
        "relation": "特点"
      },
      {
        "target": "机器学习和计算机视觉应用",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "需要使用GStreamer读取视频流": {
    "successors": [],
    "predecessors": [
      {
        "source": "CSI摄像头",
        "relation": "特点"
      }
    ]
  },
  "USB摄像头": {
    "successors": [
      {
        "target": "可以直接使用cv2.videocapture打开",
        "relation": "特点"
      }
    ],
    "predecessors": []
  },
  "可以直接使用cv2.videocapture打开": {
    "successors": [],
    "predecessors": [
      {
        "source": "USB摄像头",
        "relation": "特点"
      }
    ]
  },
  "GStreamer管道": {
    "successors": [
      {
        "target": "摄像头预捕获的图像宽度、高度、窗口显示的图像宽度、高度、捕获帧率、是否旋转图像",
        "relation": "组成部分"
      }
    ],
    "predecessors": []
  },
  "摄像头预捕获的图像宽度、高度、窗口显示的图像宽度、高度、捕获帧率、是否旋转图像": {
    "successors": [],
    "predecessors": [
      {
        "source": "GStreamer管道",
        "relation": "组成部分"
      }
    ]
  },
  "人脸检测": {
    "successors": [
      {
        "target": "将彩色图像转换为灰度图像，检测图像中的人脸，在边界周围绘制矩形",
        "relation": "步骤"
      }
    ],
    "predecessors": []
  },
  "将彩色图像转换为灰度图像，检测图像中的人脸，在边界周围绘制矩形": {
    "successors": [],
    "predecessors": [
      {
        "source": "人脸检测",
        "relation": "步骤"
      }
    ]
  },
  "Face Recognition": {
    "successors": [
      {
        "target": "一个强大、简单、易上手的人脸识别开源项目",
        "relation": "定义"
      },
      {
        "target": "人脸检测、检测面部特征点、给脸部编码、从编码中找出人的名字",
        "relation": "包含"
      }
    ],
    "predecessors": []
  },
  "一个强大、简单、易上手的人脸识别开源项目": {
    "successors": [],
    "predecessors": [
      {
        "source": "Face Recognition",
        "relation": "定义"
      }
    ]
  },
  "人脸检测、检测面部特征点、给脸部编码、从编码中找出人的名字": {
    "successors": [],
    "predecessors": [
      {
        "source": "Face Recognition",
        "relation": "包含"
      }
    ]
  },
  "face_landmarks": {
    "successors": [
      {
        "target": "检测面部特征点",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "检测面部特征点": {
    "successors": [],
    "predecessors": [
      {
        "source": "face_landmarks",
        "relation": "用途"
      }
    ]
  },
  "face_encodings": {
    "successors": [
      {
        "target": "给脸部编码",
        "relation": "用途"
      },
      {
        "target": "返回图像中每张人脸的128维人脸编码",
        "relation": "结果"
      }
    ],
    "predecessors": []
  },
  "给脸部编码": {
    "successors": [],
    "predecessors": [
      {
        "source": "face_encodings",
        "relation": "用途"
      }
    ]
  },
  "load_image_file": {
    "successors": [
      {
        "target": "加载面孔照片",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "加载面孔照片": {
    "successors": [],
    "predecessors": [
      {
        "source": "load_image_file",
        "relation": "用途"
      }
    ]
  },
  "face_locations": {
    "successors": [
      {
        "target": "定位图像中的人脸位置",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "定位图像中的人脸位置": {
    "successors": [],
    "predecessors": [
      {
        "source": "face_locations",
        "relation": "用途"
      }
    ]
  },
  "model": {
    "successors": [
      {
        "target": "hog模型在CPU上运行更快但不太准确，cnn模型更准确但需要GPU加速",
        "relation": "区别"
      },
      {
        "target": "Conv2D, MaxPooling2D, Flatten, Dense层",
        "relation": "组成部分"
      }
    ],
    "predecessors": []
  },
  "hog模型在CPU上运行更快但不太准确，cnn模型更准确但需要GPU加速": {
    "successors": [],
    "predecessors": [
      {
        "source": "model",
        "relation": "区别"
      }
    ]
  },
  "返回图像中每张人脸的128维人脸编码": {
    "successors": [],
    "predecessors": [
      {
        "source": "face_encodings",
        "relation": "结果"
      }
    ]
  },
  "compare_faces": {
    "successors": [
      {
        "target": "将人脸编码列表与候选编码进行比较",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "将人脸编码列表与候选编码进行比较": {
    "successors": [],
    "predecessors": [
      {
        "source": "compare_faces",
        "relation": "用途"
      }
    ]
  },
  "face_distance": {
    "successors": [
      {
        "target": "计算已知人脸和未知人脸特征向量的距离",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "计算已知人脸和未知人脸特征向量的距离": {
    "successors": [],
    "predecessors": [
      {
        "source": "face_distance",
        "relation": "用途"
      }
    ]
  },
  "控制外部硬件设备": {
    "successors": [],
    "predecessors": [
      {
        "source": "树莓派",
        "relation": "用途"
      }
    ]
  },
  "GPIO引脚": {
    "successors": [
      {
        "target": "输出电压约为3.3V",
        "relation": "特点"
      },
      {
        "target": "为LED提供电源",
        "relation": "用途"
      },
      {
        "target": "读取传感器数据和控制外部设备",
        "relation": "用途"
      }
    ],
    "predecessors": [
      {
        "source": "树莓派",
        "relation": "组成部分"
      }
    ]
  },
  "连接LED灯和限流电阻到GPIO21和GND": {
    "successors": [],
    "predecessors": [
      {
        "source": "点亮LED灯",
        "relation": "步骤"
      }
    ]
  },
  "面包板、杜邦线公对母、LED灯、330欧姆电阻": {
    "successors": [],
    "predecessors": [
      {
        "source": "点亮LED灯",
        "relation": "所需硬件"
      }
    ]
  },
  "输出电压约为3.3V": {
    "successors": [],
    "predecessors": [
      {
        "source": "GPIO引脚",
        "relation": "特点"
      }
    ]
  },
  "LED灯": {
    "successors": [
      {
        "target": "通过限流电阻串联到GPIO21，负极连接到GND",
        "relation": "连接方式"
      }
    ],
    "predecessors": []
  },
  "通过限流电阻串联到GPIO21，负极连接到GND": {
    "successors": [],
    "predecessors": [
      {
        "source": "LED灯",
        "relation": "连接方式"
      }
    ]
  },
  "LED": {
    "successors": [
      {
        "target": "直接串联3.3V电源会产生大电流",
        "relation": "特点"
      },
      {
        "target": "大电流可能损坏LED和供电设备",
        "relation": "缺点"
      }
    ],
    "predecessors": []
  },
  "直接串联3.3V电源会产生大电流": {
    "successors": [],
    "predecessors": [
      {
        "source": "LED",
        "relation": "特点"
      }
    ]
  },
  "大电流可能损坏LED和供电设备": {
    "successors": [],
    "predecessors": [
      {
        "source": "LED",
        "relation": "缺点"
      }
    ]
  },
  "电阻": {
    "successors": [
      {
        "target": "串联在LED和电源之间限制电流",
        "relation": "用途"
      },
      {
        "target": "保护LED和GPIO引脚",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "串联在LED和电源之间限制电流": {
    "successors": [],
    "predecessors": [
      {
        "source": "电阻",
        "relation": "用途"
      }
    ]
  },
  "保护LED和GPIO引脚": {
    "successors": [],
    "predecessors": [
      {
        "source": "电阻",
        "relation": "用途"
      }
    ]
  },
  "为LED提供电源": {
    "successors": [],
    "predecessors": [
      {
        "source": "GPIO引脚",
        "relation": "用途"
      }
    ]
  },
  "Linux": {
    "successors": [
      {
        "target": "一切皆文件",
        "relation": "特点"
      },
      {
        "target": "C++ 和 Python 提供的 TensorFlow Lite API",
        "relation": "支持"
      }
    ],
    "predecessors": []
  },
  "一切皆文件": {
    "successors": [],
    "predecessors": [
      {
        "source": "Linux",
        "relation": "特点"
      }
    ]
  },
  "/sys/class/gpio": {
    "successors": [
      {
        "target": "树莓派GPIO端口文件目录",
        "relation": "属于"
      }
    ],
    "predecessors": []
  },
  "树莓派GPIO端口文件目录": {
    "successors": [],
    "predecessors": [
      {
        "source": "/sys/class/gpio",
        "relation": "属于"
      }
    ]
  },
  "激活、设置为输出状态、写入1": {
    "successors": [],
    "predecessors": [
      {
        "source": "GPIO21",
        "relation": "执行步骤"
      }
    ]
  },
  "PIN处于高电压点亮LED": {
    "successors": [],
    "predecessors": [
      {
        "source": "GPIO21",
        "relation": "结果"
      }
    ]
  },
  "Python GPIO引脚": {
    "successors": [
      {
        "target": "BCM编号模式和物理引脚Broad编号模式",
        "relation": "包含"
      }
    ],
    "predecessors": []
  },
  "BCM编号模式和物理引脚Broad编号模式": {
    "successors": [],
    "predecessors": [
      {
        "source": "Python GPIO引脚",
        "relation": "包含"
      }
    ]
  },
  "GPIO.setmod()": {
    "successors": [
      {
        "target": "指定引脚编号系统",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "指定引脚编号系统": {
    "successors": [],
    "predecessors": [
      {
        "source": "GPIO.setmod()",
        "relation": "用途"
      }
    ]
  },
  "GPIO.setup()": {
    "successors": [
      {
        "target": "设置引脚为输入或输出模式",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "设置引脚为输入或输出模式": {
    "successors": [],
    "predecessors": [
      {
        "source": "GPIO.setup()",
        "relation": "用途"
      }
    ]
  },
  "教育": {
    "successors": [],
    "predecessors": [
      {
        "source": "树莓派",
        "relation": "用途"
      }
    ]
  },
  "廉价且周边设备多": {
    "successors": [],
    "predecessors": [
      {
        "source": "树莓派",
        "relation": "特点"
      }
    ]
  },
  "Linux开发环境": {
    "successors": [],
    "predecessors": [
      {
        "source": "树莓派",
        "relation": "是"
      }
    ]
  },
  "树莓派的官方编程语言": {
    "successors": [],
    "predecessors": [
      {
        "source": "Python",
        "relation": "是"
      }
    ]
  },
  "敏捷开发": {
    "successors": [
      {
        "target": "应对快速变化需求的软件开发模式",
        "relation": "特点"
      },
      {
        "target": "缩短开发周期",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "应对快速变化需求的软件开发模式": {
    "successors": [],
    "predecessors": [
      {
        "source": "敏捷开发",
        "relation": "特点"
      }
    ]
  },
  "缩短开发周期": {
    "successors": [],
    "predecessors": [
      {
        "source": "敏捷开发",
        "relation": "用途"
      }
    ]
  },
  "40个GPIO引脚": {
    "successors": [],
    "predecessors": [
      {
        "source": "树莓派",
        "relation": "包含"
      }
    ]
  },
  "读取传感器数据和控制外部设备": {
    "successors": [],
    "predecessors": [
      {
        "source": "GPIO引脚",
        "relation": "用途"
      }
    ]
  },
  "Wiring Pi": {
    "successors": [
      {
        "target": "控制树莓派的GPIO",
        "relation": "用途"
      },
      {
        "target": "应用于树莓派的GPIO控制库函数",
        "relation": "是什么"
      },
      {
        "target": "由Gordon Henderson编写维护",
        "relation": "特点"
      },
      {
        "target": "GPIO库",
        "relation": "包含"
      },
      {
        "target": "I2C库",
        "relation": "包含"
      },
      {
        "target": "SPI库",
        "relation": "包含"
      },
      {
        "target": "UART库",
        "relation": "包含"
      },
      {
        "target": "软件PWM库",
        "relation": "包含"
      },
      {
        "target": "使用C、C++开发并可被其他语言包使用",
        "relation": "用途"
      },
      {
        "target": "包含命令行工具gpio，用于设置、读写GPIO管脚",
        "relation": "用途"
      },
      {
        "target": "下载源代码使用GIT工具下载代码，然后编译安装",
        "relation": "安装方式"
      },
      {
        "target": "在官网下载安装包后安装",
        "relation": "安装方式"
      }
    ],
    "predecessors": []
  },
  "控制树莓派的GPIO": {
    "successors": [],
    "predecessors": [
      {
        "source": "Wiring Pi",
        "relation": "用途"
      }
    ]
  },
  "NVIDIA Jetson Nano": {
    "successors": [
      {
        "target": "功能强大的边缘计算设备",
        "relation": "特点"
      },
      {
        "target": "图像分类、物体检测、分割和语音处理",
        "relation": "用途"
      },
      {
        "target": "128核NVIDIA Maxwell架构的GPU",
        "relation": "组成部分"
      }
    ],
    "predecessors": []
  },
  "功能强大的边缘计算设备": {
    "successors": [],
    "predecessors": [
      {
        "source": "NVIDIA Jetson Nano",
        "relation": "特点"
      }
    ]
  },
  "图像分类、物体检测、分割和语音处理": {
    "successors": [],
    "predecessors": [
      {
        "source": "NVIDIA Jetson Nano",
        "relation": "用途"
      }
    ]
  },
  "128核NVIDIA Maxwell架构的GPU": {
    "successors": [],
    "predecessors": [
      {
        "source": "NVIDIA Jetson Nano",
        "relation": "组成部分"
      }
    ]
  },
  "解释器和转换器": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite",
        "relation": "组成部分"
      }
    ]
  },
  "在移动设备和嵌入式设备上运行TensorFlow模型": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite",
        "relation": "用途"
      }
    ]
  },
  "计算机视觉应用": {
    "successors": [],
    "predecessors": [
      {
        "source": "OpenCV",
        "relation": "用途"
      }
    ]
  },
  "face_recognition": {
    "successors": [
      {
        "target": "人脸识别",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "人脸识别": {
    "successors": [
      {
        "target": "安全检查、身份核验与移动支付",
        "relation": "用途"
      }
    ],
    "predecessors": [
      {
        "source": "face_recognition",
        "relation": "用途"
      }
    ]
  },
  "GStreamer": {
    "successors": [
      {
        "target": "处理媒体应用程序",
        "relation": "用途"
      },
      {
        "target": "一个多媒体框架，用于后端处理任务，如格式修改、显示驱动程序协调和数据处理",
        "relation": "是"
      }
    ],
    "predecessors": []
  },
  "处理媒体应用程序": {
    "successors": [],
    "predecessors": [
      {
        "source": "GStreamer",
        "relation": "用途"
      }
    ]
  },
  "机器学习和计算机视觉应用": {
    "successors": [],
    "predecessors": [
      {
        "source": "CSI摄像头",
        "relation": "用途"
      }
    ]
  },
  "Python 2.7": {
    "successors": [
      {
        "target": "官方已经停止维护",
        "relation": "特点"
      }
    ],
    "predecessors": []
  },
  "官方已经停止维护": {
    "successors": [],
    "predecessors": [
      {
        "source": "Python 2.7",
        "relation": "特点"
      }
    ]
  },
  "安装Python": {
    "successors": [],
    "predecessors": [
      {
        "source": "树莓派",
        "relation": "用途"
      }
    ]
  },
  "TensorFlow Lite API": {
    "successors": [
      {
        "target": "执行模型推理",
        "relation": "用途"
      },
      {
        "target": "创建解释器、分配张量等功能",
        "relation": "包含"
      }
    ],
    "predecessors": []
  },
  "执行模型推理": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite API",
        "relation": "用途"
      }
    ]
  },
  "创建解释器、分配张量等功能": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite API",
        "relation": "包含"
      }
    ]
  },
  "TensorFlow Lite 推理": {
    "successors": [
      {
        "target": "多种编程语言",
        "relation": "支持"
      },
      {
        "target": "Android、iOS 和 Linux等移动/嵌入式平台",
        "relation": "支持"
      },
      {
        "target": "在资源有限的硬件上运行",
        "relation": "特点"
      },
      {
        "target": "需满足苛刻的功耗要求",
        "relation": "特点"
      }
    ],
    "predecessors": []
  },
  "多种编程语言": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite 推理",
        "relation": "支持"
      }
    ]
  },
  "Android、iOS 和 Linux等移动/嵌入式平台": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite 推理",
        "relation": "支持"
      }
    ]
  },
  "在资源有限的硬件上运行": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite 推理",
        "relation": "特点"
      }
    ]
  },
  "需满足苛刻的功耗要求": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite 推理",
        "relation": "特点"
      }
    ]
  },
  "Android": {
    "successors": [
      {
        "target": "Java 或 C++ API 执行 TensorFlow Lite 推理",
        "relation": "支持"
      }
    ],
    "predecessors": []
  },
  "Java 或 C++ API 执行 TensorFlow Lite 推理": {
    "successors": [],
    "predecessors": [
      {
        "source": "Android",
        "relation": "支持"
      }
    ]
  },
  "iOS": {
    "successors": [
      {
        "target": "Swift 和 Objective-C 编写的原生 iOS 库",
        "relation": "支持"
      },
      {
        "target": "直接在 Objective-C 代码中使用 C API",
        "relation": "支持"
      }
    ],
    "predecessors": []
  },
  "Swift 和 Objective-C 编写的原生 iOS 库": {
    "successors": [],
    "predecessors": [
      {
        "source": "iOS",
        "relation": "支持"
      }
    ]
  },
  "直接在 Objective-C 代码中使用 C API": {
    "successors": [],
    "predecessors": [
      {
        "source": "iOS",
        "relation": "支持"
      }
    ]
  },
  "C++ 和 Python 提供的 TensorFlow Lite API": {
    "successors": [],
    "predecessors": [
      {
        "source": "Linux",
        "relation": "支持"
      }
    ]
  },
  "运行 TensorFlow Lite 模型": {
    "successors": [
      {
        "target": "将模型加载到内存中",
        "relation": "执行步骤"
      },
      {
        "target": "基于现有模型构建 Interpreter",
        "relation": "执行步骤"
      },
      {
        "target": "设置输入张量值",
        "relation": "执行步骤"
      },
      {
        "target": "执行推理",
        "relation": "执行步骤"
      },
      {
        "target": "读取输出张量值",
        "relation": "执行步骤"
      }
    ],
    "predecessors": []
  },
  "将模型加载到内存中": {
    "successors": [],
    "predecessors": [
      {
        "source": "运行 TensorFlow Lite 模型",
        "relation": "执行步骤"
      }
    ]
  },
  "基于现有模型构建 Interpreter": {
    "successors": [],
    "predecessors": [
      {
        "source": "运行 TensorFlow Lite 模型",
        "relation": "执行步骤"
      }
    ]
  },
  "设置输入张量值": {
    "successors": [],
    "predecessors": [
      {
        "source": "运行 TensorFlow Lite 模型",
        "relation": "执行步骤"
      }
    ]
  },
  "执行推理": {
    "successors": [],
    "predecessors": [
      {
        "source": "运行 TensorFlow Lite 模型",
        "relation": "执行步骤"
      }
    ]
  },
  "读取输出张量值": {
    "successors": [],
    "predecessors": [
      {
        "source": "运行 TensorFlow Lite 模型",
        "relation": "执行步骤"
      }
    ]
  },
  "Jetson Nano 开发板": {
    "successors": [
      {
        "target": "不支持 CUDA",
        "relation": "特点"
      },
      {
        "target": "默认安装 JetPack 安装了对应的 OpenCV",
        "relation": "特点"
      }
    ],
    "predecessors": []
  },
  "不支持 CUDA": {
    "successors": [],
    "predecessors": [
      {
        "source": "Jetson Nano 开发板",
        "relation": "特点"
      }
    ]
  },
  "安装依赖项": {
    "successors": [],
    "predecessors": [
      {
        "source": "OpenCV",
        "relation": "安装步骤"
      },
      {
        "source": "TensorFlow GPU 版本",
        "relation": "安装步骤"
      }
    ]
  },
  "下载 OpenCV": {
    "successors": [],
    "predecessors": [
      {
        "source": "OpenCV",
        "relation": "安装步骤"
      }
    ]
  },
  "编译 OpenCV": {
    "successors": [],
    "predecessors": [
      {
        "source": "OpenCV",
        "relation": "安装步骤"
      }
    ]
  },
  "安装 OpenCV 项目": {
    "successors": [],
    "predecessors": [
      {
        "source": "OpenCV",
        "relation": "安装步骤"
      }
    ]
  },
  "OpenCV 编译": {
    "successors": [
      {
        "target": "设置 OpenCV 的内容、位置和方式",
        "relation": "条件"
      },
      {
        "target": "-D WITH_QT=OFF 禁用了 Qt5 支持",
        "relation": "示例配置"
      },
      {
        "target": "需要大约两个半小时",
        "relation": "结果"
      }
    ],
    "predecessors": []
  },
  "设置 OpenCV 的内容、位置和方式": {
    "successors": [],
    "predecessors": [
      {
        "source": "OpenCV 编译",
        "relation": "条件"
      }
    ]
  },
  "-D WITH_QT=OFF 禁用了 Qt5 支持": {
    "successors": [],
    "predecessors": [
      {
        "source": "OpenCV 编译",
        "relation": "示例配置"
      }
    ]
  },
  "需要大约两个半小时": {
    "successors": [],
    "predecessors": [
      {
        "source": "OpenCV 编译",
        "relation": "结果"
      }
    ]
  },
  "OpenCV 安装": {
    "successors": [
      {
        "target": "整个安装需要两个小时才能完成",
        "relation": "特点"
      },
      {
        "target": "创建了一个安装脚本",
        "relation": "组成部分"
      }
    ],
    "predecessors": []
  },
  "整个安装需要两个小时才能完成": {
    "successors": [],
    "predecessors": [
      {
        "source": "OpenCV 安装",
        "relation": "特点"
      }
    ]
  },
  "创建了一个安装脚本": {
    "successors": [],
    "predecessors": [
      {
        "source": "OpenCV 安装",
        "relation": "组成部分"
      }
    ]
  },
  "OpenCV 安装脚本": {
    "successors": [
      {
        "target": "以依赖项的安装开始",
        "relation": "执行步骤"
      },
      {
        "target": "以 ldconfig 结束",
        "relation": "执行步骤"
      }
    ],
    "predecessors": []
  },
  "以依赖项的安装开始": {
    "successors": [],
    "predecessors": [
      {
        "source": "OpenCV 安装脚本",
        "relation": "执行步骤"
      }
    ]
  },
  "以 ldconfig 结束": {
    "successors": [],
    "predecessors": [
      {
        "source": "OpenCV 安装脚本",
        "relation": "执行步骤"
      }
    ]
  },
  "树莓派通用输入/输出接口（GPIO）": {
    "successors": [
      {
        "target": "一组数字引脚，可用于将树莓派连接到其他电子设备",
        "relation": "是什么"
      },
      {
        "target": "读取传感器数据，控制 LED 等外部设备",
        "relation": "用途"
      },
      {
        "target": "可以配置为输入或输出",
        "relation": "特点"
      },
      {
        "target": "40个 GPIO 引脚",
        "relation": "组成部分"
      },
      {
        "target": "26个引脚可以用作数字输入或输出",
        "relation": "组成部分"
      },
      {
        "target": "14个引脚用于其他功能",
        "relation": "组成部分"
      },
      {
        "target": "可以通过软件编程进行控制",
        "relation": "特点"
      },
      {
        "target": "使用 Python 或其他编程语言编写程序",
        "relation": "用途"
      },
      {
        "target": "错误的连接和编程可能会导致设备损坏或故障",
        "relation": "缺点"
      },
      {
        "target": "位于其引脚排针上",
        "relation": "组成部分"
      }
    ],
    "predecessors": []
  },
  "一组数字引脚，可用于将树莓派连接到其他电子设备": {
    "successors": [],
    "predecessors": [
      {
        "source": "树莓派通用输入/输出接口（GPIO）",
        "relation": "是什么"
      }
    ]
  },
  "读取传感器数据，控制 LED 等外部设备": {
    "successors": [],
    "predecessors": [
      {
        "source": "树莓派通用输入/输出接口（GPIO）",
        "relation": "用途"
      }
    ]
  },
  "可以配置为输入或输出": {
    "successors": [],
    "predecessors": [
      {
        "source": "树莓派通用输入/输出接口（GPIO）",
        "relation": "特点"
      }
    ]
  },
  "40个 GPIO 引脚": {
    "successors": [],
    "predecessors": [
      {
        "source": "树莓派通用输入/输出接口（GPIO）",
        "relation": "组成部分"
      }
    ]
  },
  "26个引脚可以用作数字输入或输出": {
    "successors": [],
    "predecessors": [
      {
        "source": "树莓派通用输入/输出接口（GPIO）",
        "relation": "组成部分"
      }
    ]
  },
  "14个引脚用于其他功能": {
    "successors": [],
    "predecessors": [
      {
        "source": "树莓派通用输入/输出接口（GPIO）",
        "relation": "组成部分"
      }
    ]
  },
  "可以通过软件编程进行控制": {
    "successors": [],
    "predecessors": [
      {
        "source": "树莓派通用输入/输出接口（GPIO）",
        "relation": "特点"
      }
    ]
  },
  "使用 Python 或其他编程语言编写程序": {
    "successors": [],
    "predecessors": [
      {
        "source": "树莓派通用输入/输出接口（GPIO）",
        "relation": "用途"
      }
    ]
  },
  "错误的连接和编程可能会导致设备损坏或故障": {
    "successors": [],
    "predecessors": [
      {
        "source": "树莓派通用输入/输出接口（GPIO）",
        "relation": "缺点"
      }
    ]
  },
  "位于其引脚排针上": {
    "successors": [],
    "predecessors": [
      {
        "source": "树莓派通用输入/输出接口（GPIO）",
        "relation": "组成部分"
      }
    ]
  },
  "Jupyter Notebook": {
    "successors": [
      {
        "target": "功能强大，交互式、富文本，还有丰富的插件、主题修改、多语言支持",
        "relation": "特点"
      }
    ],
    "predecessors": []
  },
  "功能强大，交互式、富文本，还有丰富的插件、主题修改、多语言支持": {
    "successors": [],
    "predecessors": [
      {
        "source": "Jupyter Notebook",
        "relation": "特点"
      }
    ]
  },
  "JupyterLab": {
    "successors": [
      {
        "target": "Jupyter Notebook 的全面升级",
        "relation": "是什么"
      },
      {
        "target": "Jupyter Notebook、文本编辑器、终端以及各种个性化组件",
        "relation": "组成部分"
      },
      {
        "target": "全能 IDE",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "Jupyter Notebook 的全面升级": {
    "successors": [],
    "predecessors": [
      {
        "source": "JupyterLab",
        "relation": "是什么"
      }
    ]
  },
  "Jupyter Notebook、文本编辑器、终端以及各种个性化组件": {
    "successors": [],
    "predecessors": [
      {
        "source": "JupyterLab",
        "relation": "组成部分"
      }
    ]
  },
  "全能 IDE": {
    "successors": [],
    "predecessors": [
      {
        "source": "JupyterLab",
        "relation": "用途"
      }
    ]
  },
  "通过 pip 安装 Jupyter lab，如果网络环境较差导致下载软件包慢，可以考虑更换源": {
    "successors": [],
    "predecessors": [
      {
        "source": "Jupyter lab",
        "relation": "安装步骤"
      }
    ]
  },
  "val_ds": {
    "successors": [
      {
        "target": "images和labels",
        "relation": "包含"
      },
      {
        "target": "734 files for validation",
        "relation": "包含"
      }
    ],
    "predecessors": []
  },
  "images和labels": {
    "successors": [],
    "predecessors": [
      {
        "source": "val_ds",
        "relation": "包含"
      }
    ]
  },
  "normalization_layer": {
    "successors": [
      {
        "target": "对images进行归一化处理",
        "relation": "用途"
      },
      {
        "target": "对图像数据进行归一化处理",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "对images进行归一化处理": {
    "successors": [],
    "predecessors": [
      {
        "source": "normalization_layer",
        "relation": "用途"
      }
    ]
  },
  "val_ds.map": {
    "successors": [
      {
        "target": "使用lambda函数对images进行归一化处理并保持labels不变",
        "relation": "执行步骤"
      }
    ],
    "predecessors": []
  },
  "使用lambda函数对images进行归一化处理并保持labels不变": {
    "successors": [],
    "predecessors": [
      {
        "source": "val_ds.map",
        "relation": "执行步骤"
      }
    ]
  },
  "pip3": {
    "successors": [
      {
        "target": "官方集成到Python的工具",
        "relation": "是"
      }
    ],
    "predecessors": [
      {
        "source": "pip",
        "relation": "相似"
      }
    ]
  },
  "官方集成到Python的工具": {
    "successors": [],
    "predecessors": [
      {
        "source": "pip3",
        "relation": "是"
      }
    ]
  },
  "pip": {
    "successors": [
      {
        "target": "pip3",
        "relation": "相似"
      },
      {
        "target": "Python包管理",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "Python包管理": {
    "successors": [],
    "predecessors": [
      {
        "source": "pip",
        "relation": "用途"
      }
    ]
  },
  "NVIDIA Jetson Nano 开发板": {
    "successors": [
      {
        "target": "边缘计算设备",
        "relation": "用途"
      },
      {
        "target": "图像分类、物体检测、分割和语音处理等应用程序中并行运行多个神经网络",
        "relation": "用途"
      },
      {
        "target": "运行功率仅为 5 瓦",
        "relation": "特点"
      },
      {
        "target": "边做边学的理想工具",
        "relation": "特点"
      },
      {
        "target": "Linux 开发环境",
        "relation": "组成部分"
      },
      {
        "target": "大量易于学习的教程",
        "relation": "组成部分"
      },
      {
        "target": "活跃开发者社区打造的开源项目",
        "relation": "组成部分"
      },
      {
        "target": "Raspberry Pi 4",
        "relation": "相似"
      },
      {
        "target": "Intel Neural Compute Stick 2",
        "relation": "相似"
      },
      {
        "target": "Google Edge TPU Coral Dev Board",
        "relation": "相似"
      },
      {
        "target": "4GB 的内存并不能完全使用，其中有一部分（1GB 左右）是和显存共享的",
        "relation": "特点"
      },
      {
        "target": "体积小，采用核心板可拆的设计，核心板的大小只有70 x 45 mm，可以很方便的集成在各种嵌入式应用中",
        "relation": "优点"
      },
      {
        "target": "128核 NVIDIA Maxwell 架构的 GPU",
        "relation": "组成部分"
      },
      {
        "target": "计算能力不高，勉强可以使用一些小规模、并且优化过的网络进行推理，训练的话还是不够用的",
        "relation": "缺点"
      },
      {
        "target": "功耗非常低，有两种模式： 5W（低功耗模式；可以使用 USB 口供电） 10W（必须使用 Power Jack 外接5V 电源供电）",
        "relation": "特点"
      },
      {
        "target": "microSD 卡插槽",
        "relation": "组成部分"
      },
      {
        "target": "40 针 GPIO 扩展接口",
        "relation": "组成部分"
      },
      {
        "target": "Micro USB 接口",
        "relation": "组成部分"
      },
      {
        "target": "千兆以太网端口",
        "relation": "组成部分"
      },
      {
        "target": "USB",
        "relation": "组成部分"
      }
    ],
    "predecessors": []
  },
  "边缘计算设备": {
    "successors": [],
    "predecessors": [
      {
        "source": "NVIDIA Jetson Nano 开发板",
        "relation": "用途"
      }
    ]
  },
  "图像分类、物体检测、分割和语音处理等应用程序中并行运行多个神经网络": {
    "successors": [],
    "predecessors": [
      {
        "source": "NVIDIA Jetson Nano 开发板",
        "relation": "用途"
      }
    ]
  },
  "运行功率仅为 5 瓦": {
    "successors": [],
    "predecessors": [
      {
        "source": "NVIDIA Jetson Nano 开发板",
        "relation": "特点"
      }
    ]
  },
  "边做边学的理想工具": {
    "successors": [],
    "predecessors": [
      {
        "source": "NVIDIA Jetson Nano 开发板",
        "relation": "特点"
      }
    ]
  },
  "Linux 开发环境": {
    "successors": [],
    "predecessors": [
      {
        "source": "NVIDIA Jetson Nano 开发板",
        "relation": "组成部分"
      }
    ]
  },
  "大量易于学习的教程": {
    "successors": [],
    "predecessors": [
      {
        "source": "NVIDIA Jetson Nano 开发板",
        "relation": "组成部分"
      }
    ]
  },
  "活跃开发者社区打造的开源项目": {
    "successors": [],
    "predecessors": [
      {
        "source": "NVIDIA Jetson Nano 开发板",
        "relation": "组成部分"
      }
    ]
  },
  "Raspberry Pi 4": {
    "successors": [
      {
        "target": "ARM Cortex-A72",
        "relation": "组成部分"
      }
    ],
    "predecessors": [
      {
        "source": "NVIDIA Jetson Nano 开发板",
        "relation": "相似"
      }
    ]
  },
  "Intel Neural Compute Stick 2": {
    "successors": [],
    "predecessors": [
      {
        "source": "NVIDIA Jetson Nano 开发板",
        "relation": "相似"
      }
    ]
  },
  "Google Edge TPU Coral Dev Board": {
    "successors": [],
    "predecessors": [
      {
        "source": "NVIDIA Jetson Nano 开发板",
        "relation": "相似"
      }
    ]
  },
  "Jetson Nano CPU": {
    "successors": [
      {
        "target": "64位四核的 ARM Cortex-A57",
        "relation": "组成部分"
      }
    ],
    "predecessors": []
  },
  "64位四核的 ARM Cortex-A57": {
    "successors": [],
    "predecessors": [
      {
        "source": "Jetson Nano CPU",
        "relation": "组成部分"
      }
    ]
  },
  "ARM Cortex-A72": {
    "successors": [],
    "predecessors": [
      {
        "source": "Raspberry Pi 4",
        "relation": "组成部分"
      }
    ]
  },
  "4GB 的内存并不能完全使用，其中有一部分（1GB 左右）是和显存共享的": {
    "successors": [],
    "predecessors": [
      {
        "source": "NVIDIA Jetson Nano 开发板",
        "relation": "特点"
      }
    ]
  },
  "体积小，采用核心板可拆的设计，核心板的大小只有70 x 45 mm，可以很方便的集成在各种嵌入式应用中": {
    "successors": [],
    "predecessors": [
      {
        "source": "NVIDIA Jetson Nano 开发板",
        "relation": "优点"
      }
    ]
  },
  "128核 NVIDIA Maxwell 架构的 GPU": {
    "successors": [],
    "predecessors": [
      {
        "source": "NVIDIA Jetson Nano 开发板",
        "relation": "组成部分"
      }
    ]
  },
  "计算能力不高，勉强可以使用一些小规模、并且优化过的网络进行推理，训练的话还是不够用的": {
    "successors": [],
    "predecessors": [
      {
        "source": "NVIDIA Jetson Nano 开发板",
        "relation": "缺点"
      }
    ]
  },
  "功耗非常低，有两种模式： 5W（低功耗模式；可以使用 USB 口供电） 10W（必须使用 Power Jack 外接5V 电源供电）": {
    "successors": [],
    "predecessors": [
      {
        "source": "NVIDIA Jetson Nano 开发板",
        "relation": "特点"
      }
    ]
  },
  "microSD 卡插槽": {
    "successors": [],
    "predecessors": [
      {
        "source": "NVIDIA Jetson Nano 开发板",
        "relation": "组成部分"
      }
    ]
  },
  "40 针 GPIO 扩展接口": {
    "successors": [],
    "predecessors": [
      {
        "source": "NVIDIA Jetson Nano 开发板",
        "relation": "组成部分"
      }
    ]
  },
  "Micro USB 接口": {
    "successors": [],
    "predecessors": [
      {
        "source": "NVIDIA Jetson Nano 开发板",
        "relation": "组成部分"
      }
    ]
  },
  "千兆以太网端口": {
    "successors": [],
    "predecessors": [
      {
        "source": "NVIDIA Jetson Nano 开发板",
        "relation": "组成部分"
      }
    ]
  },
  "USB": {
    "successors": [],
    "predecessors": [
      {
        "source": "NVIDIA Jetson Nano 开发板",
        "relation": "组成部分"
      }
    ]
  },
  "Jetson": {
    "successors": [
      {
        "target": "CSI 相机接口",
        "relation": "包含"
      }
    ],
    "predecessors": []
  },
  "CSI 相机接口": {
    "successors": [
      {
        "target": "B02版本有两路",
        "relation": "特点"
      },
      {
        "target": "可以使用树莓派摄像头，IMX219模组800万像素",
        "relation": "用途"
      }
    ],
    "predecessors": [
      {
        "source": "Jetson",
        "relation": "包含"
      }
    ]
  },
  "B02版本有两路": {
    "successors": [],
    "predecessors": [
      {
        "source": "CSI 相机接口",
        "relation": "特点"
      }
    ]
  },
  "可以使用树莓派摄像头，IMX219模组800万像素": {
    "successors": [],
    "predecessors": [
      {
        "source": "CSI 相机接口",
        "relation": "用途"
      }
    ]
  },
  "microSD 卡": {
    "successors": [
      {
        "target": "写入镜像",
        "relation": "用途"
      },
      {
        "target": "用作启动设备和主存储器",
        "relation": "用途"
      },
      {
        "target": "建议最小采用 64 GB UHS-1 卡",
        "relation": "特点"
      }
    ],
    "predecessors": [
      {
        "source": "Jetson Nano",
        "relation": "组成部分"
      }
    ]
  },
  "写入镜像": {
    "successors": [],
    "predecessors": [
      {
        "source": "microSD 卡",
        "relation": "用途"
      }
    ]
  },
  "镜像": {
    "successors": [
      {
        "target": "英伟达官方或开源社区",
        "relation": "来源"
      }
    ],
    "predecessors": []
  },
  "英伟达官方或开源社区": {
    "successors": [],
    "predecessors": [
      {
        "source": "镜像",
        "relation": "来源"
      }
    ]
  },
  "SD Memory Card Formatter": {
    "successors": [
      {
        "target": "格式化 microSD 卡",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "格式化 microSD 卡": {
    "successors": [],
    "predecessors": [
      {
        "source": "SD Memory Card Formatter",
        "relation": "用途"
      }
    ]
  },
  "Etcher": {
    "successors": [
      {
        "target": "将镜像写入 microSD 卡",
        "relation": "用途"
      },
      {
        "target": "选择镜像、选择驱动器、闪存",
        "relation": "执行步骤"
      }
    ],
    "predecessors": []
  },
  "将镜像写入 microSD 卡": {
    "successors": [],
    "predecessors": [
      {
        "source": "Etcher",
        "relation": "用途"
      }
    ]
  },
  "选择镜像、选择驱动器、闪存": {
    "successors": [],
    "predecessors": [
      {
        "source": "Etcher",
        "relation": "执行步骤"
      }
    ]
  },
  "连接显示器、键盘和鼠标或通过SSH/VNC远程访问": {
    "successors": [],
    "predecessors": [
      {
        "source": "Jetson Nano",
        "relation": "交互方式"
      }
    ]
  },
  "Jetson Developer Kits": {
    "successors": [
      {
        "target": "获取更多的Jetson平台信息",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "获取更多的Jetson平台信息": {
    "successors": [],
    "predecessors": [
      {
        "source": "Jetson Developer Kits",
        "relation": "用途"
      }
    ]
  },
  "NVIDIA Jetson 论坛": {
    "successors": [
      {
        "target": "提问或分享项目",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "提问或分享项目": {
    "successors": [],
    "predecessors": [
      {
        "source": "NVIDIA Jetson 论坛",
        "relation": "用途"
      }
    ]
  },
  "Jetson Community Projects": {
    "successors": [
      {
        "target": "获取有趣的项目",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "获取有趣的项目": {
    "successors": [],
    "predecessors": [
      {
        "source": "Jetson Community Projects",
        "relation": "用途"
      }
    ]
  },
  "Hello AI World": {
    "successors": [
      {
        "target": "快速启动深度学习推理演示",
        "relation": "用途"
      },
      {
        "target": "使用计算机视觉相关模型，包括实时摄像机",
        "relation": "特点"
      }
    ],
    "predecessors": []
  },
  "快速启动深度学习推理演示": {
    "successors": [],
    "predecessors": [
      {
        "source": "Hello AI World",
        "relation": "用途"
      }
    ]
  },
  "使用计算机视觉相关模型，包括实时摄像机": {
    "successors": [],
    "predecessors": [
      {
        "source": "Hello AI World",
        "relation": "特点"
      }
    ]
  },
  "JetBot": {
    "successors": [
      {
        "target": "学习AI和构建有趣应用程序",
        "relation": "用途"
      },
      {
        "target": "易于设置和使用，兼容许多流行配件",
        "relation": "特点"
      }
    ],
    "predecessors": []
  },
  "学习AI和构建有趣应用程序": {
    "successors": [],
    "predecessors": [
      {
        "source": "JetBot",
        "relation": "用途"
      }
    ]
  },
  "易于设置和使用，兼容许多流行配件": {
    "successors": [],
    "predecessors": [
      {
        "source": "JetBot",
        "relation": "特点"
      }
    ]
  },
  "VNC": {
    "successors": [
      {
        "target": "远程桌面访问Jetson Nano",
        "relation": "用途"
      },
      {
        "target": "需要设置VNC密码和启用自动登录",
        "relation": "条件"
      }
    ],
    "predecessors": []
  },
  "远程桌面访问Jetson Nano": {
    "successors": [],
    "predecessors": [
      {
        "source": "VNC",
        "relation": "用途"
      }
    ]
  },
  "需要设置VNC密码和启用自动登录": {
    "successors": [],
    "predecessors": [
      {
        "source": "VNC",
        "relation": "条件"
      }
    ]
  },
  "VNC Viewer": {
    "successors": [
      {
        "target": "进行VNC连接",
        "relation": "用途"
      },
      {
        "target": "登录 Jetson Nano",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "进行VNC连接": {
    "successors": [],
    "predecessors": [
      {
        "source": "VNC Viewer",
        "relation": "用途"
      }
    ]
  },
  "TFLite model": {
    "successors": [
      {
        "target": "interpreter",
        "relation": "组成部分"
      }
    ],
    "predecessors": []
  },
  "interpreter": {
    "successors": [
      {
        "target": "加载和运行TFLite模型",
        "relation": "用途"
      },
      {
        "target": "allocate_tensors()",
        "relation": "执行步骤"
      },
      {
        "target": "get_input_details()",
        "relation": "执行步骤"
      },
      {
        "target": "get_output_details()",
        "relation": "执行步骤"
      },
      {
        "target": "set_tensor()",
        "relation": "执行步骤"
      },
      {
        "target": "invoke()",
        "relation": "执行步骤"
      },
      {
        "target": "加载和执行TFLite模型",
        "relation": "用途"
      }
    ],
    "predecessors": [
      {
        "source": "TFLite model",
        "relation": "组成部分"
      }
    ]
  },
  "加载和运行TFLite模型": {
    "successors": [],
    "predecessors": [
      {
        "source": "interpreter",
        "relation": "用途"
      }
    ]
  },
  "allocate_tensors()": {
    "successors": [],
    "predecessors": [
      {
        "source": "interpreter",
        "relation": "执行步骤"
      }
    ]
  },
  "get_input_details()": {
    "successors": [],
    "predecessors": [
      {
        "source": "interpreter",
        "relation": "执行步骤"
      }
    ]
  },
  "get_output_details()": {
    "successors": [],
    "predecessors": [
      {
        "source": "interpreter",
        "relation": "执行步骤"
      }
    ]
  },
  "set_tensor()": {
    "successors": [],
    "predecessors": [
      {
        "source": "interpreter",
        "relation": "执行步骤"
      }
    ]
  },
  "invoke()": {
    "successors": [],
    "predecessors": [
      {
        "source": "interpreter",
        "relation": "执行步骤"
      }
    ]
  },
  "模型推理": {
    "successors": [
      {
        "target": "分类结果的概率",
        "relation": "结果"
      }
    ],
    "predecessors": []
  },
  "分类结果的概率": {
    "successors": [],
    "predecessors": [
      {
        "source": "模型推理",
        "relation": "结果"
      }
    ]
  },
  "登录 Jetson Nano": {
    "successors": [],
    "predecessors": [
      {
        "source": "VNC Viewer",
        "relation": "用途"
      }
    ]
  },
  "一个使用数据流图进行数值计算的开源软件库": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow",
        "relation": "是什么"
      }
    ]
  },
  "灵活的架构可以将模型部署到桌面、服务器或移动设备中的 CPU 或 GPU 上": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow",
        "relation": "特点"
      }
    ]
  },
  "TensorFlow GPU 版本": {
    "successors": [
      {
        "target": "成功配置好 CUDA",
        "relation": "安装条件"
      },
      {
        "target": "安装依赖项",
        "relation": "安装步骤"
      },
      {
        "target": "安装所需的系统包",
        "relation": "安装步骤"
      },
      {
        "target": "安装和升级 pip3",
        "relation": "安装步骤"
      },
      {
        "target": "安装 Python 包依赖项",
        "relation": "安装步骤"
      },
      {
        "target": "确认 CUDA 已经被正常安装",
        "relation": "安装步骤"
      },
      {
        "target": "安装 TensorFlow",
        "relation": "安装步骤"
      }
    ],
    "predecessors": [
      {
        "source": "OpenCV",
        "relation": "可能与...相关"
      }
    ]
  },
  "成功配置好 CUDA": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow GPU 版本",
        "relation": "安装条件"
      }
    ]
  },
  "安装所需的系统包": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow GPU 版本",
        "relation": "安装步骤"
      }
    ]
  },
  "安装和升级 pip3": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow GPU 版本",
        "relation": "安装步骤"
      }
    ]
  },
  "安装 Python 包依赖项": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow GPU 版本",
        "relation": "安装步骤"
      }
    ]
  },
  "确认 CUDA 已经被正常安装": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow GPU 版本",
        "relation": "安装步骤"
      }
    ]
  },
  "安装 TensorFlow": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow GPU 版本",
        "relation": "安装步骤"
      }
    ]
  },
  "必须与正在使用的 JetPack 版本一致": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow",
        "relation": "版本要求"
      }
    ]
  },
  "默认安装 JetPack 安装了对应的 OpenCV": {
    "successors": [],
    "predecessors": [
      {
        "source": "Jetson Nano 开发板",
        "relation": "特点"
      }
    ]
  },
  "不支持 CUDA 且版本是固定搭配的": {
    "successors": [],
    "predecessors": [
      {
        "source": "OpenCV",
        "relation": "特点"
      }
    ]
  },
  "jtop 命令": {
    "successors": [
      {
        "target": "查看开发板系统信息",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "查看开发板系统信息": {
    "successors": [],
    "predecessors": [
      {
        "source": "jtop 命令",
        "relation": "用途"
      }
    ]
  },
  "开关去抖": {
    "successors": [
      {
        "target": "忽略由于开关抖动引起的小于",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "忽略由于开关抖动引起的小于": {
    "successors": [],
    "predecessors": [
      {
        "source": "开关去抖",
        "relation": "用途"
      }
    ]
  },
  "Python 源码包": {
    "successors": [
      {
        "target": "Python 官网",
        "relation": "下载来源"
      },
      {
        "target": "下载解压",
        "relation": "处理步骤"
      }
    ],
    "predecessors": []
  },
  "Python 官网": {
    "successors": [],
    "predecessors": [
      {
        "source": "Python 源码包",
        "relation": "下载来源"
      }
    ]
  },
  "下载解压": {
    "successors": [],
    "predecessors": [
      {
        "source": "Python 源码包",
        "relation": "处理步骤"
      }
    ]
  },
  "移动行业处理器接口（MIPI）的相机串行接口（CSI）端口": {
    "successors": [],
    "predecessors": [
      {
        "source": "Jetson Nano",
        "relation": "包含"
      }
    ]
  },
  "MIPI": {
    "successors": [
      {
        "target": "MIPI 联盟发起的为移动应用处理器制定的开放标准",
        "relation": "是"
      }
    ],
    "predecessors": []
  },
  "MIPI 联盟发起的为移动应用处理器制定的开放标准": {
    "successors": [],
    "predecessors": [
      {
        "source": "MIPI",
        "relation": "是"
      }
    ]
  },
  "CSI 端口": {
    "successors": [
      {
        "target": "Raspberry Pi、Arducam 等常见的相机模块",
        "relation": "支持"
      }
    ],
    "predecessors": []
  },
  "Raspberry Pi、Arducam 等常见的相机模块": {
    "successors": [],
    "predecessors": [
      {
        "source": "CSI 端口",
        "relation": "支持"
      }
    ]
  },
  "Raspberry Camera V2": {
    "successors": [
      {
        "target": "800万像素、感光芯片为索尼 IMX219，静态图片分辨率为3280 × 2464、支持1080p30, 720p60以及640 × 480p90视频录像",
        "relation": "特点"
      }
    ],
    "predecessors": []
  },
  "800万像素、感光芯片为索尼 IMX219，静态图片分辨率为3280 × 2464、支持1080p30, 720p60以及640 × 480p90视频录像": {
    "successors": [],
    "predecessors": [
      {
        "source": "Raspberry Camera V2",
        "relation": "特点"
      }
    ]
  },
  "机器学习和计算机视觉应用，如物体检测、人脸识别、图像分割等视觉任务": {
    "successors": [],
    "predecessors": [
      {
        "source": "Jetson Nano",
        "relation": "用途"
      }
    ]
  },
  "JetPack SDK": {
    "successors": [
      {
        "target": "支持预装驱动程序的 RPi 相机，并且可以很容易地用作即插即用外围设备，不需要安装驱动程序",
        "relation": "特点"
      }
    ],
    "predecessors": []
  },
  "支持预装驱动程序的 RPi 相机，并且可以很容易地用作即插即用外围设备，不需要安装驱动程序": {
    "successors": [],
    "predecessors": [
      {
        "source": "JetPack SDK",
        "relation": "特点"
      }
    ]
  },
  "CSI 摄像头": {
    "successors": [
      {
        "target": "必须在开机前先装上去，系统才能识别 CSI 摄像头",
        "relation": "条件"
      }
    ],
    "predecessors": []
  },
  "必须在开机前先装上去，系统才能识别 CSI 摄像头": {
    "successors": [],
    "predecessors": [
      {
        "source": "CSI 摄像头",
        "relation": "条件"
      }
    ]
  },
  "/dev": {
    "successors": [
      {
        "target": "Linux 中所有设备文件或特殊文件的存储位置",
        "relation": "是"
      }
    ],
    "predecessors": []
  },
  "Linux 中所有设备文件或特殊文件的存储位置": {
    "successors": [],
    "predecessors": [
      {
        "source": "/dev",
        "relation": "是"
      }
    ]
  },
  "一个多媒体框架，用于后端处理任务，如格式修改、显示驱动程序协调和数据处理": {
    "successors": [],
    "predecessors": [
      {
        "source": "GStreamer",
        "relation": "是"
      }
    ]
  },
  "Haar 特征的 cascade 分类器": {
    "successors": [
      {
        "target": "一种有效的物品检测方法",
        "relation": "是"
      }
    ],
    "predecessors": []
  },
  "一种有效的物品检测方法": {
    "successors": [],
    "predecessors": [
      {
        "source": "Haar 特征的 cascade 分类器",
        "relation": "是"
      }
    ]
  },
  "Haar 特征分类器": {
    "successors": [
      {
        "target": "XML 文件，该文件中会描述人体各个部位的 Haar 特征值",
        "relation": "组成部分"
      }
    ],
    "predecessors": []
  },
  "XML 文件，该文件中会描述人体各个部位的 Haar 特征值": {
    "successors": [],
    "predecessors": [
      {
        "source": "Haar 特征分类器",
        "relation": "组成部分"
      }
    ]
  },
  "已经训练好的分类器，其中包括面部，眼睛，微笑等": {
    "successors": [],
    "predecessors": [
      {
        "source": "OpenCV",
        "relation": "包含"
      },
      {
        "source": "Jetson Nano",
        "relation": "间接包含"
      }
    ]
  },
  "face_cascade.detectMultiScale": {
    "successors": [
      {
        "target": "在图像中检测面部，如果检测到面部会返回面部所在的矩形区域 Rect(x,y,w,h)",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "在图像中检测面部，如果检测到面部会返回面部所在的矩形区域 Rect(x,y,w,h)": {
    "successors": [],
    "predecessors": [
      {
        "source": "face_cascade.detectMultiScale",
        "relation": "用途"
      }
    ]
  },
  "HDMI 接口": {
    "successors": [
      {
        "target": "6",
        "relation": "是"
      }
    ],
    "predecessors": []
  },
  "6": {
    "successors": [],
    "predecessors": [
      {
        "source": "HDMI 接口",
        "relation": "是"
      }
    ]
  },
  "Display Port 接口": {
    "successors": [
      {
        "target": "用来连接 DP 屏幕",
        "relation": "用途"
      },
      {
        "target": "7",
        "relation": "是"
      }
    ],
    "predecessors": []
  },
  "用来连接 DP 屏幕": {
    "successors": [],
    "predecessors": [
      {
        "source": "Display Port 接口",
        "relation": "用途"
      }
    ]
  },
  "7": {
    "successors": [],
    "predecessors": [
      {
        "source": "Display Port 接口",
        "relation": "是"
      }
    ]
  },
  "直流桶式插座": {
    "successors": [
      {
        "target": "用于 5V 电源输入",
        "relation": "用途"
      },
      {
        "target": "8",
        "relation": "是"
      }
    ],
    "predecessors": []
  },
  "用于 5V 电源输入": {
    "successors": [],
    "predecessors": [
      {
        "source": "直流桶式插座",
        "relation": "用途"
      }
    ]
  },
  "8": {
    "successors": [],
    "predecessors": [
      {
        "source": "直流桶式插座",
        "relation": "是"
      }
    ]
  },
  "MIPI CSI-2 摄像头接口": {
    "successors": [
      {
        "target": "9",
        "relation": "是"
      }
    ],
    "predecessors": []
  },
  "9": {
    "successors": [],
    "predecessors": [
      {
        "source": "MIPI CSI-2 摄像头接口",
        "relation": "是"
      }
    ]
  },
  "运行各种深度学习模型": {
    "successors": [],
    "predecessors": [
      {
        "source": "Jetson Nano",
        "relation": "用途"
      }
    ]
  },
  "构建小型移动机器人、人脸签到打卡、口罩识别、智能门锁、智能音箱等复杂 AI 系统": {
    "successors": [],
    "predecessors": [
      {
        "source": "Jetson Nano",
        "relation": "用途"
      }
    ]
  },
  "用作启动设备和主存储器": {
    "successors": [],
    "predecessors": [
      {
        "source": "microSD 卡",
        "relation": "用途"
      }
    ]
  },
  "建议最小采用 64 GB UHS-1 卡": {
    "successors": [],
    "predecessors": [
      {
        "source": "microSD 卡",
        "relation": "特点"
      }
    ]
  },
  "Micro-USB 接口": {
    "successors": [
      {
        "target": "提供 5V⎓2A 的高品质电源为开发者套件供电",
        "relation": "用途"
      }
    ],
    "predecessors": [
      {
        "source": "Jetson Nano",
        "relation": "组成部分"
      }
    ]
  },
  "提供 5V⎓2A 的高品质电源为开发者套件供电": {
    "successors": [],
    "predecessors": [
      {
        "source": "Micro-USB 接口",
        "relation": "用途"
      }
    ]
  },
  "不包括无线网卡": {
    "successors": [],
    "predecessors": [
      {
        "source": "Jetson Nano",
        "relation": "缺点"
      }
    ]
  },
  "Ethernet 有线网络": {
    "successors": [],
    "predecessors": [
      {
        "source": "Jetson Nano",
        "relation": "组成部分"
      }
    ]
  },
  "官方推荐": {
    "successors": [
      {
        "target": "AC8265",
        "relation": "示例"
      }
    ],
    "predecessors": []
  },
  "AC8265": {
    "successors": [],
    "predecessors": [
      {
        "source": "官方推荐",
        "relation": "示例"
      }
    ]
  },
  "train_ds": {
    "successors": [
      {
        "target": "3670 files belonging to 5 classes",
        "relation": "包含"
      }
    ],
    "predecessors": []
  },
  "3670 files belonging to 5 classes": {
    "successors": [],
    "predecessors": [
      {
        "source": "train_ds",
        "relation": "包含"
      }
    ]
  },
  "734 files for validation": {
    "successors": [],
    "predecessors": [
      {
        "source": "val_ds",
        "relation": "包含"
      }
    ]
  },
  "['daisy', 'dandelion', 'roses', 'sunflowers', 'tulips']": {
    "successors": [],
    "predecessors": [
      {
        "source": "class_names",
        "relation": "包含"
      }
    ]
  },
  "对图像数据进行归一化处理": {
    "successors": [],
    "predecessors": [
      {
        "source": "normalization_layer",
        "relation": "用途"
      }
    ]
  },
  "输出三维张量，形状为(height, width, channels)": {
    "successors": [],
    "predecessors": [
      {
        "source": "Conv2D",
        "relation": "特点"
      },
      {
        "source": "MaxPooling2D",
        "relation": "特点"
      }
    ]
  },
  "MaxPooling2D": {
    "successors": [
      {
        "target": "输出三维张量，形状为(height, width, channels)",
        "relation": "特点"
      },
      {
        "target": "输出三维张量，形状描述(height, width, channels)",
        "relation": "特点"
      }
    ],
    "predecessors": [
      {
        "source": "Conv2D",
        "relation": "可能与...相关"
      }
    ]
  },
  "全连接层": {
    "successors": [],
    "predecessors": [
      {
        "source": "Dense",
        "relation": "是什么"
      }
    ]
  },
  "layers.Flatten()": {
    "successors": [
      {
        "target": "将三维张量展开到一维",
        "relation": "用途"
      },
      {
        "target": "将三维张量展开到1维",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "将三维张量展开到一维": {
    "successors": [],
    "predecessors": [
      {
        "source": "layers.Flatten()",
        "relation": "用途"
      }
    ]
  },
  "Conv2D, MaxPooling2D, Flatten, Dense层": {
    "successors": [],
    "predecessors": [
      {
        "source": "model",
        "relation": "组成部分"
      }
    ]
  },
  "配置模型的优化器、损失函数和评估指标": {
    "successors": [],
    "predecessors": [
      {
        "source": "model.compile",
        "relation": "用途"
      }
    ]
  },
  "tf.keras.losses.SparseCategoricalCrossentropy": {
    "successors": [
      {
        "target": "作为模型的损失函数",
        "relation": "用途"
      },
      {
        "target": "tf.keras.losses.SparseCategoricalCrossentropy",
        "relation": "可能与...相关"
      }
    ],
    "predecessors": [
      {
        "source": "tf.keras.losses.SparseCategoricalCrossentropy",
        "relation": "可能与...相关"
      }
    ]
  },
  "作为模型的损失函数": {
    "successors": [],
    "predecessors": [
      {
        "source": "tf.keras.losses.SparseCategoricalCrossentropy",
        "relation": "用途"
      }
    ]
  },
  "tf.keras.callbacks.TensorBoard": {
    "successors": [
      {
        "target": "记录训练过程中的日志数据",
        "relation": "用途"
      },
      {
        "target": "记录训练日志",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "记录训练过程中的日志数据": {
    "successors": [],
    "predecessors": [
      {
        "source": "tf.keras.callbacks.TensorBoard",
        "relation": "用途"
      }
    ]
  },
  "保存完整的TensorFlow模型": {
    "successors": [],
    "predecessors": [
      {
        "source": "tf.saved_model.save",
        "relation": "用途"
      }
    ]
  },
  "在移动和嵌入式设备上运行推理": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite",
        "relation": "用途"
      }
    ]
  },
  "加载和执行TFLite模型": {
    "successors": [],
    "predecessors": [
      {
        "source": "interpreter",
        "relation": "用途"
      }
    ]
  },
  "tf.nn.softmax": {
    "successors": [
      {
        "target": "计算分类概率",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "计算分类概率": {
    "successors": [],
    "predecessors": [
      {
        "source": "tf.nn.softmax",
        "relation": "用途"
      }
    ]
  },
  "make 命令": {
    "successors": [
      {
        "target": "编译 Python 模块",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "编译 Python 模块": {
    "successors": [],
    "predecessors": [
      {
        "source": "make 命令",
        "relation": "用途"
      }
    ]
  },
  "Python 模块": {
    "successors": [
      {
        "target": "安装相应的依赖包",
        "relation": "条件"
      }
    ],
    "predecessors": []
  },
  "安装相应的依赖包": {
    "successors": [],
    "predecessors": [
      {
        "source": "Python 模块",
        "relation": "条件"
      }
    ]
  },
  "make install": {
    "successors": [
      {
        "target": "Python 相关程序模块会拷贝到/opt/python",
        "relation": "结果"
      }
    ],
    "predecessors": []
  },
  "Python 相关程序模块会拷贝到/opt/python": {
    "successors": [],
    "predecessors": [
      {
        "source": "make install",
        "relation": "结果"
      }
    ]
  },
  "Python 相关程序模块": {
    "successors": [
      {
        "target": "/opt/python 目录",
        "relation": "属于"
      }
    ],
    "predecessors": []
  },
  "/opt/python 目录": {
    "successors": [],
    "predecessors": [
      {
        "source": "Python 相关程序模块",
        "relation": "属于"
      }
    ]
  },
  "2.3.0": {
    "successors": [
      {
        "target": "版本变化后 API 函数会改变",
        "relation": "特点"
      },
      {
        "target": "需要注意版本变化",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "版本变化后 API 函数会改变": {
    "successors": [],
    "predecessors": [
      {
        "source": "2.3.0",
        "relation": "特点"
      }
    ]
  },
  "需要注意版本变化": {
    "successors": [],
    "predecessors": [
      {
        "source": "2.3.0",
        "relation": "用途"
      }
    ]
  },
  "tensor()": {
    "successors": [
      {
        "target": "获取张量的指针",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "获取张量的指针": {
    "successors": [],
    "predecessors": [
      {
        "source": "tensor()",
        "relation": "用途"
      }
    ]
  },
  "interpreter.get_tensor()": {
    "successors": [
      {
        "target": "获取张量的数据",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "获取张量的数据": {
    "successors": [],
    "predecessors": [
      {
        "source": "interpreter.get_tensor()",
        "relation": "用途"
      }
    ]
  },
  "output_details": {
    "successors": [
      {
        "target": "index",
        "relation": "组成部分"
      }
    ],
    "predecessors": []
  },
  "index": {
    "successors": [],
    "predecessors": [
      {
        "source": "output_details",
        "relation": "组成部分"
      }
    ]
  },
  "daisy, dandelion, roses, sunflowers, tulips": {
    "successors": [],
    "predecessors": [
      {
        "source": "class_names",
        "relation": "包含"
      }
    ]
  },
  "tf.nn.softmax()": {
    "successors": [
      {
        "target": "计算预测结果的softmax概率",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "计算预测结果的softmax概率": {
    "successors": [],
    "predecessors": [
      {
        "source": "tf.nn.softmax()",
        "relation": "用途"
      }
    ]
  },
  "np.argmax()": {
    "successors": [
      {
        "target": "获取概率最大的类别索引",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "获取概率最大的类别索引": {
    "successors": [],
    "predecessors": [
      {
        "source": "np.argmax()",
        "relation": "用途"
      }
    ]
  },
  "版本变化后API函数会改变": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow",
        "relation": "特点"
      }
    ]
  },
  "2.3.0版本": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow",
        "relation": "示例"
      }
    ]
  },
  "TensorFlow Lite的简称": {
    "successors": [],
    "predecessors": [
      {
        "source": "TFLite",
        "relation": "是"
      }
    ]
  },
  "TFLite模型转换器": {
    "successors": [
      {
        "target": "将TensorFlow模型转换为TFLite文件格式(FlatBuffers格式)",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "将TensorFlow模型转换为TFLite文件格式(FlatBuffers格式)": {
    "successors": [],
    "predecessors": [
      {
        "source": "TFLite模型转换器",
        "relation": "用途"
      }
    ]
  },
  "在设备端运行TFLite模型": {
    "successors": [],
    "predecessors": [
      {
        "source": "TFLite解释器",
        "relation": "用途"
      }
    ]
  },
  "可以调用不同的硬件加速器比如GPU进行执行": {
    "successors": [],
    "predecessors": [
      {
        "source": "TFLite解释器",
        "relation": "特点"
      }
    ]
  },
  "TensorFlow Lite的工作流程": {
    "successors": [
      {
        "target": "选择模型、转换模型、部署到设备、优化模型",
        "relation": "包含"
      }
    ],
    "predecessors": []
  },
  "卷积层与全连接层": {
    "successors": [],
    "predecessors": [
      {
        "source": "花卉识别模型",
        "relation": "组成部分"
      }
    ]
  },
  "卷积层": {
    "successors": [
      {
        "target": "3个Conv2D和2个MaxPooling2D层",
        "relation": "组成部分"
      },
      {
        "target": "识别图像里的空间模式，例如线条和物体局部",
        "relation": "用途"
      },
      {
        "target": "使用3×3的卷积核，并在输出上使用Relu激活函数",
        "relation": "特点"
      }
    ],
    "predecessors": []
  },
  "3个Conv2D和2个MaxPooling2D层": {
    "successors": [],
    "predecessors": [
      {
        "source": "卷积层",
        "relation": "组成部分"
      }
    ]
  },
  "识别图像里的空间模式，例如线条和物体局部": {
    "successors": [],
    "predecessors": [
      {
        "source": "卷积层",
        "relation": "用途"
      }
    ]
  },
  "降低卷积层对位置的敏感": {
    "successors": [],
    "predecessors": [
      {
        "source": "最大池化层",
        "relation": "用途"
      }
    ]
  },
  "使用3×3的卷积核，并在输出上使用Relu激活函数": {
    "successors": [],
    "predecessors": [
      {
        "source": "卷积层",
        "relation": "特点"
      }
    ]
  },
  "第一个卷积层": {
    "successors": [
      {
        "target": "输出通道数为32",
        "relation": "特点"
      }
    ],
    "predecessors": []
  },
  "输出通道数为32": {
    "successors": [],
    "predecessors": [
      {
        "source": "第一个卷积层",
        "relation": "特点"
      }
    ]
  },
  "第二、三卷积层": {
    "successors": [
      {
        "target": "输出通道数为64",
        "relation": "特点"
      }
    ],
    "predecessors": []
  },
  "输出通道数为64": {
    "successors": [],
    "predecessors": [
      {
        "source": "第二、三卷积层",
        "relation": "特点"
      }
    ]
  },
  "卷积层输入": {
    "successors": [
      {
        "target": "张量形状是(image_height, image_width, color_channels)",
        "relation": "特点"
      }
    ],
    "predecessors": []
  },
  "张量形状是(image_height, image_width, color_channels)": {
    "successors": [],
    "predecessors": [
      {
        "source": "卷积层输入",
        "relation": "特点"
      }
    ]
  },
  "花卉数据集中的图片": {
    "successors": [
      {
        "target": "形状是(224,224,3)",
        "relation": "特点"
      }
    ],
    "predecessors": []
  },
  "形状是(224,224,3)": {
    "successors": [],
    "predecessors": [
      {
        "source": "花卉数据集中的图片",
        "relation": "特点"
      }
    ]
  },
  "生成一个批次的图片，以生成器的形式给模型训练": {
    "successors": [],
    "predecessors": [
      {
        "source": "ImageDataGenerator",
        "relation": "用途"
      }
    ]
  },
  "target_size参数": {
    "successors": [
      {
        "target": "将所有图像加载到一个模型需要的特定的大小",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "将所有图像加载到一个模型需要的特定的大小": {
    "successors": [],
    "predecessors": [
      {
        "source": "target_size参数",
        "relation": "用途"
      }
    ]
  },
  "默认值为32，可以设置为64": {
    "successors": [],
    "predecessors": [
      {
        "source": "batch_size",
        "relation": "特点"
      }
    ]
  },
  "shuffle参数": {
    "successors": [
      {
        "target": "控制是否以确定性顺序返回批处理",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "控制是否以确定性顺序返回批处理": {
    "successors": [],
    "predecessors": [
      {
        "source": "shuffle参数",
        "relation": "用途"
      }
    ]
  },
  "get_tensor()": {
    "successors": [
      {
        "target": "返回张量数据的副本",
        "relation": "用途"
      },
      {
        "target": "返回的是数据的副本而非引用",
        "relation": "特点"
      }
    ],
    "predecessors": []
  },
  "返回张量数据的副本": {
    "successors": [],
    "predecessors": [
      {
        "source": "get_tensor()",
        "relation": "用途"
      }
    ]
  },
  "返回的是数据的副本而非引用": {
    "successors": [],
    "predecessors": [
      {
        "source": "get_tensor()",
        "relation": "特点"
      }
    ]
  },
  "图像识别": {
    "successors": [
      {
        "target": "利用计算机对图像进行处理、分析和理解，以识别各种不同模式的目标和对象的技术",
        "relation": "是什么"
      },
      {
        "target": "应用深度学习算法的一种实践应用",
        "relation": "是"
      }
    ],
    "predecessors": []
  },
  "利用计算机对图像进行处理、分析和理解，以识别各种不同模式的目标和对象的技术": {
    "successors": [],
    "predecessors": [
      {
        "source": "图像识别",
        "relation": "是什么"
      }
    ]
  },
  "应用深度学习算法的一种实践应用": {
    "successors": [],
    "predecessors": [
      {
        "source": "图像识别",
        "relation": "是"
      }
    ]
  },
  "图像识别技术": {
    "successors": [
      {
        "target": "人脸识别与商品识别",
        "relation": "包含"
      }
    ],
    "predecessors": []
  },
  "人脸识别与商品识别": {
    "successors": [],
    "predecessors": [
      {
        "source": "图像识别技术",
        "relation": "包含"
      }
    ]
  },
  "安全检查、身份核验与移动支付": {
    "successors": [],
    "predecessors": [
      {
        "source": "人脸识别",
        "relation": "用途"
      }
    ]
  },
  "商品识别": {
    "successors": [
      {
        "target": "商品流通过程中，特别是无人货架、智能零售柜等无人零售领域",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "商品流通过程中，特别是无人货架、智能零售柜等无人零售领域": {
    "successors": [],
    "predecessors": [
      {
        "source": "商品识别",
        "relation": "用途"
      }
    ]
  },
  "边缘计算": {
    "successors": [
      {
        "target": "在靠近物或数据源头的一侧，采用网络、计算、存储、应用核心能力为一体的开放平台，就近提供最近端服务",
        "relation": "是什么"
      },
      {
        "target": "应用程序在边缘侧发起，产生更快的网络服务响应，满足行业在实时业务、应用智能、安全与隐私保护等方面的基本需求",
        "relation": "特点"
      }
    ],
    "predecessors": []
  },
  "在靠近物或数据源头的一侧，采用网络、计算、存储、应用核心能力为一体的开放平台，就近提供最近端服务": {
    "successors": [],
    "predecessors": [
      {
        "source": "边缘计算",
        "relation": "是什么"
      }
    ]
  },
  "应用程序在边缘侧发起，产生更快的网络服务响应，满足行业在实时业务、应用智能、安全与隐私保护等方面的基本需求": {
    "successors": [],
    "predecessors": [
      {
        "source": "边缘计算",
        "relation": "特点"
      }
    ]
  },
  "一组工具，可帮助开发者在移动设备、嵌入式设备和 IoT 设备上运行 TensorFlow 模型": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite",
        "relation": "是什么"
      }
    ]
  },
  "支持设备端机器学习推断，延迟较低，并且二进制文件很小": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite",
        "relation": "特点"
      }
    ]
  },
  "采用更小的模型格式，并提供了方便的模型转换器": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite",
        "relation": "特点"
      }
    ]
  },
  "将 TensorFlow 模型转换为方便解释器使用的格式，并可引入优化以减小二进制文件的大小和提高性能": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite",
        "relation": "用途"
      }
    ]
  },
  "TFLite 算子库": {
    "successors": [
      {
        "target": "目前有130个左右，它与 TensorFlow 的核心算子库略有不同，并做了移动设备相关的优化",
        "relation": "特点"
      }
    ],
    "predecessors": []
  },
  "目前有130个左右，它与 TensorFlow 的核心算子库略有不同，并做了移动设备相关的优化": {
    "successors": [],
    "predecessors": [
      {
        "source": "TFLite 算子库",
        "relation": "特点"
      }
    ]
  },
  "在硬件加速层面，对于 CPU 利用了 ARM 的 NEON 指令集做了大量的优化": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite",
        "relation": "特点"
      }
    ]
  },
  "可以利用手机上的加速器，比如 GPU 或者 DSP 等": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite",
        "relation": "特点"
      }
    ]
  },
  "最新的安卓系统提供了 Android 神经网络 API（Android NN API)，让硬件厂商可以扩展支持这样的接口": {
    "successors": [],
    "predecessors": [
      {
        "source": "TensorFlow Lite",
        "relation": "特点"
      }
    ]
  },
  "输出三维张量，形状描述(height, width, channels)": {
    "successors": [],
    "predecessors": [
      {
        "source": "Conv2D",
        "relation": "特点"
      },
      {
        "source": "MaxPooling2D",
        "relation": "特点"
      }
    ]
  },
  "filters参数决定输出通道数量": {
    "successors": [],
    "predecessors": [
      {
        "source": "Conv2D",
        "relation": "组成部分"
      }
    ]
  },
  "全连接(Full Connected)层": {
    "successors": [],
    "predecessors": [
      {
        "source": "Dense",
        "relation": "是什么"
      }
    ]
  },
  "完成分类任务": {
    "successors": [],
    "predecessors": [
      {
        "source": "Dense",
        "relation": "用途"
      }
    ]
  },
  "将三维张量展开到1维": {
    "successors": [],
    "predecessors": [
      {
        "source": "layers.Flatten()",
        "relation": "用途"
      }
    ]
  },
  "softmax激活函数": {
    "successors": [],
    "predecessors": [
      {
        "source": "Dense",
        "relation": "组成部分"
      }
    ]
  },
  "RandomFlip": {
    "successors": [
      {
        "target": "对训练图像随机变换引入多样性",
        "relation": "用途"
      },
      {
        "target": "RandomRotation",
        "relation": "可能与...相关"
      }
    ],
    "predecessors": []
  },
  "对训练图像随机变换引入多样性": {
    "successors": [],
    "predecessors": [
      {
        "source": "RandomFlip",
        "relation": "用途"
      },
      {
        "source": "RandomRotation",
        "relation": "用途"
      }
    ]
  },
  "RandomRotation": {
    "successors": [
      {
        "target": "对训练图像随机变换引入多样性",
        "relation": "用途"
      }
    ],
    "predecessors": [
      {
        "source": "RandomFlip",
        "relation": "可能与...相关"
      }
    ]
  },
  "损失函数使用类别交叉熵": {
    "successors": [],
    "predecessors": [
      {
        "source": "model.compile",
        "relation": "组成部分"
      }
    ]
  },
  "tf.keras.optimizers.Adam()": {
    "successors": [
      {
        "target": "作为模型的优化器",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "作为模型的优化器": {
    "successors": [],
    "predecessors": [
      {
        "source": "tf.keras.optimizers.Adam()",
        "relation": "用途"
      }
    ]
  },
  "记录训练日志": {
    "successors": [],
    "predecessors": [
      {
        "source": "tf.keras.callbacks.TensorBoard",
        "relation": "用途"
      }
    ]
  },
  "GPIO口": {
    "successors": [
      {
        "target": "I2C接口(SCL、SDA)",
        "relation": "包含"
      },
      {
        "target": "SPI接口（MISO、MOSI、CLK、CS片选信号SPICE0_N）",
        "relation": "包含"
      },
      {
        "target": "UART串口接口（TXD、RXD）",
        "relation": "包含"
      },
      {
        "target": "PWM接口",
        "relation": "包含"
      },
      {
        "target": "普通GPIO口",
        "relation": "包含"
      }
    ],
    "predecessors": []
  },
  "I2C接口(SCL、SDA)": {
    "successors": [],
    "predecessors": [
      {
        "source": "GPIO口",
        "relation": "包含"
      }
    ]
  },
  "SPI接口（MISO、MOSI、CLK、CS片选信号SPICE0_N）": {
    "successors": [],
    "predecessors": [
      {
        "source": "GPIO口",
        "relation": "包含"
      }
    ]
  },
  "UART串口接口（TXD、RXD）": {
    "successors": [],
    "predecessors": [
      {
        "source": "GPIO口",
        "relation": "包含"
      }
    ]
  },
  "PWM接口": {
    "successors": [],
    "predecessors": [
      {
        "source": "GPIO口",
        "relation": "包含"
      }
    ]
  },
  "普通GPIO口": {
    "successors": [],
    "predecessors": [
      {
        "source": "GPIO口",
        "relation": "包含"
      }
    ]
  },
  "树莓派接口": {
    "successors": [
      {
        "target": "Wiring Pi编号",
        "relation": "包含"
      },
      {
        "target": "BCM编号",
        "relation": "包含"
      },
      {
        "target": "物理引脚Broad编号",
        "relation": "包含"
      }
    ],
    "predecessors": []
  },
  "Wiring Pi编号": {
    "successors": [
      {
        "target": "功能接线的引脚号（如TXD、PWM0等）",
        "relation": "用途"
      }
    ],
    "predecessors": [
      {
        "source": "树莓派接口",
        "relation": "包含"
      }
    ]
  },
  "BCM编号": {
    "successors": [
      {
        "target": "Broadcom针脚号，通常称的GPIO",
        "relation": "用途"
      }
    ],
    "predecessors": [
      {
        "source": "树莓派接口",
        "relation": "包含"
      }
    ]
  },
  "物理引脚Broad编号": {
    "successors": [
      {
        "target": "PCB板上针脚的物理位置对应的编号（1~40）",
        "relation": "用途"
      }
    ],
    "predecessors": [
      {
        "source": "树莓派接口",
        "relation": "包含"
      }
    ]
  },
  "功能接线的引脚号（如TXD、PWM0等）": {
    "successors": [],
    "predecessors": [
      {
        "source": "Wiring Pi编号",
        "relation": "用途"
      }
    ]
  },
  "Broadcom针脚号，通常称的GPIO": {
    "successors": [],
    "predecessors": [
      {
        "source": "BCM编号",
        "relation": "用途"
      }
    ]
  },
  "PCB板上针脚的物理位置对应的编号（1~40）": {
    "successors": [],
    "predecessors": [
      {
        "source": "物理引脚Broad编号",
        "relation": "用途"
      }
    ]
  },
  "应用于树莓派的GPIO控制库函数": {
    "successors": [],
    "predecessors": [
      {
        "source": "Wiring Pi",
        "relation": "是什么"
      }
    ]
  },
  "由Gordon Henderson编写维护": {
    "successors": [],
    "predecessors": [
      {
        "source": "Wiring Pi",
        "relation": "特点"
      }
    ]
  },
  "I2C库": {
    "successors": [],
    "predecessors": [
      {
        "source": "Wiring Pi",
        "relation": "包含"
      }
    ]
  },
  "SPI库": {
    "successors": [],
    "predecessors": [
      {
        "source": "Wiring Pi",
        "relation": "包含"
      }
    ]
  },
  "UART库": {
    "successors": [],
    "predecessors": [
      {
        "source": "Wiring Pi",
        "relation": "包含"
      }
    ]
  },
  "软件PWM库": {
    "successors": [],
    "predecessors": [
      {
        "source": "Wiring Pi",
        "relation": "包含"
      }
    ]
  },
  "使用C、C++开发并可被其他语言包使用": {
    "successors": [],
    "predecessors": [
      {
        "source": "Wiring Pi",
        "relation": "用途"
      }
    ]
  },
  "包含命令行工具gpio，用于设置、读写GPIO管脚": {
    "successors": [],
    "predecessors": [
      {
        "source": "Wiring Pi",
        "relation": "用途"
      }
    ]
  },
  "下载源代码使用GIT工具下载代码，然后编译安装": {
    "successors": [],
    "predecessors": [
      {
        "source": "Wiring Pi",
        "relation": "安装方式"
      }
    ]
  },
  "在官网下载安装包后安装": {
    "successors": [],
    "predecessors": [
      {
        "source": "Wiring Pi",
        "relation": "安装方式"
      }
    ]
  },
  "gpio readall命令": {
    "successors": [
      {
        "target": "查看树莓派的GPIO引脚信息",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "查看树莓派的GPIO引脚信息": {
    "successors": [],
    "predecessors": [
      {
        "source": "gpio readall命令",
        "relation": "用途"
      }
    ]
  },
  "Wiring Pi编号模式": {
    "successors": [
      {
        "target": "只使用在C语言中",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "只使用在C语言中": {
    "successors": [],
    "predecessors": [
      {
        "source": "Wiring Pi编号模式",
        "relation": "用途"
      }
    ]
  },
  "Python程序": {
    "successors": [
      {
        "target": "使用BCM编号、物理引脚Broad编号",
        "relation": "用途"
      }
    ],
    "predecessors": []
  },
  "使用BCM编号、物理引脚Broad编号": {
    "successors": [],
    "predecessors": [
      {
        "source": "Python程序",
        "relation": "用途"
      }
    ]
  }
}