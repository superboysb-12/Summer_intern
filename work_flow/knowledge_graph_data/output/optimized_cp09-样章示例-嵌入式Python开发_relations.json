[
  [
    "make 命令",
    "执行步骤",
    "如果提示 Python 模块无法编译，需要按照错误提示排查原因，通常是没安装相应的依赖包"
  ],
  [
    "make install",
    "用途",
    "将 Python 相关程序模块拷贝到/opt/python"
  ],
  [
    "Python 模块",
    "组成部分",
    "Python 相关程序模块"
  ],
  [
    "Python",
    "是什么",
    "一种功能强大的编程语言"
  ],
  [
    "Python",
    "特点",
    "易于使用，易于阅读和编写"
  ],
  [
    "Python",
    "用途",
    "与树莓派结合可以将项目与现实世界轻松的联系起来"
  ],
  [
    "树莓派",
    "包含",
    "Python开发环境"
  ],
  [
    "树莓派",
    "使用方法",
    "打开终端窗口，执行python来测试是否安装了Python开发环境，并查看当前的Python版本"
  ],
  [
    "Jupyter Notebook",
    "是什么",
    "一个功能强大的交互式Python开发环境"
  ],
  [
    "Jupyter Notebook",
    "优点",
    "功能强大，交互式、富文本，还有丰富的插件、主题修改、多语言支持"
  ],
  [
    "JupyterLab",
    "是什么",
    "Jupyter Notebook的全面升级版本"
  ],
  [
    "JupyterLab",
    "特点",
    "集Jupyter Notebook、文本编辑器、终端以及各种个性化组件于一体的全能IDE"
  ],
  [
    "JupyterLab",
    "安装方法",
    "通过pip安装，网络环境差时可考虑更换源"
  ],
  [
    "JupyterLab",
    "组成部分",
    "Jupyter Notebook、文本编辑器、终端以及各种个性化组件"
  ],
  [
    "Jetson Nano 开发板",
    "特点",
    "不支持 CUDA"
  ],
  [
    "OpenCV",
    "安装方法",
    "在 Jetson Nano 开发板上手动编译与安装"
  ],
  [
    "OpenCV 安装",
    "执行步骤",
    "安装依赖项"
  ],
  [
    "OpenCV 安装",
    "执行步骤",
    "下载 OpenCV"
  ],
  [
    "OpenCV 安装",
    "执行步骤",
    "编译 OpenCV"
  ],
  [
    "OpenCV 安装",
    "执行步骤",
    "安装 OpenCV 项目"
  ],
  [
    "OpenCV 编译",
    "特点",
    "需要设置 OpenCV 的内容、位置和方式"
  ],
  [
    "OpenCV 编译",
    "特点",
    "涉及许多内容"
  ],
  [
    "OpenCV 编译",
    "执行步骤",
    "运行配置后需要检查输出结果"
  ],
  [
    "OpenCV 编译",
    "执行步骤",
    "准备好所有编译指令后开始编译"
  ],
  [
    "OpenCV 编译",
    "特点",
    "将需要大约两个半小时"
  ],
  [
    "OpenCV 安装",
    "特点",
    "整个安装需要两个小时才能完成"
  ],
  [
    "OpenCV 安装",
    "特点",
    "可以创建了一个安装脚本"
  ],
  [
    "OpenCV 安装",
    "执行步骤",
    "以依赖项的安装开始"
  ],
  [
    "OpenCV 安装",
    "执行步骤",
    "以 ldconfig 结束"
  ],
  [
    "OpenCV 编译",
    "示例",
    "-D WITH_QT=OFF 禁用了 Qt5 支持"
  ],
  [
    "Jetson Nano",
    "包含",
    "MIPI的相机串行接口（CSI）端口"
  ],
  [
    "MIPI",
    "是什么",
    "MIPI联盟发起的为移动应用处理器制定的开放标准"
  ],
  [
    "CSI端口",
    "用途",
    "支持Raspberry Pi、Arducam等常见的相机模块"
  ],
  [
    "Raspberry Camera V2",
    "特点",
    "800万像素、感光芯片为索尼IMX219"
  ],
  [
    "Raspberry Camera V2",
    "特点",
    "静态图片分辨率为3280 × 2464"
  ],
  [
    "Raspberry Camera V2",
    "特点",
    "支持1080p30, 720p60以及640 × 480p90视频录像"
  ],
  [
    "Jetson Nano",
    "使用方法",
    "开机前先安装CSI摄像头，系统才能识别"
  ],
  [
    "JetPack SDK",
    "特点",
    "支持预装驱动程序的RPi相机，可以很容易地用作即插即用外围设备"
  ],
  [
    "GStreamer",
    "是什么",
    "一个多媒体框架，用于后端处理任务"
  ],
  [
    "GStreamer",
    "用途",
    "处理媒体应用程序，如格式修改、显示驱动程序协调和数据处理"
  ],
  [
    "Haar特征的cascade分类器",
    "是什么",
    "一种有效的物品检测方法"
  ],
  [
    "Haar特征的cascade分类器",
    "工作原理",
    "通过许多正负样例中训练得到cascade方程，然后将其应用于其他图片"
  ],
  [
    "OpenCV",
    "包含",
    "已经训练好的分类器，其中包括面部，眼睛，微笑等"
  ],
  [
    "face_cascade.detectMultiScale",
    "用途",
    "在图像中检测面部"
  ],
  [
    "pip install",
    "执行步骤",
    "添加--no-cache-dir 参数"
  ],
  [
    "pip install",
    "执行步骤",
    "手动下载安装需要的 Package 后用 pip 安装"
  ],
  [
    "jupyter",
    "组成部分",
    "jupyter_notebook_config.py"
  ],
  [
    "jupyter_notebook_config.py",
    "特点",
    "由 jupyter 软件生成"
  ],
  [
    "jupyter_notebook_config.py",
    "用途",
    "配置 Jupyter lab"
  ],
  [
    "jupyter_notebook_config.py",
    "执行步骤",
    "修改运行服务监听的 IP 地址，端口，用于 notebooks 内核的目录，是否打开浏览器"
  ],
  [
    "Jupyter lab",
    "执行步骤",
    "设置访问密码"
  ],
  [
    "Jupyter lab",
    "执行步骤",
    "重启树莓派后尝试启动"
  ],
  [
    "Jupyter lab",
    "使用方法",
    "在树莓派浏览器中输入 http://"
  ],
  [
    "/usr/bin/python",
    "是什么",
    "一个软链接"
  ],
  [
    "/usr/bin/python",
    "指向",
    "python"
  ],
  [
    "minNeighbors",
    "是什么",
    "构成检测目标的相邻矩形的最小个数"
  ],
  [
    "minNeighbors",
    "特点",
    "默认为3个"
  ],
  [
    "CSI 摄像头",
    "使用方法",
    "需要使用 Gstreamer 读取视频流"
  ],
  [
    "GStreamer",
    "执行步骤",
    "创建 GStreamer 管道，将管道绑定 opencv 的视频流，逐帧提取和显示"
  ],
  [
    "GStreamer",
    "组成部分",
    "摄像头预捕获的图像宽度、高度，窗口显示的图像宽度、高度，捕获帧率，是否旋转图像"
  ],
  [
    "人脸检测",
    "执行步骤",
    "将彩色图像转换为灰度图像，检测图像中是否包含人脸，在边界周围绘制矩形"
  ],
  [
    "Face Recognition",
    "是什么",
    "一个强大、简单、易上手的人脸识别开源项目"
  ],
  [
    "Face Recognition",
    "组成部分",
    "dlib 这一 C++ 图形库"
  ],
  [
    "Face Recognition",
    "用途",
    "实现刷脸登录的功能"
  ],
  [
    "Face Recognition",
    "执行步骤",
    "人脸检测、检测面部特征点、给脸部编码、从编码中找出人的名字"
  ],
  [
    "face_encodings",
    "用途",
    "返回图像中每张人脸的 128 维人脸编码"
  ],
  [
    "compare_faces",
    "用途",
    "将人脸编码列表与候选编码进行比较，以查看它们是否匹配"
  ],
  [
    "face_distance",
    "用途",
    "计算已知人脸和未知人脸特征向量的距离"
  ],
  [
    "face_distance",
    "工作原理",
    "将给定人脸编码列表与已知的人脸编码进行比较，并得到每个比较人脸的欧氏距离"
  ],
  [
    "load_image_file",
    "用途",
    "加载面孔照片"
  ],
  [
    "face_locations",
    "用途",
    "定位图像中的人脸位置"
  ],
  [
    "number_of_times_to_upsample",
    "用途",
    "设置对图像进行多少次上采样以查找人脸"
  ],
  [
    "model",
    "比较",
    "\"hog\"则结果不太准确，但在 CPU 上运行更快；\"cnn\"是更准确的深度学习模型，需要 GPU 加速"
  ],
  [
    "LED",
    "用途",
    "用于电路中的发光元件"
  ],
  [
    "电阻",
    "用途",
    "限制电流以保护LED和GPIO引脚"
  ],
  [
    "GPIO引脚",
    "用途",
    "为LED提供电源"
  ],
  [
    "树莓派",
    "包含",
    "GPIO端口"
  ],
  [
    "GPIO21",
    "属于",
    "树莓派的GPIO端口"
  ],
  [
    "GPIO21",
    "执行步骤",
    "激活、设置为输出状态、写入1以点亮LED"
  ],
  [
    "Python程序",
    "使用方法",
    "使用GPIO.setmod()方法指定引脚编号系统"
  ],
  [
    "Python程序",
    "使用方法",
    "使用GPIO.setup()方法设置引脚为输入或输出"
  ],
  [
    "GPIO引脚",
    "特点",
    "有两种编号模式：BCM编号模式和物理引脚Broad编号模式"
  ],
  [
    "Linux系统",
    "工作原理",
    "通过文件读写操作控制外设"
  ],
  [
    "Jetson",
    "包含",
    "CSI 相机接口"
  ],
  [
    "CSI 相机接口",
    "特点",
    "B02版本有两路"
  ],
  [
    "CSI 相机接口",
    "用途",
    "可以使用树莓派摄像头，IMX219模组800万像素"
  ],
  [
    "镜像写入 microSD 卡",
    "执行步骤",
    "首先到英伟达官方下载官方镜像，也可以去开源社区下载配置好的镜像"
  ],
  [
    "镜像写入 microSD 卡",
    "执行步骤",
    "把 microSD 卡插到读卡器上之后插到电脑，使用 SD Memory Card Formatter 格式化 microSD 卡"
  ],
  [
    "镜像写入 microSD 卡",
    "执行步骤",
    "使用 Etcher 将镜像写入 microSD 卡"
  ],
  [
    "Etcher",
    "使用方法",
    "下载、安装并启动 Etcher"
  ],
  [
    "Etcher",
    "使用方法",
    "单击“Select image”（选择镜像），然后选择先前下载的压缩镜像文件"
  ],
  [
    "Etcher",
    "使用方法",
    "插入 microSD 卡"
  ],
  [
    "Etcher",
    "使用方法",
    "单击“Select drive”（选择驱动器），并选择正确设备"
  ],
  [
    "Etcher",
    "使用方法",
    "单击“Flash!”（闪存！）"
  ],
  [
    "microSD 卡",
    "特点",
    "如果通过 USB3 连接，Etcher 写入和验证镜像需要10 分钟"
  ],
  [
    "Jetson Nano",
    "使用方法",
    "将已写入系统映像的 microSD 卡插入 Jetson Nano 模块底部的插槽中"
  ],
  [
    "Jetson Nano",
    "使用方法",
    "有两种方式可以与 Jetson Nano 开发板进行交互，一个是连接显示器、键盘和鼠标，二是通过 SSH 或 VNC 服务从另一台计算机远程访问"
  ],
  [
    "Jetson Nano",
    "使用方法",
    "第一次请连接显示器，键盘和鼠标，然后连接的 Micro-USB 电源，开发板将自动开机并启动"
  ],
  [
    "NVIDIA Jetson 开发者专区",
    "用途",
    "获取更多的 Jetson 平台信息"
  ],
  [
    "NVIDIA Jetson 论坛",
    "用途",
    "提问或分享项目"
  ],
  [
    "Jetson 项目社区",
    "用途",
    "获取一些非常有意思的项目"
  ],
  [
    "Hello AI World",
    "用途",
    "快速的启动并运行一组深度学习推理演示，体验 Jetson 的强大功能"
  ],
  [
    "Hello AI World",
    "特点",
    "演示使用计算机视觉相关的模型，包括实时摄像机的使用，使用带有 JetPack SDK 和 NVIDIA TensorRT 的 Jetson 开发工具包上的预训练模型进行实时图像分类和对象检测"
  ],
  [
    "Hello AI World",
    "特点",
    "还可以使用 C++ 编写自己的易于理解的识别程序"
  ],
  [
    "JetBot",
    "用途",
    "面向有兴趣学习 AI 和构建有趣应用程序的创客、学生和爱好者"
  ],
  [
    "JetBot",
    "特点",
    "易于设置和使用，并且与许多流行的配件兼容"
  ],
  [
    "JetBot",
    "特点",
    "通过几个交互式教程展示如何利用 AI 的力量来教 JetBot 跟随物体、避免碰撞等"
  ],
  [
    "VNC 服务器",
    "用途",
    "实现 headless 远程桌面访问 Jetson Nano"
  ],
  [
    "VNC 服务器",
    "特点",
    "可以从同一网络上的另一台计算机控制 Jetson Nano 开发板"
  ],
  [
    "VNC 服务器",
    "执行步骤",
    "安装 vino，可以用 dpkg -l |grep vino 查看是否已经安装"
  ],
  [
    "VNC 服务器",
    "执行步骤",
    "配置 VNC 服务"
  ],
  [
    "VNC 服务器",
    "执行步骤",
    "设置 VNC 密码 thepassword 修改为你的密码"
  ],
  [
    "VNC 服务器",
    "特点",
    "只有在本地登录到 Jetson 之后才可用"
  ],
  [
    "VNC 服务器",
    "执行步骤",
    "使用系统设置应用程序来启用自动登录"
  ],
  [
    "VNC Viewer",
    "使用方法",
    "首先需要查询 ip 地址"
  ],
  [
    "Python 2.7",
    "特点",
    "官方已经停止维护"
  ],
  [
    "树莓派",
    "包含",
    "Python"
  ],
  [
    "图像识别",
    "是什么",
    "利用计算机对图像进行处理、分析和理解，以识别各种不同模式的目标和对象的技术"
  ],
  [
    "图像识别",
    "用途",
    "应用深度学习算法的一种实践应用"
  ],
  [
    "图像识别技术",
    "包含",
    "人脸识别与商品识别"
  ],
  [
    "人脸识别",
    "用途",
    "安全检查、身份核验与移动支付"
  ],
  [
    "商品识别",
    "用途",
    "商品流通过程中，特别是无人货架、智能零售柜等无人零售领域"
  ],
  [
    "边缘计算",
    "是什么",
    "在靠近物或数据源头的一侧，采用网络、计算、存储、应用核心能力为一体的开放平台，就近提供最近端服务"
  ],
  [
    "边缘计算",
    "特点",
    "应用程序在边缘侧发起，产生更快的网络服务响应，满足行业在实时业务、应用智能、安全与隐私保护等方面的基本需求"
  ],
  [
    "TensorFlow Lite",
    "是什么",
    "一组工具，可帮助开发者在移动设备、嵌入式设备和 IoT 设备上运行 TensorFlow 模型"
  ],
  [
    "TensorFlow Lite",
    "特点",
    "支持设备端机器学习推断，延迟较低，并且二进制文件很小"
  ],
  [
    "TensorFlow Lite",
    "组成部分",
    "TensorFlow Lite 解释器(Interpreter)、TensorFlow Lite 转换器(Converter)、算子库(Op kernels)、硬件加速代理(Hardware accelerator delegate)"
  ],
  [
    "TensorFlow Lite",
    "工作原理",
    "采用更小的模型格式，并提供了方便的模型转换器，可将 TensorFlow 模型转换为方便解释器使用的格式，并可引入优化以减小二进制文件的大小和提高性能"
  ],
  [
    "TensorFlow Lite",
    "用途",
    "在手机、嵌入式 Linux 设备和微控制器等很多不同类型的硬件上运行经过专门优化的模型"
  ],
  [
    "TensorFlow Lite 解释器",
    "特点",
    "可在手机、嵌入式 Linux 设备和微控制器等很多不同类型的硬件上运行经过专门优化的模型"
  ],
  [
    "TensorFlow Lite 转换器",
    "用途",
    "将 TensorFlow 模型转换为方便解释器使用的格式，并可引入优化以减小二进制文件的大小和提高性能"
  ],
  [
    "TFLite 算子库",
    "特点",
    "目前有130个左右，它与 TensorFlow 的核心算子库略有不同，并做了移动设备相关的优化"
  ],
  [
    "TensorFlow Lite",
    "特点",
    "安卓应用只需 1 兆左右的运行环境，在 MCU 上甚至可以小于 100KB"
  ],
  [
    "TensorFlow Lite",
    "工作原理",
    "在硬件加速层面，对于 CPU 利用了 ARM 的 NEON 指令集做了大量的优化"
  ],
  [
    "TensorFlow Lite",
    "工作原理",
    "可以利用手机上的加速器，比如 GPU 或者 DSP 等"
  ],
  [
    "TensorFlow Lite",
    "工作原理",
    "最新的安卓系统提供了 Android 神经网络 API（Android NN API)，让硬件厂商可以扩展支持这样的接口"
  ],
  [
    "TFLite",
    "是什么",
    "TensorFlow Lite的简称，用于在移动和嵌入式设备上运行机器学习模型"
  ],
  [
    "TFLite模型转换器",
    "用途",
    "将TensorFlow模型转换为TFLite文件格式(FlatBuffers格式)"
  ],
  [
    "TFLite解释器",
    "用途",
    "在设备端运行TFLite模型，调用不同的硬件加速器"
  ],
  [
    "TensorFlow Lite工作流程",
    "执行步骤",
    "选择模型、转换模型、部署到设备、优化模型"
  ],
  [
    "花卉识别模型",
    "组成部分",
    "卷积层与全连接层"
  ],
  [
    "卷积层",
    "组成部分",
    "3个Conv2D和2个MaxPooling2D层"
  ],
  [
    "Conv2D",
    "用途",
    "识别图像里的空间模式，例如线条和物体局部"
  ],
  [
    "MaxPooling2D",
    "用途",
    "降低卷积层对位置的敏感"
  ],
  [
    "卷积层",
    "特点",
    "使用3×3的卷积核，并在输出上使用Relu激活函数"
  ],
  [
    "第一个卷积层",
    "特点",
    "输出通道数为32"
  ],
  [
    "第二、三卷积层",
    "特点",
    "输出通道数为64"
  ],
  [
    "卷积层输入",
    "特点",
    "张量形状是(image_height, image_width, color_channels)"
  ],
  [
    "花卉数据集",
    "特点",
    "图片形状是(224,224,3)"
  ],
  [
    "ImageDataGenerator",
    "用途",
    "生成一个批次的图片，以生成器的形式给模型训练"
  ],
  [
    "flow_from_directory",
    "用途",
    "逐步加载单个数据集的图像"
  ],
  [
    "target_size",
    "用途",
    "将所有图像加载到一个模型需要的特定的大小"
  ],
  [
    "batch_size",
    "用途",
    "训练时从数据集中的不同类中随机选出的图像数量"
  ],
  [
    "Python 源码包",
    "组成部分",
    "从 Python 官网下载"
  ],
  [
    "Python 源码包",
    "使用方法",
    "下载解压"
  ],
  [
    "树莓派通用输入/输出接口（GPIO）",
    "是什么",
    "一组数字引脚，可用于将树莓派连接到其他电子设备"
  ],
  [
    "树莓派通用输入/输出接口（GPIO）",
    "用途",
    "读取传感器数据，控制 LED 等外部设备"
  ],
  [
    "树莓派通用输入/输出接口（GPIO）",
    "特点",
    "可以配置为输入或输出"
  ],
  [
    "树莓派通用输入/输出接口（GPIO）",
    "使用方法",
    "通过软件编程进行控制，例如使用 Python 或其他编程语言编写程序"
  ],
  [
    "树莓派通用输入/输出接口（GPIO）",
    "组成部分",
    "40个 GPIO 引脚，其中26个引脚可以用作数字输入或输出，另外14个引脚用于其他功能"
  ],
  [
    "树莓派通用输入/输出接口（GPIO）",
    "缺点",
    "错误的连接和编程可能会导致设备损坏或故障"
  ],
  [
    "树莓派通用输入/输出接口（GPIO）",
    "使用方法",
    "需要小心谨慎，建议在使用之前仔细阅读相关文档，并确保采取适当的安全措施"
  ],
  [
    "树莓派通用输入/输出接口（GPIO）",
    "组成部分",
    "电源接口（5V）"
  ],
  [
    "train_ds",
    "用途",
    "用于训练模型"
  ],
  [
    "val_ds",
    "用途",
    "用于验证模型"
  ],
  [
    "class_names",
    "包含",
    "['daisy', 'dandelion', 'roses', 'sunflowers', 'tulips']"
  ],
  [
    "normalization_layer",
    "用途",
    "对图像数据进行归一化处理"
  ],
  [
    "AUTOTUNE",
    "用途",
    "优化数据加载性能"
  ],
  [
    "Conv2D",
    "特点",
    "输出三维张量，形状为(height, width, channels)"
  ],
  [
    "MaxPooling2D",
    "特点",
    "输出三维张量，形状为(height, width, channels)"
  ],
  [
    "Dense",
    "是什么",
    "全连接层"
  ],
  [
    "layers.Flatten()",
    "用途",
    "将三维张量展开到一维"
  ],
  [
    "model",
    "组成部分",
    "Conv2D, MaxPooling2D, Flatten, Dense层"
  ],
  [
    "model.compile",
    "执行步骤",
    "配置优化器、损失函数和评估指标"
  ],
  [
    "tf.keras.optimizers.Adam()",
    "用途",
    "优化模型参数"
  ],
  [
    "tf.keras.losses.SparseCategoricalCrossentropy",
    "用途",
    "计算分类损失"
  ],
  [
    "tensorboard_callback",
    "用途",
    "记录训练过程数据"
  ],
  [
    "model.fit",
    "执行步骤",
    "训练模型并验证"
  ],
  [
    "saved_model_dir",
    "用途",
    "保存训练好的模型"
  ],
  [
    "converter",
    "用途",
    "将模型转换为TFLite格式"
  ],
  [
    "tflite_model",
    "用途",
    "部署到嵌入式设备"
  ],
  [
    "Jetson Nano",
    "用途",
    "部署TensorFlow Lite模型"
  ],
  [
    "interpreter",
    "用途",
    "执行TensorFlow Lite模型推理"
  ],
  [
    "input_details",
    "用途",
    "获取模型输入张量信息"
  ],
  [
    "output_details",
    "用途",
    "获取模型输出张量信息"
  ],
  [
    "output_data",
    "用途",
    "存储模型推理结果"
  ],
  [
    "tf.nn.softmax",
    "用途",
    "计算分类概率"
  ],
  [
    "VNC Viewer",
    "执行步骤",
    "输入 IP 地址后点击 OK，双击对应的 VNC 用户输入密码，最后进入到 VNC 界面"
  ],
  [
    "TensorFlow",
    "是什么",
    "一个使用数据流图进行数值计算的开源软件库"
  ],
  [
    "TensorFlow",
    "特点",
    "灵活的架构可以将模型部署到桌面、服务器或移动设备中的 CPU 或 GPU 上"
  ],
  [
    "TensorFlow GPU 版本",
    "组成部分",
    "CUDA"
  ],
  [
    "TensorFlow GPU 版本",
    "执行步骤",
    "安装依赖项，安装 TensorFlow 所需的系统包，安装和升级 pip3，安装 Python 包依赖项，确认 CUDA 已经被正常安装，安装 TensorFlow，验证安装"
  ],
  [
    "TensorFlow",
    "用途",
    "数值计算"
  ],
  [
    "Jetson Nano",
    "包含",
    "OpenCV"
  ],
  [
    "JetPack",
    "包含",
    "OpenCV"
  ],
  [
    "OpenCV",
    "特点",
    "不支持 CUDA 且版本是固定搭配的"
  ],
  [
    "jtop 命令",
    "用途",
    "查看开发板系统信息"
  ],
  [
    "树莓派",
    "用途",
    "控制外部硬件设备"
  ],
  [
    "树莓派",
    "组成部分",
    "GPIO引脚"
  ],
  [
    "LED灯",
    "用途",
    "通过GPIO控制展示基础硬件控制能力"
  ],
  [
    "LED灯",
    "组成部分",
    "限流电阻"
  ],
  [
    "点亮LED灯",
    "执行步骤",
    "将LED灯通过限流电阻连接到GPIO21，负极连接到GND形成回路"
  ],
  [
    "GPIO21",
    "用途",
    "输出控制信号"
  ],
  [
    "GND",
    "用途",
    "提供电路回路的地线连接"
  ],
  [
    "面包板",
    "用途",
    "搭建电路原型"
  ],
  [
    "杜邦线公对母",
    "用途",
    "连接电路元件"
  ],
  [
    "330欧姆电阻",
    "用途",
    "作为LED灯的限流电阻"
  ],
  [
    "GPIO引脚",
    "特点",
    "输出电压约为3.3V"
  ],
  [
    "GPIO口",
    "包含",
    "I2C接口(SCL、SDA)"
  ],
  [
    "GPIO口",
    "包含",
    "SPI接口（MISO、MOSI、CLK、CS片选信号SPICE0_N）"
  ],
  [
    "GPIO口",
    "包含",
    "UART串口接口（TXD、RXD）"
  ],
  [
    "GPIO口",
    "包含",
    "PWM接口"
  ],
  [
    "GPIO口",
    "包含",
    "普通GPIO口"
  ],
  [
    "树莓派接口",
    "组成部分",
    "Wiring Pi编号"
  ],
  [
    "树莓派接口",
    "组成部分",
    "BCM编号"
  ],
  [
    "树莓派接口",
    "组成部分",
    "物理引脚Broad编号"
  ],
  [
    "Wiring Pi",
    "是什么",
    "应用于树莓派的GPIO控制库函数"
  ],
  [
    "Wiring Pi",
    "特点",
    "使用C、C++开发并且可以被其他语言包使用"
  ],
  [
    "Wiring Pi",
    "包含",
    "GPIO库"
  ],
  [
    "Wiring Pi",
    "包含",
    "I2C库"
  ],
  [
    "Wiring Pi",
    "包含",
    "SPI库"
  ],
  [
    "Wiring Pi",
    "包含",
    "UART库"
  ],
  [
    "Wiring Pi",
    "包含",
    "软件PWM库"
  ],
  [
    "Wiring Pi",
    "用途",
    "控制GPIO管脚"
  ],
  [
    "Wiring Pi",
    "使用方法",
    "通过下载源代码来安装"
  ],
  [
    "Wiring Pi",
    "使用方法",
    "使用GIT工具下载代码，然后编译安装"
  ],
  [
    "Wiring Pi",
    "使用方法",
    "在官网下载安装包后安装"
  ],
  [
    "gpio readall命令",
    "用途",
    "查看树莓派的GPIO引脚信息"
  ],
  [
    "Wiring Pi编号模式",
    "用途",
    "在C语言中使用"
  ],
  [
    "BCM编号模式",
    "用途",
    "在Python程序中控制硬件"
  ],
  [
    "val_ds",
    "组成部分",
    "x—images, y—labels"
  ],
  [
    "val_ds.map",
    "执行步骤",
    "lambda x, y: (normalization_layer(x), y)"
  ],
  [
    "normalization_layer",
    "用途",
    "对x进行归一化处理"
  ],
  [
    "pip3",
    "是什么",
    "Python 官方集成的包管理工具"
  ],
  [
    "pip",
    "是什么",
    "Python 的包管理工具"
  ],
  [
    "pip",
    "属于",
    "Python 生态系统"
  ],
  [
    "pip3",
    "属于",
    "Python 生态系统"
  ],
  [
    "pip",
    "比较",
    "pip3 是 pip 的 Python 3 版本"
  ],
  [
    "GPIO库",
    "用途",
    "控制GPIO引脚"
  ],
  [
    "BCM编号方式",
    "是什么",
    "GPIO引脚编号模式的一种"
  ],
  [
    "GPIO21",
    "用途",
    "LED的控制引脚"
  ],
  [
    "GPIO.setup()方法",
    "用途",
    "设置GPIO引脚模式"
  ],
  [
    "GPIO21",
    "组成部分",
    "输出模式"
  ],
  [
    "HIGH电平",
    "用途",
    "点亮LED灯"
  ],
  [
    "time.sleep()方法",
    "用途",
    "延迟一秒钟"
  ],
  [
    "LOW电平",
    "用途",
    "关闭LED灯"
  ],
  [
    "GPIO.cleanup()方法",
    "用途",
    "清理GPIO引脚的设置"
  ],
  [
    "四引脚按键",
    "是什么",
    "用于控制LED灯的亮暗的按键"
  ],
  [
    "四引脚按键",
    "工作原理",
    "由常开触点、常闭触点组合而成"
  ],
  [
    "常开触点",
    "用途",
    "当压力施压时电路接通"
  ],
  [
    "常闭触点",
    "用途",
    "当压力撤销时电路恢复"
  ],
  [
    "上拉电阻",
    "用途",
    "在18号引脚处设置上拉电阻"
  ],
  [
    "GPIO.setup(18, GPIO.IN, pull_up_down=GPIO.PUD_UP)",
    "用途",
    "设置上拉电阻"
  ],
  [
    "Conv2D",
    "是什么",
    "一个用于构建卷积神经网络的层，输出三维张量"
  ],
  [
    "MaxPooling2D",
    "是什么",
    "一个用于构建卷积神经网络的池化层，输出三维张量"
  ],
  [
    "Dense",
    "是什么",
    "全连接层，等同于Full Connected层"
  ],
  [
    "Conv2D",
    "特点",
    "输出的通道数量取决于声明层时的filters参数"
  ],
  [
    "Conv2D",
    "组成部分",
    "filters参数、kernel_size参数、padding参数和activation参数"
  ],
  [
    "MaxPooling2D",
    "特点",
    "使输出宽度和高度收缩"
  ],
  [
    "Dense",
    "用途",
    "完成分类任务"
  ],
  [
    "layers.Flatten()",
    "用途",
    "将三维张量展开到一维以便传入Dense层"
  ],
  [
    "Dense",
    "组成部分",
    "units参数和activation参数"
  ],
  [
    "卷积神经网络模型",
    "组成部分",
    "Conv2D层、MaxPooling2D层、Flatten层和Dense层"
  ],
  [
    "模型训练",
    "执行步骤",
    "编译模型、设置损失函数、设置优化器、设置评估指标"
  ],
  [
    "SparseCategoricalCrossentropy",
    "用途",
    "作为损失函数用于多分类任务"
  ],
  [
    "Adam",
    "用途",
    "作为优化器用于模型训练"
  ],
  [
    "TensorBoard",
    "用途",
    "记录训练日志用于可视化"
  ],
  [
    "RandomFlip",
    "用途",
    "对训练图像随机变换以增加数据多样性"
  ],
  [
    "RandomRotation",
    "用途",
    "对训练图像随机旋转以增加数据多样性"
  ],
  [
    "model.fit",
    "执行步骤",
    "训练模型并记录训练和验证准确性/损失"
  ],
  [
    "tf.saved_model.save",
    "用途",
    "保存完整的TensorFlow程序，包括权重值和计算"
  ],
  [
    "SavedModel",
    "特点",
    "不需要原始模型构建代码就可以运行"
  ],
  [
    "tf.lite.TFLiteConverter.from_saved_model",
    "用途",
    "将SavedModel转换为TFLite兼容格式"
  ],
  [
    "Jetson Nano",
    "用途",
    "部署TensorFlow Lite模型"
  ],
  [
    "model.tflite",
    "用途",
    "用于在Jetson Nano开发板上识别花卉图片"
  ],
  [
    "class_names",
    "包含",
    "郁金香(tulips)、玫瑰(roses)、浦公英(dandelion)、向日葵(sunflowers)、雏菊(daisy)"
  ],
  [
    "Jetson Nano",
    "缺点",
    "资源有限，训练网络时可能出现内存溢出错误"
  ],
  [
    "batch_size",
    "特点",
    "受限于GPU内存的大小"
  ],
  [
    "TensorFlow Lite",
    "用途",
    "执行推理以识别输入图像"
  ],
  [
    "TensorFlow Lite支持库",
    "用途",
    "简化图像预处理和模型输出处理"
  ],
  [
    "数据转换",
    "执行步骤",
    "将输入数据转换成模型接收的形式或排布，如resize原始图像到模型输入大小"
  ],
  [
    "HDMI 接口",
    "是什么",
    "用于连接显示设备的接口"
  ],
  [
    "Display Port 接口",
    "用途",
    "连接 DP 屏幕"
  ],
  [
    "直流桶式插座",
    "用途",
    "5V 电源输入"
  ],
  [
    "MIPI CSI-2 摄像头接口",
    "用途",
    "连接摄像头"
  ],
  [
    "Jetson Nano",
    "用途",
    "运行各种深度学习模型"
  ],
  [
    "Jetson Nano",
    "包含",
    "TensorFlow, PyTorch, Caffe / Caffe2, Keras, MXNet 等深度学习框架"
  ],
  [
    "Jetson Nano",
    "用途",
    "构建小型移动机器人、人脸签到打卡、口罩识别、智能门锁、智能音箱等复杂 AI 系统"
  ],
  [
    "Jetson Nano",
    "组成部分",
    "microSD 卡作为启动设备和主存储器"
  ],
  [
    "Jetson Nano",
    "特点",
    "需要 5V⎓2A 的高品质电源供电"
  ],
  [
    "Jetson Nano",
    "缺点",
    "只有 Ethernet 有线网络，不包括无线网卡"
  ],
  [
    "AC8265",
    "用途",
    "官方推荐的无线网卡"
  ],
  [
    "树莓派",
    "是什么",
    "一款设计用于教育的廉价开发板，目前已进化到第4代"
  ],
  [
    "树莓派",
    "特点",
    "廉价且周边设备多，互联网上有丰富的接口设备和项目案例资料"
  ],
  [
    "树莓派",
    "用途",
    "物联网与人工智能项目开发"
  ],
  [
    "树莓派",
    "组成部分",
    "40个GPIO引脚，包括电源接口、I2C接口、SPI接口、UART串口接口、PWM接口等"
  ],
  [
    "树莓派",
    "属于",
    "嵌入式开发平台"
  ],
  [
    "树莓派",
    "比较",
    "与NVIDIA Jetson Nano相比，树莓派更廉价且周边设备多"
  ],
  [
    "敏捷开发",
    "是什么",
    "一种应对快速变化需求的软件开发模式"
  ],
  [
    "敏捷开发",
    "特点",
    "强调自组织的跨功能团队协作、进化开发、提前交付与持续改进"
  ],
  [
    "GPIO",
    "是什么",
    "通用输入/输出接口，一组数字引脚，可用于将树莓派连接到其他电子设备"
  ],
  [
    "GPIO",
    "用途",
    "读取传感器数据，控制LED等外部设备"
  ],
  [
    "GPIO",
    "组成部分",
    "40个引脚，其中26个可用作数字输入或输出，14个用于其他功能"
  ],
  [
    "Wiring Pi",
    "是什么",
    "应用于树莓派的GPIO控制库函数"
  ],
  [
    "Wiring Pi",
    "用途",
    "控制GPIO管脚，可以在Shell脚本中使用"
  ],
  [
    "Wiring Pi",
    "组成部分",
    "GPIO库、I2C库、SPI库、UART库和软件PWM库等"
  ],
  [
    "NVIDIA Jetson Nano",
    "是什么",
    "一款功能强大的边缘计算设备"
  ],
  [
    "NVIDIA Jetson Nano",
    "特点",
    "能够在图像分类、物体检测等应用程序中并行运行多个神经网络，运行功率仅为5瓦"
  ],
  [
    "NVIDIA Jetson Nano",
    "组成部分",
    "64位四核ARM Cortex-A57 CPU、128核NVIDIA Maxwell架构GPU、4GB内存"
  ],
  [
    "NVIDIA Jetson Nano",
    "用途",
    "图像识别、对象检测和定位、姿势估计、语义分割、视频增强和智能分析等"
  ],
  [
    "TensorFlow Lite",
    "是什么",
    "一组工具，帮助开发者在移动设备、嵌入式设备和IoT设备上运行TensorFlow模型"
  ],
  [
    "TensorFlow Lite",
    "组成部分",
    "解释器、转换器、算子库和硬件加速代理"
  ],
  [
    "TensorFlow Lite",
    "用途",
    "设备端机器学习推断，延迟较低，二进制文件很小"
  ],
  [
    "OpenCV",
    "用途",
    "计算机视觉应用，如物体检测、人脸识别、图像分割等"
  ],
  [
    "face_recognition",
    "是什么",
    "一个强大、简单、易上手的人脸识别开源项目"
  ],
  [
    "face_recognition",
    "用途",
    "人脸检测、检测面部特征点、给脸部编码、从编码中找出人的名字"
  ],
  [
    "Haar特征的cascade分类器",
    "是什么",
    "一种有效的物品检测方法，通过许多正负样例中训练得到cascade方程"
  ],
  [
    "Haar特征的cascade分类器",
    "用途",
    "检测面部、眼睛、微笑等"
  ],
  [
    "TFLite模型",
    "组成部分",
    "interpreter"
  ],
  [
    "interpreter",
    "用途",
    "加载和运行TFLite模型"
  ],
  [
    "interpreter",
    "执行步骤",
    "allocate_tensors"
  ],
  [
    "interpreter",
    "执行步骤",
    "get_input_details"
  ],
  [
    "interpreter",
    "执行步骤",
    "get_output_details"
  ],
  [
    "interpreter",
    "执行步骤",
    "set_tensor"
  ],
  [
    "interpreter",
    "执行步骤",
    "invoke"
  ],
  [
    "模型推理",
    "用途",
    "获取分类结果的概率"
  ],
  [
    "TensorFlow Lite API",
    "用途",
    "执行模型推理"
  ],
  [
    "TensorFlow Lite API",
    "包含",
    "创建解释器、分配张量等功能"
  ],
  [
    "TensorFlow Lite API",
    "支持",
    "多种编程语言"
  ],
  [
    "TensorFlow Lite API",
    "支持",
    "Android、iOS和Linux等移动/嵌入式平台"
  ],
  [
    "TensorFlow Lite 推理",
    "执行步骤",
    "将模型加载到内存中"
  ],
  [
    "TensorFlow Lite 推理",
    "执行步骤",
    "基于现有模型构建Interpreter"
  ],
  [
    "TensorFlow Lite 推理",
    "执行步骤",
    "设置输入张量值"
  ],
  [
    "TensorFlow Lite 推理",
    "执行步骤",
    "执行推理"
  ],
  [
    "TensorFlow Lite 推理",
    "执行步骤",
    "读取输出张量值"
  ],
  [
    "Android",
    "使用方法",
    "使用Java或C++ API执行TensorFlow Lite推理"
  ],
  [
    "iOS",
    "使用方法",
    "使用Swift和Objective-C编写的原生iOS库执行TensorFlow Lite推理"
  ],
  [
    "iOS",
    "使用方法",
    "直接在Objective-C代码中使用C API执行TensorFlow Lite推理"
  ],
  [
    "Linux平台",
    "使用方法",
    "使用C++和Python提供的TensorFlow Lite API运行推断"
  ],
  [
    "Raspberry Pi",
    "属于",
    "Linux平台"
  ],
  [
    "移动和嵌入式设备",
    "特点",
    "资源限制严重"
  ],
  [
    "移动和嵌入式设备",
    "特点",
    "功耗要求苛刻"
  ],
  [
    "print(\"button pressed!\")",
    "用途",
    "观测开关去抖效果"
  ],
  [
    "RPI.GPIO 库",
    "包含",
    "wait_for_edge()函数"
  ],
  [
    "RPI.GPIO 库",
    "包含",
    "add_event_detect()函数"
  ],
  [
    "wait_for_edge()函数",
    "特点",
    "阻塞函数，会阻塞程序执行，直到检测到一个边沿"
  ],
  [
    "add_event_detect()函数",
    "特点",
    "增加一个事件的检测函数"
  ],
  [
    "边缘",
    "是什么",
    "电信号从低电平到高电平，或从高电平到低电平状态的改变"
  ],
  [
    "get_tensor()",
    "用途",
    "返回张量数据的副本"
  ],
  [
    "get_tensor()",
    "是什么",
    "一个函数"
  ],
  [
    "tensor()",
    "用途",
    "获取张量的指针"
  ],
  [
    "interpreter.get_tensor()",
    "用途",
    "获取张量的数据"
  ],
  [
    "tf.nn.softmax()",
    "用途",
    "计算预测结果的概率分布"
  ],
  [
    "class_names",
    "包含",
    "daisy, dandelion, roses, sunflowers, tulips"
  ],
  [
    "TensorFlow",
    "特点",
    "版本变化后API函数会改变"
  ],
  [
    "树莓派系统",
    "执行步骤",
    "直接更新树莓派系统"
  ],
  [
    "树莓派系统",
    "执行步骤",
    "更新系统需要 root 权限"
  ],
  [
    "树莓派系统",
    "执行步骤",
    "跟换源"
  ],
  [
    "树莓派系统",
    "执行步骤",
    "修改软件源的配置文件/etc/apt/sources.list"
  ],
  [
    "树莓派系统",
    "用途",
    "安装其它版本的 Python"
  ],
  [
    "Python",
    "执行步骤",
    "下载时选择特定版本"
  ],
  [
    "清华源",
    "是什么",
    "Raspbian 软件仓库镜像"
  ],
  [
    "nano",
    "用途",
    "编辑工具"
  ],
  [
    "vi",
    "用途",
    "编辑工具"
  ],
  [
    "软件源的配置文件",
    "组成部分",
    "/etc/apt/sources.list"
  ],
  [
    "NVIDIA Jetson Nano 开发板",
    "是什么",
    "一款功能强大的边缘计算设备"
  ],
  [
    "NVIDIA Jetson Nano 开发板",
    "用途",
    "在图像分类、物体检测、分割和语音处理等应用程序中并行运行多个神经网络"
  ],
  [
    "NVIDIA Jetson Nano 开发板",
    "特点",
    "运行功率仅为 5 瓦"
  ],
  [
    "NVIDIA Jetson Nano 开发板",
    "特点",
    "边做边学的理想工具"
  ],
  [
    "NVIDIA Jetson Nano 开发板",
    "组成部分",
    "Linux 开发环境"
  ],
  [
    "NVIDIA Jetson Nano 开发板",
    "组成部分",
    "大量易于学习的教程"
  ],
  [
    "NVIDIA Jetson Nano 开发板",
    "组成部分",
    "大量的由活跃开发者社区打造的开源项目"
  ],
  [
    "NVIDIA Jetson Nano 开发板",
    "比较",
    "Raspberry Pi 4"
  ],
  [
    "NVIDIA Jetson Nano 开发板",
    "比较",
    "Intel Neural Compute Stick 2"
  ],
  [
    "NVIDIA Jetson Nano 开发板",
    "比较",
    "Google Edge TPU Coral Dev Board"
  ],
  [
    "Jetson Nano CPU",
    "组成部分",
    "64位四核的 ARM Cortex-A57"
  ],
  [
    "Raspberry Pi 4",
    "组成部分",
    "ARM Cortex-A72"
  ],
  [
    "NVIDIA Jetson Nano 开发板",
    "特点",
    "4GB 的内存并不能完全使用，其中有一部分（1GB 左右）是和显存共享的"
  ],
  [
    "NVIDIA Jetson Nano 开发板",
    "优点",
    "体积小，采用核心板可拆的设计，核心板的大小只有70 x 45 mm，可以很方便的集成在各种嵌入式应用中"
  ],
  [
    "NVIDIA Jetson Nano 开发板",
    "组成部分",
    "128核 NVIDIA Maxwell 架构的 GPU"
  ],
  [
    "NVIDIA Jetson Nano 开发板",
    "特点",
    "计算能力不高，勉强可以使用一些小规模、并且优化过的网络进行推理，训练的话还是不够用的"
  ],
  [
    "NVIDIA Jetson Nano 开发板",
    "特点",
    "功耗非常低"
  ],
  [
    "NVIDIA Jetson Nano 开发板",
    "组成部分",
    "两种模式：5W（低功耗模式；可以使用 USB 口供电）和10W（必须使用 Power Jack 外接5V 电源供电）"
  ],
  [
    "NVIDIA Jetson Nano 开发板",
    "组成部分",
    "microSD 卡插槽，可以进行系统镜像烧写"
  ],
  [
    "NVIDIA Jetson Nano 开发板",
    "组成部分",
    "40 针 GPIO 扩展接口"
  ],
  [
    "NVIDIA Jetson Nano 开发板",
    "组成部分",
    "Micro USB 接口，用来传输数据或使用电源供电"
  ],
  [
    "NVIDIA Jetson Nano 开发板",
    "组成部分",
    "千兆以太网端口"
  ],
  [
    "NVIDIA Jetson Nano 开发板",
    "组成部分",
    "USB"
  ],
  [
    "Jetson Nano",
    "间接包含",
    "已经训练好的分类器，其中包括面部，眼睛，微笑等"
  ],
  [
    "JetPack",
    "间接包含",
    "已经训练好的分类器，其中包括面部，眼睛，微笑等"
  ],
  [
    "Raspberry Pi",
    "可能用途",
    "使用C++和Python提供的TensorFlow Lite API运行推断"
  ],
  [
    "Face Recognition",
    "可能与...相关",
    "face_recognition"
  ],
  [
    "Conv2D",
    "可能与...相关",
    "MaxPooling2D"
  ],
  [
    "Jetson Nano",
    "可能与...相关",
    "Jetson Nano"
  ],
  [
    "Jetson Nano",
    "可能与...相关",
    "JetPack"
  ],
  [
    "Wiring Pi",
    "可能与...相关",
    "Wiring Pi"
  ],
  [
    "pip",
    "可能与...相关",
    "pip3"
  ],
  [
    "NVIDIA Jetson Nano",
    "可能与...相关",
    "NVIDIA Jetson Nano 开发板"
  ],
  [
    "nano",
    "可能与...相关",
    "vi"
  ]
]