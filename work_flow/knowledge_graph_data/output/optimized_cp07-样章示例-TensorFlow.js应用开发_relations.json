[
  [
    "tf.tidy",
    "用途",
    "防止应用程序中的内存泄漏"
  ],
  [
    "tf.tidy",
    "用途",
    "更谨慎地控制内存何时回收"
  ],
  [
    "index.html",
    "组成部分",
    "<!DOCTYPE html> <html> <head> <meta charset=\"utf-8\"> <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">"
  ],
  [
    "index.html",
    "用途",
    "用于构建网页界面"
  ],
  [
    "index.js",
    "用途",
    "用于编写JavaScript代码"
  ],
  [
    "data.js",
    "用途",
    "用于处理数据"
  ],
  [
    "tfjs-examples/mnist",
    "包含",
    "data.js文件"
  ],
  [
    "TensorFlow.js",
    "获取方式",
    "通过脚本标签（script tags）或从 yarn（或者 NPM）安装并使用 Parcel，WebPack 或 Rollup 等工具构建工程"
  ],
  [
    "TensorFlow.js",
    "使用方法",
    "在浏览器中加载 TensorFlow.js ，最方便的办法是在 HTML 中直接引用 TensorFlow.js 发布的 NPM 包中已经打包安装好的 JavaScript 代码"
  ],
  [
    "脚本标签",
    "用途",
    "Web 开发新手或从未听说过诸如 Webpack 或 Parcel 的工具时使用"
  ],
  [
    "构建工具",
    "用途",
    "有经验的开发者或想编写更大的程序时使用"
  ],
  [
    "构建工具",
    "包含",
    "Parcel, WebPack 或 Rollup 等工具"
  ],
  [
    "Tensorflow.js",
    "用途",
    "构建和运行机器学习模型"
  ],
  [
    "mnist项目",
    "包含",
    "HTML文件、JS文件和配置文件"
  ],
  [
    "index.html",
    "组成部分",
    "页面的基本结构，包含div标签、UI元素和JavaScript代码"
  ],
  [
    "index.js",
    "用途",
    "加载数据，定义模型，训练循环并指定UI元素"
  ],
  [
    "data.js",
    "用途",
    "下载和访问mnist数据集"
  ],
  [
    "ui.js",
    "用途",
    "更新可视化元素"
  ],
  [
    "package.json",
    "用途",
    "描述构建和运行示例所需的依赖项"
  ],
  [
    "yarn",
    "使用方法",
    "构建和运行mnist代码"
  ],
  [
    "mnist项目",
    "执行步骤",
    "从GitHub克隆项目代码，使用yarn构建和运行"
  ],
  [
    "git clone",
    "使用方法",
    "获取项目所需的HTML、JS文件和配置文件的副本"
  ],
  [
    "MnistData",
    "是什么",
    "一个用于从MNIST数据集中随机批量提取MNIST图像的类"
  ],
  [
    "MnistData",
    "包含",
    "训练数据和测试数据"
  ],
  [
    "MnistData",
    "用途",
    "训练和评估MNIST分类器模型"
  ],
  [
    "MnistData",
    "组成部分",
    "nextTrainBatch和nextTestBatch两个公共方法"
  ],
  [
    "nextTrainBatch",
    "用途",
    "从训练集中返回一批随机图像及其标签"
  ],
  [
    "nextTestBatch",
    "用途",
    "从测试集中返回一批图像及其标签"
  ],
  [
    "MNIST分类器",
    "执行步骤",
    "随机打乱数据集以避免模型预测受图像顺序影响"
  ],
  [
    "showExamples函数",
    "用途",
    "加载数据集并显示20张图片"
  ],
  [
    "Web Server for Chrome",
    "用途",
    "搭建本地服务器解决跨域问题"
  ],
  [
    "index.html",
    "组成部分",
    "<html> <body> <h4>TFJS example<hr/></h4> <div id=\"micro-out-div\">TensorFlow.js Test</div> <script src=\"./index.js\"> </script> </body> </html>"
  ],
  [
    "index.html",
    "用途",
    "通过script标签引入index.js"
  ],
  [
    "index.js",
    "用途",
    "写一段简单的测试代码"
  ],
  [
    "index.js",
    "组成部分",
    "import * as tf from '@tensorflow/tfjs' console.log(tf.version.tfjs) const shape = [2, 3]; // 2 rows, 3 columns const a = tf.tensor"
  ],
  [
    "index.html",
    "执行步骤",
    "在目录下创建文件"
  ],
  [
    "index.js",
    "执行步骤",
    "在目录下创建文件"
  ],
  [
    "index.html",
    "包含",
    "<script>标签"
  ],
  [
    "index.js",
    "包含",
    "TensorFlow.js代码"
  ],
  [
    "模型训练",
    "执行步骤",
    "定义需要监视的指标['loss', 'val_loss', 'acc', 'val_acc']"
  ],
  [
    "验证集",
    "用途",
    "了解模型效率、调试超参数"
  ],
  [
    "trainXs",
    "用途",
    "训练集，用于训练模型"
  ],
  [
    "testXs",
    "用途",
    "验证集，在每个时期结束时对模型进行测试"
  ],
  [
    "数据集",
    "组成部分",
    "输入（Xs）和标签（Ys）"
  ],
  [
    "model.fit",
    "执行步骤",
    "设置BATCH_SIZE为512，每次批量处理512个图像"
  ],
  [
    "MNIST数据集",
    "特点",
    "单个图像的维度为[28,28,1]"
  ],
  [
    "较大的批次",
    "优点",
    "对模型的权重产生了更一致且变化较小的渐变更新"
  ],
  [
    "较大的批次",
    "缺点",
    "训练期间需要更多的内存"
  ],
  [
    "model.fit",
    "执行步骤",
    "设置验证集validationData为[testXs, testYs]"
  ],
  [
    "model.fit",
    "特点",
    "是异步函数，需要使用await等待其完成"
  ],
  [
    "训练曲线",
    "示例",
    "图7-12 MNIST模型训练曲线，执行10个周期"
  ],
  [
    "package.json",
    "是什么",
    "项目的清单文件"
  ],
  [
    "package.json",
    "用途",
    "用于工具的配置中心"
  ],
  [
    "package.json",
    "用途",
    "存储已安装软件包的名称和版本"
  ],
  [
    "开发依赖",
    "是什么",
    "仅用于开发的程序包"
  ],
  [
    "开发依赖",
    "用途",
    "在生产环境中不需要"
  ],
  [
    "开发依赖",
    "示例",
    "测试的软件包、webpack或Babel"
  ],
  [
    "模型",
    "用途",
    "对手写数字的图像进行分类"
  ],
  [
    "doPrediction函数",
    "执行步骤",
    "获取测试数据，重塑数据形状，获取标签，进行预测，返回预测结果和标签"
  ],
  [
    "showAccuracy函数",
    "执行步骤",
    "调用doPrediction函数获取预测结果和标签，计算每个类别的准确度，显示准确度"
  ],
  [
    "showConfusion函数",
    "执行步骤",
    "调用doPrediction函数获取预测结果和标签，计算混淆矩阵，显示混淆矩阵"
  ],
  [
    "混淆矩阵",
    "是什么",
    "一种特定的矩阵用来呈现算法性能的可视化效果，通常用于监督学习"
  ],
  [
    "混淆矩阵",
    "特点",
    "每一列代表预测值，每一行代表的是实际的类别"
  ],
  [
    "TensorFlow.js",
    "用途",
    "实现根据摄像头采集的手势图像来确定它代表剪刀、石头、布中的哪一个"
  ],
  [
    "图像分类任务",
    "执行步骤",
    "数据图像的采集、模型的训练、参数的调整，最终得到模型文件，并在网页端部署"
  ],
  [
    "MNIST数据集",
    "输入形状",
    "[null, 28, 28, 1]"
  ],
  [
    "MNIST数据集",
    "输出形状",
    "[null, 10]"
  ],
  [
    "Sequential模型",
    "是什么",
    "张量连续从一层传递到下一层的模型"
  ],
  [
    "卷积图像分类模型",
    "组成部分",
    "Sequential模型"
  ],
  [
    "卷积图像分类模型",
    "执行步骤",
    "添加卷积层、池化层、展平层和全连接层"
  ],
  [
    "tf.layers.conv2d",
    "用途",
    "创建二维卷积层"
  ],
  [
    "二维卷积层",
    "特点",
    "学习空间不变的变换"
  ],
  [
    "二维卷积层",
    "参数",
    "inputShape, kernelSize, filters, strides, activation, kernelInitializer"
  ],
  [
    "inputShape",
    "是什么",
    "流入模型第一层的数据的形状"
  ],
  [
    "kernelSize",
    "是什么",
    "应用于输入数据的滑动卷积滤波器窗口的大小"
  ],
  [
    "filters",
    "是什么",
    "应用于输入数据，大小为kernelSize的滤波器窗口的数量"
  ],
  [
    "strides",
    "是什么",
    "滑动窗口的步长"
  ],
  [
    "activation",
    "是什么",
    "卷积完成后应用于数据的激活函数"
  ],
  [
    "kernelInitializer",
    "是什么",
    "用于随机初始化模型权重的方法"
  ],
  [
    "tf.layers.maxPooling2d",
    "用途",
    "创建最大池化层"
  ],
  [
    "最大池化层",
    "工作原理",
    "通过计算每个滑动窗口的最大值来缩减卷积结果的大小"
  ],
  [
    "最大池化层",
    "参数",
    "poolSize, strides"
  ],
  [
    "poolSize",
    "是什么",
    "应用于输入数据的滑动窗口大小"
  ],
  [
    "strides",
    "是什么",
    "滑动窗口的步长"
  ],
  [
    "flatten层",
    "用途",
    "将前一层的输出平铺到一个向量中"
  ],
  [
    "dense层",
    "用途",
    "执行最终的分类"
  ],
  [
    "Adam优化器",
    "是什么",
    "一种对随机目标函数执行一阶梯度优化的算法"
  ],
  [
    "Adam优化器",
    "特点",
    "基于适应性低阶矩估计"
  ],
  [
    "交叉熵损失函数",
    "用途",
    "优化分类任务"
  ],
  [
    "准确度",
    "用途",
    "衡量所有预测中正确预测的百分比"
  ],
  [
    "预测汽车油耗效率",
    "是什么",
    "一个简单的线性回归实验，用于预测汽车的油耗效率MPG"
  ],
  [
    "预测汽车油耗效率",
    "用途",
    "帮助熟悉使用TensorFlow.js进行训练模型的基本流程与概念和语法"
  ],
  [
    "预测汽车油耗效率",
    "执行步骤",
    "加载数据并准备进行训练；定义模型结构；训练模型，并监视其性能；评估模型"
  ],
  [
    "TensorFlow.js",
    "用途",
    "在浏览器中训练模型"
  ],
  [
    "MPG",
    "是什么",
    "汽车的油耗效率"
  ],
  [
    "Horsepower",
    "是什么",
    "汽车的功率"
  ],
  [
    "@tensorflow/tfjs",
    "属于",
    "TensorFlow.js模块"
  ],
  [
    "@tensorflow/tfjs-vis",
    "属于",
    "TensorFlow.js模块"
  ],
  [
    "@tensorflow/tfjs-vis",
    "用途",
    "进行浏览器可视化的一组实用工具库"
  ],
  [
    "cdn.jsdelivr.net",
    "用途",
    "将NPM模块转换为在线可以引用的免费服务"
  ],
  [
    "index.html",
    "组成部分",
    "HTML文件"
  ],
  [
    "index.html",
    "用途",
    "创建主页并加载数据"
  ],
  [
    "TensorFlow.js",
    "是什么",
    "一个用于机器学习的JavaScript库"
  ],
  [
    "TensorFlow.js",
    "包含",
    "低级的机器学习构建模块和高级的类似Keras的API"
  ],
  [
    "TensorFlow.js",
    "用途",
    "构建神经网络"
  ],
  [
    "TensorFlow.js",
    "组成部分",
    "Layers API和Core API"
  ],
  [
    "Layers API",
    "用途",
    "使用层构建模型"
  ],
  [
    "Core API",
    "用途",
    "借助低级运算构建模型"
  ],
  [
    "TensorFlow.js",
    "特点",
    "提供低级构建模块和高级Keras Layers API"
  ],
  [
    "张量(Tensor)",
    "是什么",
    "TensorFlow.js中的中心数据单元，是一维或多维数组"
  ],
  [
    "Tensor",
    "特点",
    "具有shape属性定义数组形状"
  ],
  [
    "tf.tensor",
    "用途",
    "创建Tensor实例"
  ],
  [
    "TensorFlow.js",
    "是什么",
    "TensorFlow 的 JavaScript 版本"
  ],
  [
    "TensorFlow.js",
    "特点",
    "支持 GPU 硬件加速"
  ],
  [
    "TensorFlow.js",
    "用途",
    "运行在 Node.js 或浏览器环境中"
  ],
  [
    "TensorFlow.js",
    "用途",
    "完全基于 JavaScript 从头开发、训练和部署模型"
  ],
  [
    "TensorFlow.js",
    "用途",
    "运行已有的 Python 版 TensorFlow 模型"
  ],
  [
    "TensorFlow.js",
    "用途",
    "基于现有的模型进行继续训练"
  ],
  [
    "TensorFlow.js",
    "是什么",
    "JavaScript 语言版本的扩展，支持前端开发者在浏览器环境中实现深度学习功能"
  ],
  [
    "TensorFlow.js",
    "优点",
    "开箱即用的开发库，开发者无需编写基础复杂的数学问题"
  ],
  [
    "TensorFlow.js",
    "优点",
    "可运行于浏览器，减少服务器运算，提高服务器资源利用，增强客户端响应速度"
  ],
  [
    "TensorFlow.js",
    "优点",
    "使用JavaScript语言，降低前端工程师入门门槛"
  ],
  [
    "TensorFlow.js",
    "优点",
    "支持GPU硬件加速，提高运算效率"
  ],
  [
    "TensorFlow.js",
    "优点",
    "在Node环境进行运算的速度与Python速度不相上下"
  ],
  [
    "TensorFlow.js",
    "优点",
    "模型可以跟Python等其他语言模型进行互转"
  ],
  [
    "TensorFlow.js",
    "优点",
    "浏览器可以很好可视化机器训练过程，增加机器学习的应用场景"
  ],
  [
    "TensorFlow.js",
    "组成部分",
    "底层 Core API 和最高级的 Layers API"
  ],
  [
    "TensorFlow.js",
    "用途",
    "在浏览器上开发模型或运行已训练的模型"
  ],
  [
    "TensorFlow.js",
    "用途",
    "训练模型来识别图片或语音，训练模型玩游戏或构建创造钢琴音乐的神经网络"
  ],
  [
    "TensorFlow.js",
    "工作原理",
    "在Node.js环境中使用CUDA环境支持，或在浏览器环境中使用WebGL环境支持进行硬件加速"
  ],
  [
    "DeepLearning.js",
    "是什么",
    "基于 WebGL 加速的开放源代码 JavaScript 机器学习库"
  ],
  [
    "DeepLearning.js",
    "特点",
    "可以直接在浏览器中运行，无需安装或借助后端"
  ],
  [
    "DeepLearning.js",
    "特点",
    "利用 WebGL 在 GPU 上执行计算大幅提高速度，同时能够执行完整全面的反向传播"
  ],
  [
    "TensorFlow.js",
    "属于",
    "Google 提供的扩展解决方案"
  ],
  [
    "TensorFlow.js",
    "包含",
    "DeepLearning.js 团队与 TensorFlow 团队合并后的重命名版本"
  ],
  [
    "端侧机器学习",
    "优点",
    "分担部分云端的计算压力，具有更好的隐私性"
  ],
  [
    "端侧机器学习",
    "优点",
    "可以借助 Node.js 在服务端继续使用 JavaScript 进行开发"
  ],
  [
    "TensorFlow",
    "特点",
    "不同扩展版本之间可以通过迁移学习实现模型复用，或在预训练模型基础上定制深度神经网络"
  ],
  [
    "TensorFlow.js",
    "包含",
    "tf.sequential()和tf.model()两种创建模型的方式"
  ],
  [
    "tf.sequential()",
    "是什么",
    "一个线性堆叠layers的模型"
  ],
  [
    "tf.model()",
    "是什么",
    "定义的神经元网络层与层之间的关系较为随意的模型"
  ],
  [
    "TensorFlow.js",
    "特点",
    "完整模仿了Keras的模型定义方式"
  ],
  [
    "createModel()",
    "执行步骤",
    "实例化tf.sequential对象，添加输入层和输出层"
  ],
  [
    "输入层",
    "组成部分",
    "tf.layers.dense({inputShape: [1], units: 1, useBias: true})"
  ],
  [
    "输出层",
    "组成部分",
    "tf.layers.dense({units: 1, useBias: true})"
  ],
  [
    "useBias",
    "是什么",
    "神经元权重计算中的偏置量"
  ],
  [
    "tfvis.show.modelSummary",
    "用途",
    "将模型显示在浏览器中"
  ],
  [
    "TensorFlow.js",
    "是什么",
    "一个用于使用 JavaScript 进行机器学习开发的库"
  ],
  [
    "TensorFlow.js",
    "用途",
    "在浏览器和 Node.js 训练和部署机器学习模型"
  ],
  [
    "TensorFlow.js",
    "特点",
    "支持 GPU 硬件加速"
  ],
  [
    "TensorFlow.js",
    "特点",
    "可以运行在 Node.js 或浏览器环境中"
  ],
  [
    "TensorFlow.js",
    "特点",
    "支持完全基于 JavaScript 从头开发、训练和部署模型"
  ],
  [
    "TensorFlow.js",
    "特点",
    "可以用来运行已有的 Python 版 TensorFlow 模型"
  ],
  [
    "TensorFlow.js",
    "组成部分",
    "Core API 和 Layers API"
  ],
  [
    "TensorFlow.js",
    "优点",
    "开箱即用的开发库，开发者无需花精力去编写基础复杂的数学问题"
  ],
  [
    "TensorFlow.js",
    "优点",
    "减少服务器的运算，提高服务器资源利用，增强客户端响应运算结果的速度"
  ],
  [
    "TensorFlow.js",
    "优点",
    "前端工程师不需要学习其他后端语言，降低入门门槛"
  ],
  [
    "TensorFlow.js",
    "优点",
    "使用 GPU 加速模型的运算，提高运算效率"
  ],
  [
    "TensorFlow.js",
    "优点",
    "模型可以跟 Python 等其他语言模型进行互转"
  ],
  [
    "TensorFlow.js",
    "工作原理",
    "使用底层 Core API 或最高级的 Layers API 在浏览器上开发模型"
  ],
  [
    "TensorFlow.js",
    "工作原理",
    "基于浏览器运行已训练的模型"
  ],
  [
    "TensorFlow.js",
    "执行步骤",
    "使用 Script Tag 在浏览器中加载"
  ],
  [
    "TensorFlow.js",
    "执行步骤",
    "通过 parcel 打包执行"
  ],
  [
    "张量(Tensor)",
    "是什么",
    "TensorFlow.js 中的中心数据单元，是一维或多维数组"
  ],
  [
    "变量（Variable）",
    "是什么",
    "用张量的值进行初始化，但它们的值是可变的"
  ],
  [
    "操作（Ops）",
    "是什么",
    "用于操作数据的线性代数和机器学习运算"
  ],
  [
    "模型和层",
    "是什么",
    "在 Tensorflow.js 有两种创建模型的方式：可以用高层 API：Layers API 来建立模型，也用 Core API 来搭建相同的模型"
  ],
  [
    "Layers API",
    "是什么",
    "有两种方式创建模型：第一种是创建 sequential 模型，第二种是创建 functional 模型"
  ],
  [
    "Sequential 模型",
    "是什么",
    "将网络的每一层简单的叠在一起"
  ],
  [
    "Core API",
    "是什么",
    "写的模型包含了一系列的函数，这些函数以一个或多个张量作为输入，并输出另一个张量"
  ],
  [
    "内存管理",
    "是什么",
    "通过 dispose 和 tf.tidy 这两种方法来管理 GPU 内存"
  ],
  [
    "TensorFlow.js 环境配置",
    "执行步骤",
    "通过脚本标签（script tags）或从 yarn（或者 NPM）安装并使用 Parcel，WebPack 或 Rollup 等工具构建工程"
  ],
  [
    "预测汽车油耗效率",
    "执行步骤",
    "加载数据并准备进行训练"
  ],
  [
    "预测汽车油耗效率",
    "执行步骤",
    "定义模型结构"
  ],
  [
    "预测汽车油耗效率",
    "执行步骤",
    "训练模型，并监视其性能"
  ],
  [
    "预测汽车油耗效率",
    "执行步骤",
    "评估模型"
  ],
  [
    "手写数字识别",
    "执行步骤",
    "从 GitHub 获取源码并运行"
  ],
  [
    "手写数字识别",
    "执行步骤",
    "创建相关文件"
  ],
  [
    "手写数字识别",
    "执行步骤",
    "定义模型结构"
  ],
  [
    "手写数字识别",
    "执行步骤",
    "训练模型"
  ],
  [
    "手写数字识别",
    "执行步骤",
    "使用模型进行评估与预测"
  ],
  [
    "卷积层",
    "是什么",
    "在图像上滑动滤波器窗口以学习空间不变的变换"
  ],
  [
    "最大池化层",
    "是什么",
    "通过计算每个滑动窗口的最大值来缩减卷积结果的大小"
  ],
  [
    "flatten 层",
    "是什么",
    "将前一层的输出平铺到一个向量中"
  ],
  [
    "dense 层",
    "是什么",
    "执行最终的分类"
  ],
  [
    "Adam 优化器",
    "是什么",
    "一种对随机目标函数执行一阶梯度优化的算法，基于适应性低阶矩估计"
  ],
  [
    "交叉熵（categoricalCrossentropy）",
    "是什么",
    "常用于优化分类任务的损失函数"
  ],
  [
    "准确度",
    "是什么",
    "衡量所有预测中正确预测的百分比"
  ],
  [
    "混淆矩阵",
    "是什么",
    "一种特定的矩阵用来呈现算法性能的可视化效果，通常用于监督学习"
  ],
  [
    "数据预处理",
    "组成部分",
    "数据规范化和转换为张量类型"
  ],
  [
    "JavaScript",
    "缺点",
    "在大规模数据处理上不如Python高效"
  ],
  [
    "JavaScript",
    "缺点",
    "内存回收问题突出"
  ],
  [
    "TensorFlow.js",
    "用途",
    "解决JavaScript内存回收问题"
  ],
  [
    "tf.tidy()",
    "用途",
    "进行内存清理工作，防止内存泄露"
  ],
  [
    "tf.tidy()",
    "使用方法",
    "把大规模的内存操作放置在函数的回调中执行"
  ],
  [
    "convertToTensor函数",
    "执行步骤",
    "打乱数据顺序"
  ],
  [
    "convertToTensor函数",
    "执行步骤",
    "创建特征向量和标签向量"
  ],
  [
    "convertToTensor函数",
    "执行步骤",
    "将数据转换为张量格式"
  ],
  [
    "convertToTensor函数",
    "执行步骤",
    "对输入输出数据做归一化操作"
  ],
  [
    "归一化操作",
    "用途",
    "让输入输出映射到0-1之间"
  ],
  [
    "归一化操作",
    "用途",
    "保证后期更有效地训练"
  ],
  [
    "CNN",
    "用途",
    "识别手写数字"
  ],
  [
    "Tensorflow.js",
    "用途",
    "构建CNN模型"
  ],
  [
    "手写数字识别",
    "执行步骤",
    "训练分类器并评估准确性"
  ],
  [
    "分类器",
    "工作原理",
    "查看数千个图像及其标签进行训练"
  ],
  [
    "测试数据",
    "用途",
    "评估分类器的准确性"
  ],
  [
    "model.fit()",
    "用途",
    "用于训练模型"
  ],
  [
    "model.predict()",
    "用途",
    "用于模型预测"
  ],
  [
    "TensorFLow-vis",
    "用途",
    "可视化模型训练的过程和结果"
  ],
  [
    "回调函数",
    "用途",
    "动态显示训练过程"
  ],
  [
    "tf.train.adam()",
    "是什么",
    "模型优化算法"
  ],
  [
    "tf.losses.meanSquaredError",
    "是什么",
    "均方差损失函数"
  ],
  [
    "batchSize",
    "是什么",
    "一次采样的训练数据数量"
  ],
  [
    "epochs",
    "是什么",
    "遍历所有样本的次数"
  ],
  [
    "shuffle",
    "用途",
    "打乱数据集"
  ],
  [
    "callback",
    "用途",
    "在每个训练周期显示训练情况"
  ],
  [
    "tf.linspace()",
    "用途",
    "创建0~1之间平均分配的值"
  ],
  [
    "predict()",
    "用途",
    "进行模型预测"
  ],
  [
    "tfvis.render.scatterplot()",
    "用途",
    "渲染散点图比较预测结果和原始数据"
  ],
  [
    "testModel()",
    "用途",
    "预测油耗"
  ],
  [
    "normalizationData",
    "用途",
    "用于数据的归一化和反归一化"
  ],
  [
    "tf.tidy",
    "是什么",
    "TensorFlow.js中的一个函数，用于执行一个函数并清除所有创建的中间张量，释放它们的GPU内存"
  ],
  [
    "tf.tidy",
    "用途",
    "在大量张量操作时自动清理中间张量，避免手动调用dispose"
  ],
  [
    "tf.tidy",
    "特点",
    "不清除内部函数的返回值"
  ],
  [
    "tf.tidy",
    "工作原理",
    "执行传入的函数，并在函数执行完毕后自动清除所有创建的中间张量"
  ],
  [
    "dispose",
    "用途",
    "手动释放张量占用的GPU内存"
  ],
  [
    "dispose",
    "缺点",
    "在大量张量操作时手动调用会很麻烦"
  ],
  [
    "index.html",
    "可能与...相关",
    "index.js"
  ],
  [
    "混淆矩阵",
    "可能与...相关",
    "混淆矩阵"
  ],
  [
    "strides",
    "可能与...相关",
    "strides"
  ],
  [
    "@tensorflow/tfjs",
    "可能与...相关",
    "@tensorflow/tfjs-vis"
  ],
  [
    "TensorFlow.js",
    "可能与...相关",
    "TensorFlow.js"
  ],
  [
    "预测汽车油耗效率",
    "可能与...相关",
    "手写数字识别"
  ]
]